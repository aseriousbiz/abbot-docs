{
  "chatops/built-in-skills/index.html": {
    "href": "chatops/built-in-skills/index.html",
    "title": "Things every Abbot can do | Abbot Docs",
    "keywords": "Things every Abbot can do Abbot can do a lot the moment it's installed, even before you've created your first skill. Here are some things you can do as soon as you see Abbot. Use Abbot as a database for facts with the rem skill Abbot makes it easy to keep track of facts for your team. Set a new fact by saying @abbot rem {keyword(s)} is {fact} . We use rem to help us remember URLs to dashboards, office addresses, and funny gifs that we've shared in the past. You can search what's been saved with the | character. For example, to find anything saved with cat in the keyname, you would say @abbot rem | cat , and Abbot would return a list of every key containing cat . Make Abbot forget a fact by saying @abbot forget {keyword(s)} . Create a team biography with the who skill Abbot can keep track of fun facts about your team as well. Say @abbot @Username is {fun fact} and Abbot will remember. Afterwards, anyone can see anyone else's biography by saying @abbot who is @Username in chat. Items can be removed by saying @abbot @Username is not {fun fact} . Find out who's nearby with who is near Abbot can tell you who's nearby if people have set their location in chat. Say @abbot who is near me or @abbot who is nearby to find out who is within 25 miles (or 40 kilometers) of your location. You can ask Abbot about who is near another location by saying @abbot who is near {location} . It's almost as good as being there yourself! Set your location in chat by saying @abbot my location is with your location. Set permissions with the can skill Some skills may do dangerous things, or access sensitive data. Abbot makes it easy to control who can access those skills with the can skill. To use it, mark the skill as restricted in the website. Then in chat, say @abbot @Username can use {skill} . This will allow @Username to call the skill from chat. Other permission levels are: edit - In addition to using the skill, allows @Username to edit the skill. admin - Gives full permissions to the skill, including granting and revoking other user's permissions. not - Revokes all permissions to the skill. Use it like this: @abbot @User name can not {skill} . You can find out who has permissions to a restricted skill by saying @abbot who can {skill} . We made a short video about the can skill if you'd like to learn more about it here: Restricting Skills with Abbot ACLs . Custom Lists We saw a lot of scripts made to let people create lists of information (usually gifs or quotes), and return random items from the list whenever the script was called. This happened so much that we made it easy to create these types of skills directly from chat. Thes are called list skills. There's a guide specifically for list skills because we think they're so useful, check it out here: Guide: List Skills . Answering questions and general tomfoolery No matter the topic, Abbot always has something to say. Abbot tries to be useful, and if that fails, will return something... creative. Try asking Abbot some questions! Some ideas: @abbot what’s the capital of Uruguay? @abbot what’s the square root of 256? If your location is set using @abbot my location is , Abbot will try to give you results specific to your location. If you've set your location, try saying @abbot coffee shops near me . Finally, if you're not sure what to say; try saying hi to Abbot or asking Abbot's opinion about your favorite band! Ideas? Feature requests? Send feedback with Abbot! Do you have a fun idea for an Abbot skill, but you're not sure how to make it happen? Is there something Abbot can do better? Send us feedback from chat by saying @abbot feedback followed by your feedback. If you'd like for us to respond directly, be sure to set your email first by saying @abbot my email is {your email address} , otherwise we may not be able to contact you with questions or updates."
  },
  "chatops/custom-runner/fly.html": {
    "href": "chatops/custom-runner/fly.html",
    "title": "Tutorial: Deploying a runner to Fly.io | Abbot Docs",
    "keywords": "Tutorial: Deploying a runner to Fly.io Fly.io is a platform for quickly launching applications all over the world. It's a great platform for hosting Abbot skill runners, since you can quickly launch any Docker image you want. To begin, make sure you've signed up for an account at Fly.io . Download the Fly CLI and log in to it. Create a new Fly application by moving to an empty folder on your machine and running the following command: > flyctl launch Enter any app name you'd like, select the organization and region (we recommend sea or sjc because of their proximity to Abbot's infrastructure). You do not need to create a Postgresql or Redis database to deploy the runner. Create a Dockerfile with the following text: FROM abbotpublic.azurecr.io/runners/python:latest ENV ABBOT_SANDBOX_POLICY=none ENV PORT=8080 Generate a random token to use to authenticate Abbot and the runner. This token ensures that only your organization can connect to and run skills on the runner. To generate the token, just generate a random string, at least 64 characters long, and save it as a secret in Fly: > ABBOT_SKILL_RUNNER_TOKEN=$(openssl rand -hex 64) > flyctl secrets set ABBOT_SKILL_RUNNER_TOKEN=\"$ABBOT_SKILL_RUNNER_TOKEN\" Note Don't lose ABBOT_SKILL_RUNNER_TOKEN! If you do, you'll need to regenerate it and redeploy. Now, you can deploy the app: > flyctl deploy Validate that the runner is working by accessing the https://your-app-name.fly.dev/api/v1/status endpoint (replacing your-app-name with whatever app name you chose when creating the Fly app). You should see a \"status\": \"ok\" field in the JSON payload. Now, go to the \"Runners\" section of your Organization settings page in Abbot, and select \"Custom Runners\" on the far right. Click \"Edit\" next to \"Python\" in \"Runner Endpoints\": Insert the public URL to the /api/v1/execute endpoint of your custom runner as the \"Url\", e.g. https://your-app-name.fly.dev/api/v1/execute . Paste the token you generated in ABBOT_SKILL_TOKEN above as the \"Api Token\". Save, and that's it! You're now running your runner on Fly!"
  },
  "chatops/custom-runner/index.html": {
    "href": "chatops/custom-runner/index.html",
    "title": "Self-Hosted Skill Runners | Abbot Docs",
    "keywords": "Self-Hosted Skill Runners If you need more functionality than we provide on the default hosted skill runners, you can host your skill runners. Currently, only the Python runner can be self-hosted; contact us at support@ab.bot if you're interested in self-hosting other runners. The Python runner is open-source at aseriousbiz/abbot-py , and you can build it yourself there using the Dockerfile . Alternatively, there are public docker images available which you can deploy directly, or use as a base image to install further dependencies (see below): Python: abbotpublic.azurecr.io/runner/python Where to deploy You can launch Abbot Runners anywhere a Docker image can be hosted. For example, we provide tutorials for these environments: Tutorial: Deploying a runner to Fly.io You can also host the runner on your own infrastructure. Deployment prerequisites To launch a self-hosted runner, you must set the following environment variables: ABBOT_SANDBOX_POLICY must be set to the sandboxing policy you want to use in your runner (see \"Sandboxing\" below) ABBOT_SKILL_RUNNER_TOKEN must be set to a 64 character (or longer) random string that will be used as the \"Api Token\" value when configuring your custom runner. PORT (Optional) can be used to specify the port within the container on which the runner will listen. You need to configure your hosting environment to bind this port to a public address. Defaults to 80 . The runner does not support TLS connections. We strongly recommend that you only host the runner in an environment that provides TLS termination, and only connect to the runner using an https URL. Sandboxing Since the Skill Runner is designed to run skill code your users create, we provide some minor sandboxing options within the runner itself to ensure skill code can't do things it shouldn't be able to do. Note The sandboxing within the runner itself is NOT SUFFICIENT to ensure safety when running untrusted code from third-parties. You are still responsible for ensuring the skills you write don't abuse your own runner infrastructure. There are three sandboxing policies available. Select the policy you want to apply by setting the ABBOT_SANDBOX_POLICY environment variable: none - Absolutely no sandboxing is performed. The skill code runs unrestricted. permissive - (Default) Permissive sandboxing, generally good for preventing unintentional disruption to the runner: Skills are forbidden from accessing certain Python modules that could allow access to the runner itself ( os , subprocess , etc.). restrictive - Most restrictive sandboxing, limits skills to well-known modules and functionality: Skills can only access known-good modules. Skill code cannot access members of a Python class with a name starting with _ . Customizing your image You can customize your image in the Dockerfile by running additional commands after the initial FROM . For example, you can add in additional dependencies to the Python runner using RUN pip install commands in the Dockerfile . The below dockerfile installs the cuddle module , for parsing KDL documents. FROM abbotpublic.azurecr.io/runners/python:latest ENV ABBOT_SANDBOX_POLICY=none RUN pip install cuddle"
  },
  "chatops/hello-world/index.html": {
    "href": "chatops/hello-world/index.html",
    "title": "Writing your first Abbot skill | Abbot Docs",
    "keywords": "Writing your first Abbot skill Hello, World (and everyone else!) Let's start by showing Abbot how to say hello. To do this, we'll use the Bot object ( full reference here ) to respond to the channel, as well as to determine what text was entered. Creating Skills First, create a new skill ( C# skill , JavaScript , Python ). The name of the skill is how users will use it in chat. Name the skill hello . Abbot skills must be uniquely named, so if there is already a skill named hello you will need to choose another name. The Description and Usage fields help other Abbot users in chat figure out how to use your skills. Fill in some descriptive text in those fields now. Editing Code Abbot populates new skills with some default code that replies back with the passed in arguments. It should look something like: C# JavaScript Python // Change the code below with the code for your skill! await Bot.ReplyAsync(\"Hello \" + Bot.Arguments); module.exports = (async () => { // We modularize your code in order to run it. // Change the code below with the code for your skill! bot.reply(\"Hello \" + bot.arguments); })(); // Thanks for building with Abbot! # Change the code below with the code for your skill! bot.reply(\"Hello \" + bot.arguments) Go ahead and save the skill so you can test it. Below the editor is an interactive shell. The prompt should say @abbot hello (or @abbot whatever-you-named-the-skill ). You can test the skill by typing \"world\" in the interactive shell. Abbot should respond in the interactive shell by saying \"world\"). Congratulations, you've written your first skill! Of course, this might not be as exciting as you were hoping for, so let's add a few features to make it a little more useful. Working with User-Provided Data Most skills will need to collect some information from the user in chat. The text that the chat user entered is available in the arguments property: In C# the Arguments property is a special collection of words. See Parsing Arguments with C# for more details. In JavaScript, bot.tokenizedArguments contains the arguments as a collection of words, while bot.arguments is a string containing all the arguments the user typed (it does not include the skill name). In Python, bot.tokenized_arguments contais the arguments as a collection of words, while bot.arguments is a string containing all the arguments the user typed (it does not include the skill name). The default code when creating a new skill demonstrates accessing user provided data. A more involved example (writing skills is hard, let's go shopping!) A skill that repeats what you said doesn't seem very useful. Let's try something a little more valuable -- a shared shopping list. Instead of forcing you to set up your own database, Abbot provides an easy-to-use persistence layer called the Brain. There's a full reference of the brain in Abbot's reference documentation , but let's try out some ideas here. If you've left the edit screen, return to your hello skill. Rename the skill to shoppinglist and hit Save to follow along with the guide. Tip When editing a skill, you can save at any time using the keyboard. CMD+S on a mac. CTRL+S on Windows. We'll support this chat interface for our users: @Abbot shoppinglist add item // to add items to the shopping list. @Abbot shoppinglist remove item // to remove items from the shopping list. @Abbot shoppinglist show // to show the items that are on the shopping list. Let's build the interface first. We need to stub out handlers for each of our use cases. We can do that by retrieving the value from the arguments. Stub out three functions (one for each task type) like this: C# JavaScript Python Task Add(string item) { return Bot.ReplyAsync(\"Adding \" + item); } Task Remove(string item) { return Bot.ReplyAsync(\"Removing \" + item); } Task Show() { return Bot.ReplyAsync(\"Show the shopping list\"); } function add(item) { bot.reply(\"Adding \" + item); } function remove(item) { bot.reply(\"Removing \" + item); } function show() { bot.reply(\"Show the shopping list.\"); } def add(item): bot.reply(\"Adding \" + item) def remove(item): bot.reply(\"Removing \" + item) def show(): bot.reply(\"Show the shopping list\") Now we can parse the user's command to see which function to call. To do that, we can deconstruct the arguments into two values, the first word as the \"command\" and the rest of the string as the \"argument\". Put this in at the top of your skill before the methods you stubbed out: C# JavaScript Python var (command, argument) = Bot.Arguments; switch (command.Value) { case \"add\": await Add(argument.Value); break; case \"remove\": await Remove(argument.Value); break; case \"show\": await Show(); break; default: await Bot.ReplyAsync(\"I don't know what to do!\"); break; } When deconstructing the arguments in this way, the first value contains the first word sent by the user. The second value contains the rest of the words sent by the user. If the user only sent one word, the second argument would have a type IMissingArgument and a Value of empty string. The switch statement tells the skill runner which method to run, along with the arguments provided by the user, if applicable. Finally, the skill will reply to the user \"I don't know what to do!\" if no arguments were provided. You can provide a more useful error message on your own, or change the default behavior to something more interesting. const words = bot.arguments.split(\" \"); const command = words.shift(); const userArguments = words.join(\" \"); switch (command) { case \"add\": add(userArguments); break; case \"remove\": remove(userArguments); break; case \"list\": show(); break; default: bot.reply(\"I don't know what to do!\"); } You can see that words contains an array of all of the words sent by the user, and userArguments contains the rest of the line. The case statements tell the skill runner which method to run, along with the arguments provided by the user, if applicable. Finally, the skill will reply to the user \"I don't know what to do!\" if no arguments were provided. You can provide a more useful error message on your own, or change the default behavior to something more interesting. words = args.split(\" \") user_arguments = \" \".join(words[1::]) if words[0] == \"add\": add(user_arguments) elif words[0] == \"remove\": remove(user_arguments) elif words[0] == \"show\": show() else: bot.reply(\"I don't know what to do!\") You can see that words contains an array of all of the words sent by the user, and user_arguments contains the rest of the line. The if statements tell the skill runner which method to run, along with the arguments provided by the user, if applicable. Finally, the skill will reply to the user \"I don't know what to do!\" if no arguments were provided. You can provide a more useful error message on your own, or change the default behavior to something more interesting. We've written enough code that it may make sense to start testing if everything is wired up. In each of Add , Remove , and Show methods, add a line to reply with a message in each method that indicates we're in that method. Once that's done we can test our skill's API before persisting data. To test that, try some commands in the command window like: @Abbot shoppinglist add spaghetti @Abbot shoppinglist add sauce @Abbot shoppinglist show @Abbot shoppinglist remove sauce Assuming everything has been entered correctly, Abbot should return some of the debug statements we entered earlier back into the command window. If there are any errors, the editor screen should be able to highlight them for you. In the rare case that the skill isn't working, and the editor isn't showing any errors, take a look at the JavaScript console. Please let us know if there are any errors here by emailing help@ab.bot. We will take a look as soon as we can! Data Persistence Find the method to add an item and change it like so: C# JavaScript Python public async Task<string> Add(string item) { await Bot.Brain.WriteAsync(item, item); return $\"Added {item} to the shopping list.\"; } async function add(item) { await bot.brain.write(item, item); return `Added ${item} to the shopping list.`; } def add(item): bot.brain.write(item, item) return \"Added {} to the shopping list.\".format(item) The first argument of write (or WriteAsync in C#) expects a key, and the second expects a value. Keys must be unique in Abbot (duplicates overwrite the previous value), so we will store the items in our list as keys. Later we can use the value for metadata, like whether or not the item was purchased, or who added the item. For now, let's just use keys. One more thing -- write (or WriteAsync ) acts as an upsert operation. If there is a pre-existing item with a matching key, the method will overwrite that item. Once the item has been added to Abbot's brain, we return a message so that we can report it back to the user later. Next, change the method to remove an item, to look like this: C# JavaScript Python public async Task<string> Remove(string item) { await Bot.Brain.DeleteAsync(item); return $\"Removed {item} from the shopping list.\"; } async function remove(item) { await bot.brain.delete(item); return `Removed ${item} from the shopping list.`; } def remove(item): bot.brain.delete(item) return \"Removed {} from the shopping list.\".format(item) This will allow us to remove items from our list. delete (or DeleteAsync in C#) always expects a key in order to identify what data to remove. It will not raise an exception if the data is not found. Finally, we need a way to list the shopping list. Change the method to show items to match this: C# JavaScript Python public async Task<string> Show() { var response = \"Here's what's on the list:\"; var items = await Bot.Brain.GetKeysAsync(); foreach(var item in items) { response += $\"\\n* {item}\"; } return response; } async function show() { const list = await bot.brain.list(); var response = \"Here's what's on the list: \\n\"; list.forEach(function(item) { response += `* ${item.key} \\n`; }) return response; } def show(): response = \"Here's what's on the list:\" items = bot.brain.list() all_items = [\"* {}\".format(item) for item in items] response += \"\\n\".join(all_items) return response This method will call list (or GetKeysAsync ) to fetch all of the keys in Abbot's brain for this skill, iterate through them, and return the result back to the caller. We format the response here, but could just as easily return a List back to the caller. Now we can parse the user's command and call the correct method to modify the shopping list: C# JavaScript Python var (command, argument) = Bot.Arguments; var output = string.Empty; switch (command.Value) { case \"add\": output = await Add(argument.Value); break; case \"remove\": output = await Remove(argument.Value); break; case \"show\": output = await Show(); break; default: output = \"I don't know what to do!\"; break; } const words = bot.arguments.split(\" \"); const command = words.shift(); const userArguments = words.join(\" \"); var output = \"\"; switch (command) { case \"add\": output = await add(userArguments); break; case \"remove\": output = await remove(userArguments); break; case \"list\": output = await show(); break; default: output = \"I don't know what to do!\"; } words = args.split(\" \") user_arguments = \" \".join(words[1::]) output = \"\" if words[0] == \"add\": output = add(user_arguments) elif words[0] == \"remove\": output = remove(user_arguments) elif words[0] == \"show\": output = show() else: output = \"I don't know what to do!\" As you can see, we create a variable called output and store the output of our method there. Finally, we need to report back to the user -- every skill should return something to your user so that they know it succeeded (or failed, as they sometimes do). To do that, we can simply call the reply method: bot.reply(output) in JavaScript and Python or await Bot.ReplyAsync(output) in C#. And we're done! Try interacting with your skill from Abbot's console. You should be able to add and remove items, as well as view the shopping list. If you save this skill, you can interact with it in chat as well. Wrapping up Here's the entire skill, if you'd like to view the whole thing: C# JavaScript Python // A simple shopping list skill. var (command, argument) = Bot.Arguments; var output = string.Empty; switch (command.Value) { case \"add\": output = await Add(argument.Value); break; case \"remove\": output = await Remove(argument.Value); break; case \"show\": output = await Show(); break; default: output = \"I don't know what to do!\"; break; } await Bot.ReplyAsync(output); public async Task<string> Add(string item) { await Bot.Brain.WriteAsync(item, item); return $\"Added {item} to the shopping list.\"; } public async Task<string> Remove(string item) { await Bot.Brain.DeleteAsync(item); return $\"Removed {item} from the shopping list.\"; } public async Task<string> Show() { var response = \"Here's what's on the list:\"; var items = await Bot.Brain.GetKeysAsync(); foreach(var item in items) { response += $\"\\n* {item}\"; } return response; } // A simple shoppping list skill. const words = bot.arguments.split(\" \"); const command = words.shift(); const userArguments = words.join(\" \"); var output = \"\"; switch (command) { case \"add\": output = await add(userArguments); break; case \"remove\": output = await remove(userArguments); break; case \"list\": output = await show(); break; default: output = \"I don't know what to do!\"; } bot.reply(output); async function add(item) { await bot.brain.write(item, item); return `Added ${item} to the shopping list.`; } async function remove(item) { await bot.brain.delete(item); return `Removed ${item} from the shopping list.`; } async function show() { const list = await bot.brain.list(); var response = \"Here's what's on the list: \\n\"; list.forEach(function(item) { response += `* ${item.key} \\n`; }) return response; } # A simple shopping list skill. words = args.split(\" \") user_arguments = \" \".join(words[1::]) output = \"\" if words[0] == \"add\": output = add(user_arguments) elif words[0] == \"remove\": output = remove(user_arguments) elif words[0] == \"show\": output = show() else: output = \"I don't know what to do!\" bot.reply(output) def add(item): bot.brain.write(item, item) return \"Added {} to the shopping list.\".format(item) def remove(item): bot.brain.delete(item) return \"Removed {} from the shopping list.\".format(item) def show(): response = \"Here's what's on the list: \\n\" items = bot.brain.list() all_items = [\"* {}\".format(item) for item in items] response += \"\\n\".join(all_items) return response Next Steps For a challenge, you could modify this skill to check if data already exists before removing it, or add a quantity field in Value . There are many things you could try! We didn't get an opportunity to work with Secret values in this guide, but if we needed to interact with an external API, they would have been useful here. For now, we'll leave those as a topic for another guide."
  },
  "chatops/index.html": {
    "href": "chatops/index.html",
    "title": "What are ChatOps? | Abbot Docs",
    "keywords": "What are ChatOps? We say that Abbot is a \"shared command line for your team\", and talk a lot about the \"power of ChatOps\", but what are they? Why do they matter? ChatOps is a way to describe working together to do things by running commands in chat. Teams use ChatOps to do things like merge Pull Requests, get graphs from network appliances, and cheer each other on for doing cool stuff. This is really useful because new people can see how to use all the internal tools by example. When a new person joins a team using Abbot, they can see how that team interacts with the multitude of systems in place. If there's an incident, Abbot can be in #ops along with the rest of the ops team, updating statuses ( @abbot status yellow We are experiencing some delays in the widgetizer ), sending Tweets ( @abbot tweet The widgetizer is back online, sorry for the noise! ), or getting statuses from other services ( @abbot ping widgetizer.ourwebsite.com ). By making common tasks accessible from chat, everyone can see who has run commands, how to run them, and run their own commands. For example, if there's an outage people can see exactly what's happening by watching their teammates interacting with Abbot to solve the problem. Abbot makes it easy to implement your own ChatOps by providing a platform where you can script your own integrations. This allows you and your team to move away from running scripts on your own command line (everyone has them!) and into a shared location where everyone can leverage the tools everyone else has built. Getting started with Abbot So you've just installed Abbot (congratulations!) and want to write a skill. Abbot tries to make building skills as painless as possible, and offers some convenience methods to you so that you don't have to deal with them. You can write skills in C#, Python, or JavaScript. We are adding new features and language support all the time! To get started... Try the Hello World Guide Unsure which language to start with? Abbot allows you to use all of these languages in a single bot, so you can experiment with each language and see what works best for you. If you really aren't sure, Abbot is built in C#, and it's what we use to build most of our skills. We like using C# for skills because static typing makes it easy to reason about our code, and the editing experience on https://ab.bot is pretty good! Please note that once you save a skill in Abbot's web editor, that skill is live in your chat. You can test locally before saving, if you'd like. For a more concise, reference-based view; please refer to Abbot's reference documentation . More Guides Argument parsing in C# Creating and using List Skills Scheduled Skills and reacting to events with Triggers Writing Javascript skills, the async way Frequently Asked Questions What languages are supported? You can write skills using C# 9, Python 3.7, or JavaScript in Node 10. Later we will support WASM assemblies in a paid version of Abbot. What is the right way to save data from my script? Abbot provides a convenient way to save data from your skills. Please take a look at Abbot's reference documentation for details on how to use Abbot's brain. How do skills deal with sensitive data? There is a Secret management system built in to Abbot. This allows your script to work with sensitive data without including in your script. Please note that developers can still get access to the data since we provide a scripting environment; so you should never store passwords in Secrets (and you should be careful about who you grant access to Abbot). The easiest way to see how to access Secrets in an Abbot skill is via Abbot's reference documentation . What Libraries are available in my skills? We provide a set of pre-installed libraries for you to use in your skills. Custom dependencies will be available later in a paid version of Abbot. If you need a dependency for your skill that isn't listed here, please reach out to us at help@ab.bot with some information about the dependency you'd like for us to add. Preloaded C# libraries All libraries available in .NET 7.0 Dapper 2.0.x HtmlAgilityPack 1.11.x Newtonsoft.Json 13.0.x Microsoft.Recognizers.Text 1.8.x MysqlConnector 1.3.x NodaTime 3.x Npgsql 6.0.x Octokit.net Refit 6.x Available JavaScript libraries lodash 4.17.19 axios 0.21.1 request-promise 4.2.6 node-fetch 2.6.1 passport 0.4.1 passport-auth 1.0.0 knex 0.95.6 mysql 2.18.1 pg 8.6.0 Available Python libraries arrow 1.1.0 BeautifulSoup 4.9.3 boto3 1.17.64 jsonpickle 2.0.0 numpy 1.19.4 octokit.py 0.15.0 mysql-connector-python 8.0.25 pandas 1.0.5 psycopg2 2.9.1 requests 2.25.1 requests-oauth 1.3.0 soupsieve 2.0.1 SQLAlchemy 1.4.19"
  },
  "chatops/known-issues/index.html": {
    "href": "chatops/known-issues/index.html",
    "title": "Known Issues | Abbot Docs",
    "keywords": "Known Issues We hope you're having a great time with Abbot. Sometimes you might run into an issue that seems strange, and you aren't sure if something's broken, or working as intended. This is a short list of issues that we're aware of but haven't scheduled to fix immediately. Please let us know if any of these issues impacts you negatively by using the @abbot feedback skill from chat or the bot console. Core Abbot No known issues Skill Editor Delayed replies in skills will return immediately when testing in the Skill Editor on https://ab.bot . This is by design, as we don't maintain an active connection with the editor console on the website. Developers can still use the language-appropriate version of \"reply later\" in the skill editor and expect it to work correctly in chat as long as the delay is set. This impacts Abbot's Bot Console as well. Skill Triggers Skill Triggers may only be attached in channels with more than one participant. When attempting to attach a trigger in a channel with only one participant, the message may be confusing. C# Runtime C# 8 switch expressions with an undeclared type (using var ) will cause the script compiler to crash, which in turn prevents a skill from completing correctly. We have reported the issue upstream to Microsoft . The workaround is to specify a type for the expression. For example, this will crash: var (first, second) = Bot.Arguments; var reply = (first, second) switch { (IMissingArgument, _) => \"Both arguments are missing\", (IMentionArgument, IMissingArgument) => \"You mentioned somebody\", (IMentionArgument, IArgument) => \"You mentioned someone and said more\", _ => \"Dunno what you did\" }; await Bot.ReplyAsync(reply); But this will work: var (first, second) = Bot.Arguments; string reply = (first, second) switch { (IMissingArgument, _) => \"Both arguments are missing\", (IMentionArgument, IMissingArgument) => \"You mentioned somebody\", (IMentionArgument, IArgument) => \"You mentioned someone and said more\", _ => \"Dunno what you did\" }; await Bot.ReplyAsync(reply); Notice that reply is typed as string instead of relying on type inference in the second case. Python Runtime No known issues JavaScript Runtime No known issues"
  },
  "chatops/list-skills/index.html": {
    "href": "chatops/list-skills/index.html",
    "title": "List Skills | Abbot Docs",
    "keywords": "List Skills List skills are a special kind of skill that are built into Abbot. They are useful if you want to build a skill that returns a random item out of a list every time it is called. Using Abbot, we could easily create a skill to accomplish that task like this: const _ = require('lodash'); let responses = [\"Yes\", \"No\", \"Maybe\", \"I'm not sure, ask again later\"] bot.reply(_.sample(responses)) This works well as long as we don't need to change the list of potential answers. As soon as someone wants to add a new item to the list, it becomes much more complicated. If they have access to Abbot and are comfortable editing code, they could log in to https://ab.bot and change the skill. What if they wanted to add options from chat? The skill would have to be updated to add argument parsing and persistence: const _ = require('lodash'); if (bot.arguments.startsWith('add') { // Add a new response } else if (bot.arguments.startsWith('remove') { // Remove a response } else { // Return a random response let responses = await bot.brain.list(); bot.reply(_.sample(responses)) } This can get complicated quickly! Instead, Abbot makes it very easy to create skills like this on your own, from inside of chat. To create a new list skill in chat, say @abbot list add <the name of your list skill> . In this case, try @abbot list add 8ball (don't worry, list skills don't count as custom skills -- make as many of these as you'd like!). Once Abbot creates the list skill, you can add options with @abbot 8ball add ... , like this: @abbot 8ball add Yes @abbot 8ball add No @abbot 8ball add Maybe @abbot 8ball add Unclear, ask again later To use the skill, simply say @abbot 8ball in any channel where Abbot has been invited, and Abbot will respond with a random selection from the list. You can remove items from Abbot's brain with @abbot 8ball remove and providing the full text of the item to remove. You can always get more help from Abbot in chat by asking for it with @abbot help list . Note that you can store both text and image links in Abbot lists. Image links will be treated as they are any time they're pasted into chat (which usually means the image will be displayed). So, get your favorite collections of gifs together and have fun making some list skills for you and your team!"
  },
  "chatops/managing-secrets/index.html": {
    "href": "chatops/managing-secrets/index.html",
    "title": "Managing Secrets | Abbot Docs",
    "keywords": "Managing Secrets Many skills access external APIs or otherwise need to authenticate to external services. Or, you may be interested in publishing your skill and want to make it easy for end-users to provide their own credentials without modifying the package's code. We provide a simple service for you to store and access secrets in your skills. To create a secret for your skill, click the link that says \"Manage skill secrets\" on the left side of the screen. This will take you to the secrets management page. Here, you can add a secret by clicking on the \"Create Secret\" button. Creating a secret Secrets are referred to by their name in your code. Choose a name that will make sense when reading it in your skill code. A secret named \"secret\" may be confusing, but a secret named \"api-token\" might make sense if the skill only calls a single API. You should include a description for each secret to make it easier to reason about the secrets that any skill uses. The \"Value\" field is what's returned by your secret when calling it from a skill. It is not possible to see the value from the website, so it's usually best to paste the secret value in from another location, especially in the case of API keys. Once you click save, Abbot will store the secret in Azure Key Vault and it will be available in your skill immediately. The secret list page will show you the language-specific code that's required to access your secret from the vault. A note about securing secrets While it's not possible to view a secret from the website, it is possible for a user to emit the value from a secret in the console replying with the secret's value. If this is a concern for you, consider restricting the skill so that only trusted users can make edits to the skill's code. This will allow users to run the skill (if they've been given permissions to run it), without editing the skill. Proxy Links There are times when you may want to include an API key in your skill or package. Proxy Links make it possible to share skills with embedded sensitive data without leaking sensitive data, like tokens. A Proxy Link is a reverse proxy to a link you specify. Proxy Links can include embedded query strings. For example, let's say we are going to distribute a skill that includes an API token. We don't want anyone using our API key for anything but this skill, so we create a Proxy Link by clicking \"Manage proxy links\" on the left side of the \"Edit Skill\" screen. We click the \"Create a link\" button to get to the screen where we can add a Proxy Link. The URL for the external API (including our API key) looks like this: https://api.aserious.biz/?key=AN1C3K3YW0Ws0Co0l We give the link a description like \"A Serious API Key\" and click \"Create Link\". We'll be returned to the list of Proxy Links, where we will see the link that was just created for us. It will look like this: https://link.ab.bot/api/AB3kF . That link is a reverse proxy to our API link. We can add more query string items the same way we would with any other link, and the Proxy Link service will construct the link correctly as it proxies. So if we wanted to pass a key called \"things\" with a value called \"foo\" we would use https://link.ab.bot/api/AB3kF?things=foo . You can use this link the same way you would any other link in your skill. Proxy Links can be distributed to anyone along with your skill. This makes it very easy to include custom API links in your packages. Proxy Links can be created in one skill and used in another. If you have a lot of internal API keys you don't want shared you could create a restricted skill to hold nothing but Proxy Links, then limit access to the skill using restricted skills."
  },
  "chatops/privacy-and-security/index.html": {
    "href": "chatops/privacy-and-security/index.html",
    "title": "Privacy and Security | Abbot Docs",
    "keywords": "Privacy and Security What can Abbot see? We request the minimum set of permissions required to allow Abbot to work in your chat room. Abbot can only respond to messages where it is directly mentioned, or to direct messages in platforms that support direct messaging. With the exception of some special built-in skills, Abbot skills always require Abbot to be mentioned first, followed by the skill name, followed by any arguments passed to the skill. Abbot is not able to proactively message any user. Abbot can only respond in rooms where it's been invited, and only after it's been triggered at least once. Users can trigger Abbot by calling a skill, or attaching a trigger of any kind. Any message that Abbot responds to is logged, and available in the Activity Log. We try to only show pertinent information in the logs, but be aware that messages sent via Direct Message to Abbot can be viewed in the Activity Log. What can A Serious Business see? Staff have the ability to review Activity Log entries. This is both to help us identify issues and help users troubleshoot problems. We are able to view skill code if requested by our users, but any time we view sensitive data (like code), it's logged and will show up in your audit log (it will say something like (STAFF) Paul viewed code for foo-bar ). We are happy to show you what this looks like if you are curious. Email us at help@ab.bot and we can help you out. Who can access Abbot To run commands, any authenticated chat user in your organization can interact with Abbot. Even without Abbot, if someone gains access to a chat account in your organization, they can do immense damage. So it's very important for to enforce good account security policies such as requiring 2-factor auth, etc. If you use Abbot, that's even more important. To access https://ab.bot/ and write skills, it depends on an organization Admin setting. Your Abbot Administrator can restrict users to those they approve, or they can let anyone in your chat organization access the site. How can I restrict access to Abbot skills? When editing a skill, you can set it to be restricted to a limited set of users in the UI. Then in chat you can give users access to the skill with the can skill. For example, @abbot @haacked can use cool-skill gives @haacked access to run the skill named cool-skill . How secrets are stored Skill secrets are kept in Azure Key Vault. It is not possible to view the values of a secret from the website. Secret values may only be updated or deleted. Be aware that users with edit access to your skills may read a secret in the skill code to cause Abbot to return a secret (in the console, or otherwise). If you have skills where this may be an issue, we suggest using Access Controls to lock the skill down to only trusted users. Another alternative is to use ProxyLinks to encode sensitive endpoint data. A ProxyLink can be created in one skill and reused in another, so it's possible to have a skill that only admins can view which contains ProxyLinks for other skils to consume. Our commitment to privacy We believe that users have the right to private and secure computing. We continue to refine our approach to ensure that we can give our users the most flexibility possible while also maintaining an environment free of abuse. We are always happy to answer questions about how we handle your data -- send us an email at help@ab.bot if you have any questions. I've found a problem and want to report it! Please email us at help@ab.bot if you have found an issue that you'd like to report."
  },
  "chatops/reference/index.html": {
    "href": "chatops/reference/index.html",
    "title": "Abbot Reference Documentation | Abbot Docs",
    "keywords": "Abbot Reference Documentation The Bot Object Bot.Id C# bot.id Python, JavaScript The identifier for the Bot. This can be used to test if a user has mentioned the bot (by comparing Mention.Id and Bot.Id for equality). Bot.Arguments C# bot.arguments Python, JavaScript args Python The text that the user entered when calling the skill. This does not include the name of the skill. In C#, this will be a special collection of parsed arguments. Access the Value property to get the full text as a string. Bot.IsChat C# bot.is_chat Python bot.isChat JavaScript Set to true if the message came from chat or the Bot Console. False if it came from a trigger. Bot.IsRequest C# bot.is_request Python bot.isRequest JavaScript True if the message comes from either a Scheduled Trigger or an HTTP Trigger. Otherwise, set to false. Bot.Brain C# bot.brain Python, JavaScript The interface to Abbot's storage system. See Managing Data section for more. Bot.Code C# bot.code Python, JavaScript The code of the skill. This is used for running the skill and should be considered an Internal variable. Be careful with this! Bot.From C# bot.from_user Python bot.from JavaScript The Id and Name of the user making the request. Only populated when Bot.IsChat is true. Bot.Mentions C# bot.mentions Python, JavaScript An array of Mention objects extracted from the entered text. Bot.Request C# bot.request Python, JavaScript Information about the request sent to the bot, when the bot is activated by either a Scheduled or HTTP Trigger. This may be null. Bot.Request.HttpMethod : The HTTP method sent to the Trigger. This should currently always be POST . Bot.Request.RawBody : The raw body of the request, if it exists. Bot.Request.ContentType : The content type of the request. Bot.Request.IsJson : True if the content type is json. Otherwise false. Bot.Request.IsForm : True if this is a form submission. Otherwise false. Bot.Request.Headers : A JSON collection of the request headers. Bot.Request.Form : The form data. Only populated if IsForm is true. Bot.Request.Query : The querystring sent with the request, if one was present. Bot.Secrets C# bot.secrets Python, JavaScript The interface to any skill secrets that might be set. See Managing Secrets for more. Bot.ReplyAsync(response) C# bot.reply(response) Python, JavaScript The method skills must use to send responses back to the chat. This may be called multiple times. Bot.ReplyLaterAsync(response, delay_in_seconds) C# bot.reply_later(response, delay_in_seconds) Python bot.replyLater(response, delay_in_seconds) JavaScript Send a response back to the chat after delay_in_seconds has elapsed. This may be called multiple times, and is the preferred method for delaying responses. Managing Data C# Abbot includes a simple persistence layer that makes it easy for your skills to store and retrieve data. You can access Abbot's brain with Bot.Brain . The methods that are included in Bot.Brain are: WriteAsync(Key, Value) : Save Value with a key of Key . GetAsync(Key) : Get the value stored with key Key . GetKeysAsync(Key?) : Get all keys that match Key . Key can be empty and will return all keys. note: This is not currently implemented in Python or JavaScript. GetAllAsync(Key?) : Get all records where keys match Key . This supports fuzzy matching, so partial matches will be returned. Key can be empty and will return all keys and values. note: This is not currently implemented in Python or JavaScript. DeleteAsync(Key) : Delete the value stored with key Key . Managing Secrets C# Secrets are a special kind of data, and can be used to store things like authentication tokens or other configuration items that you prefer to exclude from your skill. Secrets can only be set from https://ab.bot , and are specific to a single skill. Since developers can read data from your secrets, be careful about the data that you store there -- passwords should never be stored in a Secret, for example. Secrets can be read using a similar interface to Abbot's brain: GetAsync(Key) : Get the Secret with the key of Key The Mentions Collection C# Bot.Mentions contains a list of all mentions that were found in the user's text. The ToString() method on each mention will return an appropriately formatted username mention to the chat system (for example, <@U92394113> in Slack). Skill developers can also use any of the other fields available in the Mention object in their skills. The Mention Object C# The Mention object has these fields: Id : The id of the person or bot that was mentioned. This id is unique to the chat platform that was being used, and is not an Abbot user id. UserName : The user name of the person or bot that was mentioned. This name is determined by the chat platform, and is not an Abbot user name. Name : The display name of the person or bot that was mentioned. This is set by the user in the chat platform and may change over time. If you are writing skills that rely on the Mention object, the Id is the only reliable field to use in keys and for comparison. Managing Data Python, JavaScript Abbot includes a simple persistence layer that makes it easy for your skills to store and retrieve data. You can access Abbot's brain with bot.brain . The methods that are included in bot.brain are: write(key, value) : Save value with a key of key . get(key) : Get the value stored with key key . list() : Get all records. delete(key) : Delete the value stored with key key . Managing Secrets Python, JavaScript Secrets are a special kind of data, and can be used to store things like authentication tokens or other configuration items that you prefer to exclude from your skill. Secrets can only be set from https://ab.bot , and are specific to a single skill. Since developers can read data from your secrets, be careful about the data that you store there -- passwords should never be stored in a Secret, for example. Secrets can be read using a similar interface to Abbot's brain (but with bot.secrets ): get(key) : Get the Secret with the key of key The Mentions Collection Python, JavaScript bot.mentions contains a list of all mentions that were found in the user's text. The toString() or str method on each mention will return an appropriately formatted username mention to the chat system (for example, <@U92394113> in Slack). Skill developers can also use any of the other fields available in the Mention object in their skills. The Mention Object Python, JavaScript The Mention object has these fields: id : The id of the person or bot that was mentioned. This id is unique to the chat platform that was being used, and is not an Abbot user id. user_name Python , userName JavaScript : The user name of the person or bot that was mentioned. This name is determined by the chat platform, and is not an Abbot user name. name : The display name of the person or bot that was mentioned. This is set by the user in the chat platform and may change over time. If you are writing skills that rely on the Mention object, the id is the only reliable field to use in keys and for comparison."
  },
  "chatops/triggers/index.html": {
    "href": "chatops/triggers/index.html",
    "title": "Responding to external events with Triggers | Abbot Docs",
    "keywords": "Responding to external events with Triggers Abbot can respond to much more than just events raised from chat. Triggers give Abbot superpowers -- Http Triggers allow Abbot to respond to events from the outside world; and Scheduled Triggers let Abbot execute Skills on a schedule you define. Triggers are part of what make Abbot such a powerful tool for you and your team -- your automation is no longer limited to what happens inside of chat when you use Abbot Triggers. Triggers are attached to channels inside of chat. Skills must already be created in order to attach a Trigger to a channel, but don't worry; you can always update your code after a Trigger has been attached. Http Triggers Http Triggers allow Abbot to react to events from the outside world. When an Http Trigger is attached to an Abbot Skill, a URL unique to that Skill and channel is generated. The URL that is created by the attach Skill contains all the information that Abbot needs to know in order to deliver data to your Skill. To attach an Http Trigger to your skill, first navigate to the specific channel in chat where you want the Trigger output to be sent. Attach the Skill to the channel by saying @abbot attach <skillname> where skillname is the name of the skill you'd like to attach. For example, if you had a skill called gong that you wanted to trigger every time your sales-tracking system recorded a sale, you'd type @abbot attach gong . Once you've told Abbot that you want to attach a Trigger to the channel, it will respond with a link sending you to the Trigger management page. Clicking the link will take you to the Trigger management page. The Trigger Management page The Trigger Management page is where you can see all the triggers attached to your Skill (both Http and Scheduled Triggers), as well as the channels those Triggers are attached to. There isn't much to configure for Http Triggers -- you can update the description to help your teammates understand what the Trigger will be used for. Beyond that, you can see who added the Trigger, when they added it, and most importantly, the secret URL for the Trigger. Clicking the URL will copy it to your clipboard. Abbot is configured to only accept POST events for Triggers, although that may change in the future. You can post any data you'd like to that endpoint, and your Skill will run. What sort of things can you do with an Http Trigger? Well, anything! But we've found the best use cases involve reacting to events and data from the outside world. Http Triggers can recieve webhooks from other systems, and your skill code can access the data that's posted to the endpoint. Using Abbot's reply mechanism from your skill will send text into the channel where the trigger is attached. In the case of our gong Skill, we could parse the JSON that's posted to the Trigger to get some data about a deal that closed and post it into the channel, or notify a user that their deal is finally done. It's up to you! You can use the full power of an Abbot skill to do anything you'd like (including passing more information on to a third service). Scheduled Triggers Scheduled Triggers let you set a schedule for Abbot to run Skills on your behalf. Skills run in this way can do everything that ordinary skills can do. In order to set up a Scheduled Trigger, use the schedule command. Let's repurpose the gong skill from above to tell us the time every ten minutes (changing the code for the skill will be an exercise left for you). In order to schedule the skill, first join the channel where the output should be sent. Once there, say @abbot schedule gong . Abbot will reply with a link to the Trigger management page like before (in fact, it's the same page as before -- all your triggers are managed here). The details for the Scheduled Trigger do require more information than when using Http Triggers. Namely, what schedule the Trigger should use to run. The management page will say something like \"The channel #your-amazing-channel receives replies when gong is triggered on the schedule: Never\". If you click on the \"Edit\" button, a modal will pop up; allowing you to choose the schedule in which to run your skill. Please note: all schedules use UTC. Time zones are hard, and we are still working on a nice interface for dealing with them. For now, you'll need to do a little mental math if you want something to happen at a specific time locally. In the Cron Schedule area, you can choose the frequency in which your skills will run. We've prefilled the most common options we think you'll want, along with some configuration; but you can provide your own cron schedule if you would like. We don't allow any skills to execute more than once per 10 minutes right now, although that may change in the future. The Arguments section is where you can put any additional information to be sent to your skill. If people used the gong skill by saying @abbot gong some words and things you could add some words and things to the Arguments section and get the same result. This is optional, but useful if your skill expects some configuration flags. Finally, you can add a description to your Trigger in order to keep track of what the Trigger is meant to accomplish. Since Scheduled Triggers are attached to regular Abbot Skills, you can use them to schedule any kind of skill you can imagine, from checking the latest lottery numbers to generating a daily update report to share with your team. Your imagination is the only limit! We use Triggers heavily as part of developing and running Abbot; more and more of our own infrastructure is built on top of Abbot because of how easy it is for us to develop, deploy, and maintain our functionality. We hope that you'll enjoy using Triggers as well. Please let us know if you have any questions, complaints, or feature suggestions for Triggers by using the @abbot feedback skill in chat or in the Bot Console. Good luck and happy shipping!"
  },
  "chatops/writing-skills/index.html": {
    "href": "chatops/writing-skills/index.html",
    "title": "Writing Skills | Abbot Docs",
    "keywords": "Writing Skills Need something beyond the built-in functionality? You can write your own skills in a variety of languages, and Abbot will host and execute the code for you! Supported Languages C# ( Api Reference ) JavaScript ( Api Reference ) Python ( Api Reference )"
  },
  "chatops/writing-skills/js-async/index.html": {
    "href": "chatops/writing-skills/js-async/index.html",
    "title": "Writing Javascript skills, the async way | Abbot Docs",
    "keywords": "Writing Javascript skills, the async way One particularity of our current Javascript implementation is that your skill code runs in an async wrapper, something like: (async () => { [YOUR CODE] })(); Because of this, we strive to provide you with promisified versions of useful libraries that fit well in this execution model, like Axios and Request-Promise. Axios is a Promise-based HTTP client, and if you prefer the old Request library, Request-Promise is its Promise-based version. Here are some usage examples for both, showing how you can query the GitHub API using a pre-generated Personal Access Token saved as a secret in the Bot Brain : Axios const axios = require('axios'); const key = await bot.secrets.read(\"ghtoken\"); const options = { headers: { 'User-Agent': 'Request-Promise', 'Authorization': `token ${key}` } }; await axios.get('https://api.github.com/user/repos', options) .then(response => { bot.reply(`User has ${response.data.length} repos`); }) .catch(error => { // API call failed... bot.reply(error); }); Or with async/await : const axios = require('axios'); const key = await bot.secrets.read(\"ghtoken\"); const options = { headers: { 'User-Agent': 'Request-Promise', 'Authorization': `token ${key}` } }; try { const response = await axios.get('https://api.github.com/user/repos', options) await bot.reply(response.data.length); } catch (error) { await bot.reply(`Ooops, something went wrong ${error}`); } Request-Promise const rp = require('request-promise'); const key = await bot.secrets.read(\"ghtoken\"); const options = { headers: { 'User-Agent': 'Request-Promise', 'Authorization': `token ${key}` }, json: true // Automatically parses the JSON string in the response }; await rp('https://api.github.com/user/repos', options) .then(repos => { bot.reply(`User has ${repos.length} repos`); }) .catch(error => { // API call failed... bot.reply(error); }); Exception propagation Note that your code is running inside a sandbox inside a container in an out-of-process language runner. Uncaught exceptions that get thrown from callbacks won't always be bubbled up to the bot console. If you get exceptions without line information, or if the bot console doesn't return any output, it's likely that an exception is getting thrown from inside a then or catch block. Make sure you have try/catch blocks on all your callback code to handle exceptions: Abbot API Our API is also async/await, so when you want to have Abbot reply to the chat, you can await bot.reply('hello world') when not inside then handlers."
  },
  "chatops/writing-skills/parsing-arguments-c-sharp/index.html": {
    "href": "chatops/writing-skills/parsing-arguments-c-sharp/index.html",
    "title": "Parsing Arguments with C# | Abbot Docs",
    "keywords": "Parsing Arguments with C# Most Bot skills have a pretty simple format for the arguments passed to the skill. But even a simple format can require a fairly complex regular expression to parse correctly. Let's follow an example to see what I mean. Suppose we have a skill for managing another user's favorite songs with the following usage pattern. @abbot fave {@mention} add {song} [description] This skill allows the user to add a favorite song for another user with an optional description. The following set of chat transcripts show how the skill might be used. @haack: @abbot fave @paul add Dynamite @abbot: I've added `Dynamite` to @paul's list of favorite songs. So far so good. Now it gets a bit trickier if we want to add a favorite song with a description. @haack: @abbot fave @paul add Chandelier Because Sia speaks to me @abbot: I've added `Chandelier` with the description `Because Sia speaks to me` to @paul's list of favorite songs Which part is the song and which part is the description? Since descriptions tend to be sentences, it might make sense to have the first word after the command be the title, and the rest be the description. Until you run into the following example: @haack: @abbot fave @paul add Baby Shark Makes me dance @abbot: I've added `Baby` with the description `Shark Makes me dance` to @paul's list of favorite songs In this case, \"Baby Shark\" is the song. So what we need to do is allow quoting an argument. @haack: @abbot fave @paul add \"Baby Shark\" Makes me dance @abbot: I've added `Baby Shark` with the description `Makes me dance` to @paul's list of favorite songs. Ah! That's better. To get this better behavior, we need to write a somewhat complicated regular expression. It wouldn't be terrible, but as we handle more and more conditions, it would get more and more complicated. Fortunately, Abbot handles this sort of argument parsing for you. If you write a C# skill, you have access to the arguments via the Arguments property. Arguments is a custom collection with some interesting properties to make argument handling easier. It contains a tokenized set of incoming arguments that already handles quoting and whitespace. So in the case of the argument @paul add \"Baby Shark\" Makes me dance (the skill name is always omitted from the arguments), Bot.Arguments would contain the collection: [0]: @paul [1]: add [2]: Baby Shark [3]: Makes [4]: me [5]: dance \"Now wait a minute,\" you say. \"Don't we want the description , the fourth argument, to have the rest of the words after the song.\" Right you are! But in the Arguments collection, the fourth element in the collection is \"Makes\" and not the full description. This is a problem. Not to worry, Abbot has a solution for this. Arguments implements tuple deconstruction in a special way. Suppose you know that you will have at most four arguments for a skill. You can deconstruct the arguments into a tuple like so. var (cmdArg, mentionArg, songArg, descriptionArg) = Bot.Arguments; If there are more than four arguments, the remaining arguments are captured in the last tuple parameter, in this case descriptionArg . If you're familiar with JavaScript, this is a lot like rest parameters . Even though the remaining arguments are captured in descriptionArg (which is what we want in this case), you can still cast descriptionArg to IArguments to access each token that made up the description, if you needed to for some reason. If there are less than four arguments, then the last argument will be of type IMissingArgument . So let's put this all together. var (cmdArg, mentionArg, songArg, descriptionArg) = Bot.Arguments; if (cmdArg.Value is \"add\") { if (!(mentionArg is IMentionArgument mention)) { await Bot.ReplyAsync(\"Please mention someone whose favorite song this is.\"); return; } if (songArg is IMissingArgument) { await Bot.ReplyAsync(\"Please mention someone whose favorite song this is.\"); return; } // Some magic here to save the favorite song... var response = descriptionArg is IMissingArgument ? $\"I've added `{songArg.Value}` to {mention.Mentioned}'s list of favorite songs.\" : $\"I've added `{songArg.Value}` with the description `{descriptionArg.Value}` to {mention.Mentioned}'s list of favorite songs.\"; await Bot.ReplyAsync(response); return; } The rest of the code is left as an exercise for the reader. A few things to note. At the moment, we only support deconstructing up to a four-tuple. We can easily add a five-tuple or six-tuple in the future. But in most cases, four is enough. And if it's not, you can still deconstruct that fourth argument by casting it to IArguments . If an argument is a mention, you can cast it to IMentionArgument to access information about the mentioned user. Mentions are also in the Mentions collection. Also, if the default argument parsing doesn't work for you, you can always access the full arguments with Bot.Arguments.Value . Python and JavaScript skills also receive the arguments as a collection in bot.tokenized_arguments and bot.tokenizedArguments respectively. They don't have the same deconstructors that the C# code does, but mainly because those languages already have similar list operations. For more about writing skills for Abbot, check out the Getting Started Guides ."
  },
  "chatops/writing-skills/sending-messages/index.html": {
    "href": "chatops/writing-skills/sending-messages/index.html",
    "title": "Sending messages | Abbot Docs",
    "keywords": "Sending messages One of the most important things your skill needs to do is to communicate with users. The easiest way to send a message is to call the Reply API C# JavaScript Python await Bot.ReplyAsync(\"Thanks!\"); await bot.reply(\"Thanks!\"); bot.reply(\"Thanks\") The reply API will, by default, send the reply back to the place in which Abbot was invoked: If Abbot was invoked by a top-level message in a room, Abbot will respond with another top-level message in that room. If Abbot was invoked by a message in a thread, Abbot will respond in that thread. If Abbot was invoked by a trigger, Abbot will respond with a top-level message in the channel attached to that trigger. Sending DMs to users You can customize the destination message using the to option. This option can take a User, Room, or Thread. For example, if the skill was triggered via a message, you can send a DM to the user who sent that message using code like this: C# JavaScript Python await Bot.ReplyAsync(\"Thanks!\", new MessageOptions() { To = Bot.From }); await bot.reply(\"Thanks!\", { to: bot.from }); bot.reply(\"Thanks\", to=bot.from_user) Abbot parses user mentions ( @username ) and exposes the result in the tokenized arguments. These values can also be used to send messages. For example: C# JavaScript Python var (to, rest) = Bot.Arguments; if (to is IMentionArgument mention) { await Bot.ReplyAsync($\"Hello there {mention.Mentioned.Name}!\", new MessageOptions() { To = mention.Mentioned }); } let [to, ...rest] = bot.tokenizedArguments; if (to.mentioned) { await bot.reply(`Hello there ${to.mentioned.name}!`, { to: to.mentioned }); } (to, *rest) = bot.tokenized_arguments if isinstance(to, MentionArgument): bot.reply(f\"Hello there {to.mentioned.name}!\", to=to.mentioned) Or, you can use the \"Users\" API to fetch a specific user, if you know their platform-specific ID (for example, the Unnnnnnn ID for a Slack User). C# JavaScript Python var user = Bot.Users.GetTarget(\"U0123456789\"); await Bot.ReplyAsync($\"Hello!\", new MessageOptions() { To = user }); let user = bot.users.getTarget(\"U0123456789\"); await bot.reply(\"Hello!\", { to: user }); user = bot.users.get_target(\"U0123456789\") bot.reply(\"Hello!\", to=user) Note The object returned by the \"Get Target\" API is just a handle that can be used with the \"to\" option. It doesn't contain any of the user's profile information (name, email, etc.) Sending to rooms You can also send messages to any room that Abbot is in. Note Abbot must be invited to the room before they can send any messages to it! If you absolutely want to ensure you send a top-level message to a room, even if Abbot was invoked in a thread, you can do so by sending directly to the room in which the skill was invoked: C# JavaScript Python await Bot.ReplyAsync(\"Thanks!\", new MessageOptions() { To = Bot.Room }); await bot.reply(\"Thanks!\", { to: bot.room }); bot.reply(\"Thanks\", to=bot.room) Abbot parses room mentions ( #room ) and exposes the result in the tokenized arguments. These values can also be used to send messages. For example: C# JavaScript Python var (to, rest) = Bot.Arguments; if (to is IRoomArgument arg) { await Bot.ReplyAsync(\"Hello\", new MessageOptions() { To = arg.Room }); } let [to, ...rest] = bot.tokenizedArguments; if (to.room) { await bot.reply(\"Hello\", { to: to.room }); } (to, *rest) = bot.tokenized_arguments if isinstance(to, RoomArgument): bot.reply(\"Hello\", to=to.room) Or, you can use the \"Rooms\" API to fetch a specific room, if you know their platform-specific ID (for example, the Cnnnnnnn ID for a Slack Channel). C# JavaScript Python var room = Bot.Rooms.GetTarget(\"C0123456789\"); await Bot.ReplyAsync(\"Hello!\", new MessageOptions() { To = room }); let room = bot.rooms.getTarget(\"C0123456789\"); await bot.reply(\"Hello!\", { to: room }); room = bot.rooms.get_target(\"C0123456789\") bot.reply(\"Hello!\", to=room) Note The object returned by the \"Get Target\" API is just a handle that can be used with the \"to\" option. It doesn't contain any of the room's other metadata (name, etc.) Sending on Threads By default, when sending to a user or room, Abbot sends a top-level message. The only exception to that is when Abbot was invoked within a thread. However, you can also tell Abbot respond in a particular thread if you know the ID of that thread. If you want to respond in a new thread when a user invokes your skill, even if they invoke it as a top-level message, you can use the \"Thread\" property on the Bot object: C# JavaScript Python await Bot.ReplyAsync(\"Hello from a thread!\", new MessageOptions() { To = Bot.Thread }); await bot.reply(\"Hello from a thread!\", { to: bot.thread }); bot.reply(\"Hello from a thread!\", to=bot.thread) Or, if you know the platform-specific ID for a thread, you can look it up using the \"Get Thread\" API on any User or Room (including values returned by the \"Get Target\" API): C# JavaScript Python var thread = Bot.Rooms.GetTarget(\"C1234\").GetThread(\"1234.5678\"); await Bot.ReplyAsync(\"Hello from a thread!\", new MessageOptions() { To = thread }); let thread = bot.rooms.getTarget(\"C1234\").getThread(\"1234.5678\"); await bot.reply(\"Hello from a thread!\", { to: thread }); thread = bot.rooms.get_target(\"C1234\").get_thread(\"1234.5678\") bot.reply(\"Hello from a thread!\", to=thread) Parsing Slack URLs Abbot has another neat trick up their sleeve. Abbot can parse Slack URLs (the kind generated when you choose \"Copy Link\" when sharing a message, channel, user, etc.) and produce a handle to whatever the URL represented that you can use to send messages: C# JavaScript Python if (Bot.Utilities.TryParseSlackUrl(\"https://exampleorg.slack/team/U0000000000\", out var chat)) { await Bot.ReplyAsync(\"Hello!\", new MessageOptions() { To = chat }); } let chat = bot.utils.parseSlackUrl(\"https://exampleorg.slack/team/U0000000000\"); if (chat) { await bot.reply(\"Hello!\", { to: chat }); } chat = bot.utils.parse_slack_url(\"https://exampleorg.slack/team/U0000000000\") if chat is not None: bot.reply(\"Hello!\", to=chat)"
  },
  "chatops/writing-skills/ui-elements/index.html": {
    "href": "chatops/writing-skills/ui-elements/index.html",
    "title": "User Interface Elements | Abbot Docs",
    "keywords": "User Interface Elements Abbot supports a limited set of UI elements that can be leveraged in a skill. Discord doesn't support UI elements yet, so these elements only work in Slack and Teams. We may have a workaround for that in the future, but for now, this is the way it is. Over time, Abbot will add support for more elements. Buttons Buttons are a simple way to present the user a set of choices. They can be useful in workflows driven by chat such as an approval workflow. For example, suppose a skill needs to find out the user's favorite color. The following code will reply with some text and a set of buttons. C# JavaScript Python var buttons = new[] { new Button(\"Red\"), new Button(\"Blue\"), new Button(\"Green\") }; await Bot.ReplyWithButtonsAsync(\"Please choose a color.\", buttons); var buttons = new[] { new Button(\"Red\"), new Button(\"Blue\"), new Button(\"Green\") }; bot.replyWithButtons(\"Please choose a color.\", buttons); buttons = [Button(\"Red\"), Button(\"Blue\"), Button(\"Green\")] bot.reply_with_buttons(\"Please choose a color\", buttons) Here's what it looks like in Slack. So far, so good. But presenting a set of buttons isn't all that useful by itself. It's important to be able to respond to button clicks. When the user clicks a button, the skill is called with a set of predefined arguments. The predefined arguments are specified by the value of the clicked button. For example, if a button has a value property 123 , then when someone clicks that button, the skill is called with two arguments, property and 123 . But what if somebody calls the skill from chat with the arguments property 123 ? Is there a way to distinguish that from the user clicking the button with the value property 123 ? Yes there is. To distinguish between the user typing arguments vs clicking a button, there's a Bot.IsInteraction (C#), bot.is_interaction (Python), bot.isInteraction (JavaScript) property. This property indicates whether or not the incoming message is the result of clicking a button. Let's put these together to see how it works. C# JavaScript Python if (!Bot.IsInteraction) { var buttons = new [] { new Button(\"Red\"), new Button(\"Blue\"), new Button(\"Green\") }; await Bot.ReplyWithButtonsAsync(\"Please choose a color.\", buttons); } else { // Bot.IsInteraction is true await Bot.ReplyAsync($\"You chose {Bot.Arguments[0]}\"); } if (!bot.isInteraction) { var buttons = [ new Button(\"Red\"), new Button(\"Blue\"), new Button(\"Green\") ]; bot.replyWithButtons(\"Please choose a color.\", buttons); } else { // bot.isInteraction is true bot.reply(`You chose ${bot.tokenizedArguments[0]}`); } if not bot.is_interaction: buttons = [Button(\"Red\"), Button(\"Blue\"), Button(\"Green\")] bot.reply_with_buttons(\"Please choose a color\", buttons) else: # bot.is_interaction is True bot.reply(\"You chose {}\".format(bot.tokenized_arguments[0])) Now when you run this skill, and then click on the button, say the Blue one, you'll receive a response that says \"You chose Blue\". The value of a button is passed back to the skill as the arguments. The arguments for a button can be different from the label displayed to the user. And buttons can be given one of three styles, default, primary, or danger. However, these styles only work for Slack as Teams doesn't support them and just ignores these styles. C# JavaScript Python if (!Bot.IsInteraction) { var buttons = new[] { new Button(\"Red\", \"pick red\", ButtonStyle.Primary), new Button(\"Blue\", \"pick blue\"), new Button(\"Green\", \"pick green\") }; await Bot.ReplyWithButtonsAsync(\"Please choose a color.\", buttons); } else { // Bot.IsInteraction is true await Bot.ReplyAsync($\"You chose {Bot.Arguments[1]}\"); } if (!bot.isInteraction) { var buttons = [ new Button(\"Red\", \"pick red\", 'primary'), new Button(\"Blue\", \"pick blue\"), new Button(\"Green\", \"pick green\") ]; bot.replyWithButtons(\"Please choose a color.\", buttons); } else { // bot.isInteraction is true bot.reply(`You chose ${bot.tokenizedArguments[1]}`); } if not bot.is_interaction: buttons = [ Button(\"Red\", \"pick red\", \"primary\"), Button(\"Blue\", \"pick blue\"), Button(\"Green\", \"pick green\") ] bot.reply_with_buttons(\"Please choose a color\", buttons) else: # bot.is_interaction is True bot.reply(\"You chose {}\".format(bot.tokenized_arguments[1])) Note that in this example, because the value has two words, we need to grab the second tokenized argument. Hero Cards Sometimes you want to present the buttons with a bit more style. Abbot also supports presenting a set of buttons along with an image and title. C# JavaScript Python if (!Bot.IsInteraction) { var buttons = new[] { new Button(\"Red\", \"pick red\", ButtonStyle.Primary), new Button(\"Blue\", \"pick blue\"), new Button(\"Green\", \"pick green\") }; await Bot.ReplyWithButtonsAsync( \"Please choose a color.\", buttons, \"Pick one\", new Uri(\"https://ab.bot/img/abbot-full-wave.png\"), \"The big choice\", \"#660000\"); } else { // Bot.IsInteraction is true await Bot.ReplyAsync($\"You chose {Bot.Arguments[1]}\"); } if (!bot.isInteraction) { var buttons = [ new Button(\"Red\", \"pick red\", 'primary'), new Button(\"Blue\", \"pick blue\"), new Button(\"Green\", \"pick green\") ]; bot.replyWithButtons(\"Please choose a color.\", buttons, \"Pick one\", \"https://ab.bot/img/abbot-full-wave.png\", \"The big choice\", \"#660000\"); } else { // bot.isInteraction is true bot.reply(`You chose ${bot.tokenizedArguments[1]}`); } if not bot.is_interaction: buttons = [ Button(\"Red\", \"pick red\", \"primary\"), Button(\"Blue\", \"pick blue\"), Button(\"Green\", \"pick green\") ] bot.reply_with_buttons(\"Please choose a color\", buttons, \"Pick one\", \"https://ab.bot/img/abbot-full-wave.png\", \"The big choice\", \"#660000\") else: # bot.is_interaction is True bot.reply(\"You chose {}\".format(bot.tokenized_arguments[1])) Note that the color parameter ( #660000 ) defines the color of the left side border and only applies to Slack. It's ignored by Teams."
  },
  "chatops/writing-skills/using-your-own-editor/index.html": {
    "href": "chatops/writing-skills/using-your-own-editor/index.html",
    "title": "Writing Abbot Skills with Your Own Editor | Abbot Docs",
    "keywords": "Writing Abbot Skills with Your Own Editor While we've worked hard to make the Abbot editing experience in the browser great, it will never be as good as the editing experience in your favorite editor. To that end, we're working on a great local editing experience. This document will walk you through how to use your favorite editor to write Abbot skills using abbot-cli (Abbot Command Line Interface). abbot-cli is an open source command line tool that makes it easy to to work on Abbot skills on your local machine. The tool has the following primary uses: Get Abbot skill code from Abbot onto your local machine. Run your local changes in the Abbot skill runner. Deploy your changes to Abbot . Installation As of right now, installation of the Abbot CLI is a manual, albeit simple, process. Visit the releases page on GitHub to download the latest release for your platform. Once you've downloaded the release, extract the contents of the zip file into your local machine. Copy the abbot file somewhere on your machine that's in your PATH . For Mac users, I recommend /usr/local/bin/ . Abbot Workspace Perhaps the best way to learn about the tool is to walk through an example session. At any time, you can also run abbot help to see a list of commands. The first thing we need to do is set up an Abbot workspace on your local machine. This is a folder where you will edit your skills. In my terminal it would look something like this: $ mkdir my-skills && cd my-skills Now I can run abbot status : $ abbot status Running abbot-cli version 0.2.2.0 The directory /Users/haacked/my-skills is not an Abbot Workspace. Run `abbot auth` to set up the directory as an Abbot Workspace and authenticate it with your Abbot account. Of course the my-skills directory isn't an Abbot Workspace, we haven't done anything yet! We need to run abbot auth to set up the local workspace and connect it to our Abbot account. $ abbot auth Please visit https://ab.bot/account/apikeys to generate an authentication token. I will attempt to open your browser for you. Type in the API Key token and hit ENTER: At this point, abbot-cli will launch your browser to a page with your personal Abbot API Keys. IMPORTANT: If you have multiple ab.bot accounts, make sure you're in the correct one when generating an API key. . As you can see, I already have an API key. I can choose to create a new one, or regenerate the existing one. This page only allows you to grab the key when you create or regenerate it. After that, it never shows the key again. If I happen to hit ENTER without typing in the key, or if I already know the key and want to set it, I can just run abbot auth --token {MY-SECRET-API-KEY} to set it without launching the browser. Now I can run abbot status again to make sure it's all good. $ abbot status Running abbot-cli version 0.2.2.0 The organization A Serious Business, Inc. (T0123456) has the API disabled. This setting can be changed by an Administrator at https://ab.bot/account/admin/settings Whoops! As you can see from this message, the current workspace is set up and authenticated correctly, but my Abbot organization hasn't enabled API Access for the organization. Once this access is enabled, run the abbot status command again and you should see: $ abbot status Running abbot-cli version 0.2.2.0 The directory /Users/haacked/my-skills is an authenticated Workspace. Organization: Serious Business (Slack T0123456) User: Phil Haack (U01234567) This lets you know which Abbot account this Workspace is connected to. Editing a skill Now that we have an authenticated Abbot Workspace set up, we're ready to work on a skill. The first thing we do is use abbot get to bring a skill's code to our local machine. We need to run this command from within the Abbot Workspace directory. In this example, I want to work on the tz skill (available in the Abbot Package Directory ). $ abbot get tz Created skill directory /Users/haacked/dev/exp/my-skills/tz Edit the code in the directory. When you are ready to deploy it, run abbot deploy tz This creates an Abbot Skill Workspace for the tz skill. This is a directory named tz with a code file main.csx and some other supporting files. For C# skills, these other files make it possible for us to provide Intellisense for the skill editing experience. More on that in another post for those interested. At this point, you can open up your editor to the Skill Workspace directory. If your editor supports Omnisharp, you'll get Intellisense. In my case, I'll open up VS Code to the tz directory. $ code tz As you can see from the screenshot, you have full Intellisense for the Bot instance, even though that's an instance injected by the Abbot Runtime. In order to make that work, we had to engage in some dark magic. You may notice the first line of the skill in the editor has a special line we ask you not to touch. We're working with the Omnisharp team for a better long-term solution. C# is our first Intellisense-supported language, we're working on adding it to JavaScript and Python as well. Testing a skill Now that you can edit the skill in your editor of choice, you're probably going to want to test those local changes before deploying them. You can do that using abbot run . For this example, assume we create a new C# skill named test with the default implementation: $ abbot run test \"one two three\" Hello one two three Note that the set of arguments to the skill need to be quoted when called this way. In the example above, three arguments (\"one\", \"two\", and \"three\") are passed to the skill test . If you need to pass an argument that itself has spaces, escape the quotes. So abbot run test \"\\\"one two\\\" three\" would pass two arguments to the skill test (\"one two\" and \"three\"). Having to run a command every time you want to test a change can be tedious. You can also start a REPL (Read-Eval-Print Loop) for a skill to run the skill repeatedly. Note that when you are in a REPL session, you test your skill by typing in the arguments and hitting ENTER . You don't need to quote the set of arguments. You can leave the REPL running while you make changes to the skill code. Each time you call the skill in the REPL, it'll run the latest saved version of the skill on your local machine. Deploying a skill At some point, you'll want to deploy your local changes to Abbot. To do that, run abbot deploy with the name of the skill. This will update the skill at https://ab.bot/ with your local changes, making them live. $ abbot deploy test Skill test updated Next Steps We're still in the early stages of building the Abbot CLI, but we have a nice foundation for local editing we can build on. With this tool, it wouldn't be too hard to set up a GitHub workflow for editing skills. For example, add your Abbot workspace to a GitHub repository and set up a GitHub action to run abbot deploy every time you merge changes to your main branch. While it is easy to shell out to abbot deploy , we'd like to create a proper GitHub Action for Abbot development. Other changes we want to make include improving the local editing experience for JavaScript and Python skills. And lastly, we'd like to hear your feedback to help us prioritize future development. As I mentioned earlier, the Abbot CLI is open source and hosted on GitHub . If you have any feedback, please open an issue or pull request on GitHub."
  },
  "convos/conversation-states.html": {
    "href": "convos/conversation-states.html",
    "title": "Conversation States | Abbot Docs",
    "keywords": "Conversation States A Conversation will transition into multiple states throughout its life. The Conversation List contains a tab for each of these states that list the conversations currently in that state. Needs Attention / Responded A conversation that \"Needs Attention\" is one that likely needs someone from the customer success team to respond. Newly-created conversations begin in this state. Once someone from your organization responds, the conversation will move to the \"Responded\" state until someone from the customer organization responds. The conversation moves back and forth between these states until the issues are resolved and someone from your team closes the conversation. Closed A member of your taem can close a conversation at any time by opening the conversation Timeline in the Abbot Dashboard and selecting \"Close Conversation\": Once the conversation is closed, response time notifications will no longer be triggered for it. However, if anyone responds again on the thread, Abbot bring it back in to the \"Needs Attention\" or \"Responded\" state (depending on if the response comes from your team or your customer). Archived If you don't expect the customer to respond any further (perhaps you've waited a few days to make sure they don't have any follow-ups), you can Archive a closed conversation by opening the conversation Timeline in the Abbot Dashboard and selecting \"Archive Conversation\": If anyone posts a new message into the conversation, Abbot will remember that message and add it to the Timeline , but Abbot won't trigger notifications or change the state of the conversation. On the Timeline you can also unarchive a previously-archived conversation. This returns it to the Closed state."
  },
  "convos/conversation-timeline.html": {
    "href": "convos/conversation-timeline.html",
    "title": "The Conversation Timeline | Abbot Docs",
    "keywords": "The Conversation Timeline Abbot maintains a Timeline for each Conversation, capturing all the events that happened during the life of that conversation. Accessing the Timeline Using the Message Shortcut The easiest way to access the Conversation timeline is via the \"Manage Conversation\" message shortcut. To access this, press the \"triple-dot\" menu for a message and select the \"Manage Conversation\" shortcut Note You may need to select \"More message shortcuts…\" to find the shortcut. If the message is not part of a conversation, you'll get an error message: If the message is part of a conversation, you'll get some options. The specific options you see depends on the features enabled for your account, and what Integrations you have configured. The first option, \"View this conversation on ab.bot\", is always present and will take you straight to the Conversation Timeline From the Web UI You can also open a conversation timeline by finding the conversation in the Conversation List and clicking on the title. What's on the Timeline? The timeline captures several different types of events: Messages posted in the thread Transitions between states Linked tickets created by integrations, such as the Zendesk Integration"
  },
  "convos/frs.html": {
    "href": "convos/frs.html",
    "title": "First Responders | Abbot Docs",
    "keywords": "First Responders To help ensure your customers are getting the responses they need, Abbot encourages you to assign a First Responder for each room. The First Responders are the people who are primarily responsible for ensuring that the customer gets a prompt and helpful response. They may not be the subject matter experts, but they know how to find the right person for each question. Assigning First Responders ensures Abbot knows who needs to be kept in the loop about the conversation. First Responders will see conversations for all their rooms on their Abbot Dashboard . If you configure Response Times , Abbot will also notify First Responders when conversations near the configured response time deadlines. Assigning First Responders To assign First Responders for a room, you can use the Abbot Dashboard . Note You must be an Administrator in Abbot to manage First Responders. To assign First Responders for a room, you start at the Room Settings page. Here you can search for the room you want to manage and click \"Settings\" to manage First Responders and other settings. If you find a room that doesn't have Conversation Tracking enabled, this is also where you can go to enable Conversation Tracking. On the room settings page, you can view the active First Responders: To assign a new user, just start typing in the \"Search for a user…\" box, and then click to select the user: To remove a user, click the \"Remove\" button. Escalation Responders Escalation Responders are a special kind of responder. They are agents who get notified when a deadline has passed, in addition to First Responders."
  },
  "convos/hubs.html": {
    "href": "convos/hubs.html",
    "title": "Hubs | Abbot Docs",
    "keywords": "Hubs A Hub is a special channel in your Slack that Abbot controls to help manage customer conversations. Abbot shares new customer conversations in the Hub, plus an ongoing summary of these conversations. Your team can discuss and plan in threads connected to these messages, away from shared customer channels. Hubs reduce the need to visit Abbot's website, because Abbot shares all the important information in the Hub. When Hubs are enabled, any team member can join the Hub to check on customer conversations. Responders will get a mention in a thread when notifications are sent. When Hubs are enabled, Abbot will no longer send Direct Messages to responders. Also, conversations can be snoozed or closed directly from the Hub by adding the 👀 or ✅ emojis. In short You can get in-chat help for Hubs. Type @abbot help hubs or .help hubs in a room with Abbot for a short guide on Hubs. Setting up a Hub If you started using Abbot recently, we made a default Hub for you when you added Abbot to your Slack. We usually name this channel #hub-customers , although your administrator may have renamed it. If you're not sure if you have a Hub, you can see the list of Hubs for your workspace from the Rooms page . If you don't have a Hub yet, you need to make a new channel in Slack to set one up. Invite Abbot to the channel once it's been created. Then type @abbot hubs create in the channel. This turns the channel into a Hub. You can make as many Hubs as you want, but for now, let's make this one the default. Do this by typing @abbot hubs default set in the Hub channel. Once this is done, all monitored channels in your workspace will send their notifications here. The summaries and tags that you may have seen in the Conversations List at https://app.ab.bot will show up here once Abbot processes them. Abbot will keep updating the main message with the latest summary, tags, and suggested next actions. Using Multiple Hubs If your team has many customer channels, one Hub might be too crowded. You can easily make more Hubs. Make a new room and invite Abbot to it. Then type @abbot hubs create to change the room into a Hub. You can link specific rooms to the Hub by typing @abbot hubs attach #room to connect rooms to the new Hub. For instance, if you want to connect a room called #team-valued-customer to the new Hub, you would type @abbot hubs attach #team-valued-customer while in the Hub. You can make as many Hubs as you want, but a room can only be connected to one Hub at a time. Hubs and Playbooks If a Hub is configured, the \"Notify Responders\" step in Playbooks will send the notifications to the Hub instead of direct messaging the responders. This makes sure notifications are visible outside of direct messages. You can also use the \"Send Message\" step to send messages directly to your Hub. This is useful if you want to send status updates to your Hub, or send messages based on other activities. In Conclusion We made Hubs to make it easier to work with your customers. Hubs are areas where your team can collaborate on customer questions and issues. Anyone in your company can join a Hub if the room is public. This way everyone can watch customer conversations without having to join customer channels."
  },
  "convos/index.html": {
    "href": "convos/index.html",
    "title": "Conversation Management | Abbot Docs",
    "keywords": "Conversation Management Abbot helps you manage conversations with your customers in Slack. So, what is a conversation? In Abbot, a Conversation is a set of chat messages that represent a single request, question or comment from a customer. Each new thread from a customer is assigned to a conversation, or creates a new conversation. Currently, Abbot only supports conversation management in a Slack Connect channel shared with another organization, or in channels where there are guest users. When you create a shared channel and invite Abbot to it, you'll get a message asking you if you want to configure this room for conversation tracking. If you enable conversation tracking, Abbot will automatically create a new conversation for every top-level (i.e. not in a thread) message posted by someone from outside your organization . Replies to that message will automatically be assigned to the same conversation. You can see these conversations on your Dashboard , if you're a First Responder : If you select a conversation, you can see the Conversation Timeline , which is a record of all the activity that has occured in the conversation: In this example, \"Serious Sam\" asked a question, and \"andrew\" responded from the support team with a request for more information, which Serious Sam provided later. Note To preserve privacy, Abbot doesn't store message content. Instead, we provide links to open the relevant message directly in Slack. Abbot keeps track of who posted last in a conversation and uses that to help you identify the conversations that need attention right now. If you go to the conversation list (\"Conversations\" on the sidebar), you can see a number of tabs at the top: These tabs let you view conversations in various states: Open - Any conversation that hasn't been closed yet. Needs Attention - Conversations where the customer was last to post. Responded - Conversations where someone from your team was last to post. Closed - Conversations that have been Closed . Archived - Conversations that have been Archived . These core tools give you and the rest of your team a quick at-a-glace interface to manage customer interactions on Slack. Abbot can do even more to help ensure your customers are happy! Next Steps Conversation Timeline First Responders and Room Roles Response Times and Notifications Conversation States Integrations"
  },
  "convos/integrations-zendesk.html": {
    "href": "convos/integrations-zendesk.html",
    "title": "Integrations | Abbot Docs",
    "keywords": "Integrations Abbot provides integrations with third-party services. Zendesk You can use Abbot to create a Zendesk ticket from a Conversation. Once a Zendesk ticket is created, Abbot will keep replies in-sync between Slack and Zendesk. Configuring the integration To configure the integration, you need to authorize our OAuth app. Only a Zendesk admin can authorize the app. Go to the Integration Settings and click \"Configure\" on the \"Zendesk\" integration: On the Zendesk integration page, click \"Configure\" next to \"Authentication Configured\" and enter your Zendesk subdomain: Then, click \"Install\" to install the necessary Zendesk elements. You'll be prompted to log in to your Zendesk account and allow Abbot access. Finally, select \"Enable\" to enable the integration. Creating a Zendesk ticket for a conversation To create a Zendesk ticket from a conversation, select any message in the Slack thread for the conversation, open the \"triple-dot\" menu, and select \"Manage Conversation\" On the dialog that appears, select \"Create Ticket\": A new dialog will appear to allow you to enter a Subject and Description for the ticket. In addition, you'll see the \"Requester\" that will be used on Zendesk, and the Zendesk Organization linked to the current room , if any. Click the \"Create\" button and Abbot will start creating the ticket in the background. When the process is complete, Abbot will send you a direct message with a link to the new ticket If the Slack message is a thread with replies, Abbot imports every reply in the thread as a comment on the Zendesk ticket that it creates. Keeping replies in sync After creating the initial ticket, Abbot will take any replies posted in Slack and push them to the Zendesk ticket. In addition, any Public Reply posted on the Zendesk ticket will be pushed back to the Slack thread. By default, Zendesk closes tickets after 28 days of inactivity. A closed Zendesk ticket cannot receive comments (Zendesk will create a new ticket). Therefore, Abbot will not push Slack replies to a closed Zendesk ticket. Keeping Status in sync When a Zendesk Ticket is marked as Solved , the linked Abbot Conversation will also be Closed . If a customer (foreign member of a shared channel or a guest account) replies to the thread in Slack, the Conversation and the linked Zendesk ticket will be reopened. Linking Zendesk organizations to rooms You can configure a Zendesk organization for each room Abbot is monitoring by going to the Rooms list . Find the room you want to configure, and select the \"Settings\" button: Then, go to \"Zendesk Settings\" and start typing the name of an organization in your Zendesk account. The organization must already have been created in your Zendesk account: Click the organization in the dropdown and it will be linked to the room. Now any tickets opened from conversations in that room will automatically be associated with that Zendesk organization. You can change the linked organization, or remove the link using the \"Remove this link\" button:"
  },
  "convos/response-times.html": {
    "href": "convos/response-times.html",
    "title": "Response Times | Abbot Docs",
    "keywords": "Response Times Abbot can automatically notify your Responders when a conversation isn't getting a response quickly enough. You can set two different thresholds for your response times: Target - The ideal response time. If a customer hasn't received a response in this time, we'll send a notification to the First Responders. Deadline - The longest a conversation can go without getting a response from your team. This could represent a contractual obligation like a Service Level Agreement (SLA). We'll send a notification to First Responders and Escalation Responders when this time has elapsed without a response to the customer. Configuring a Response Time To configure a Response Time for a room, you can use the Abbot Dashboard . Note You must be an Administrator in Abbot to manage Response Times. To set a Response Time for a room, visit the Room Settings page. Here you can search for the room you want to manage and click \"Settings\" to manage Response Times and other room settings. You can select a time in minutes, hours, or days. Default settings can be set in Room Settings . Note The \"Deadline\" threshold must always be longer than the \"Target\" threshold. Notifications Once you've configured both First Responders and a Response Time for a room, Abbot will start sending notifications. When the \"Target\" time threshold elapses for a conversation, Abbot will start a group DM with all the First Responders for a room and remind them to respond to the conversation. When the \"Deadline\" time threshold elapses for a conversation, both First Responders and Escalation Responders are sent a notification. The message will include a direct link to make it easier for your FRs and ERs to respond. The Responders can also use that group DM to coordinate a response."
  },
  "index.html": {
    "href": "index.html",
    "title": "Help | Abbot Docs",
    "keywords": "Help If you're having a bot emergency, contact us at help@ab.bot . You can also join us in Discord . We work in Pacific Time and are in there consistently most days. If you have feedback, you can also send it directly to us from chat by sending @abbot feedback . If you want to learn all about Abbot, this is the place to do it! Get started by reading our docs on Conversation Management . If you want to dig in to our Chatops features, check out our Chatops Guides ."
  },
  "playbooks/index.html": {
    "href": "playbooks/index.html",
    "title": "Playbooks | Abbot Docs",
    "keywords": "Playbooks Playbooks are a powerful workflow and automation tool for managing your relationships with customers. Use Playbooks to automate customer onboarding steps, set up trial rooms in Slack, and more. A Playbook consists of one or more triggers used to start the Playbook, and a series of Action steps that are executed when the Playbook is triggered. Each step can be configured to perform a specific action, such as creating a new Slack channel, sending a message to a channel, or even inviting a customer to a shared Slack Connect channel. Triggers Triggers are the events that start a Playbook. For example, a Playbook can be triggered when a reaction is added to a message, a customer is created, or via a webhook. The following triggers are currently supported: Abbot Added to Channel - Runs when Abbot joins a channel. Conversation Overdue - A conversation is overdue for a reply. Conversation Started - A conversation was started by a customer. New Customer Created - A new customer record is created in Abbot. Run Playbook Button - Add a Run Playbook button to the Playbook list page to run this Playbook manually. Reaction Added - Runs when a reaction is added to a message. Schedule - Runs on the specified schedule. Negative Sentiment - Runs when AI classifies a conversation as having negative sentiment. Ticket Linked - Runs when a ticket (Zendesk, HubSpot, etc.) is linked to a conversation. Ticket Status Changed - Runs when a linked ticket status changes. Webhook - Runs when a POST or PUT request is sent to the Playbook's webhook URL. Actions Actions are the steps that are executed when a Playbook is triggered. Actions are executed in order. Notify Responders - Notifies the first responders for a channel in its Hub or in a DM. Create Channel for Customer - Creates a channel for a customer using the customer name and chosen prefix. Invite to Slack Connect - Creates a Slack Connect channel and invites a user to it. Send Slack Poll - Sends a Slack poll to a channel. Request Approval in Slack - Requests an approval from one of any number of approvers in Slack. Send Message - Posts a message in a channel. Continue If - Runs the next step of the Playbook if a certain condition is met. Create Customer - Creates a Customer in Abbot. If - Branches the Playbook based on a condition. Run Skill - Runs a Skill in a channel. Wait - Pauses the Playbook for the specified duration."
  },
  "playbooks/template-language.html": {
    "href": "playbooks/template-language.html",
    "title": "Abbot Templating Language | Abbot Docs",
    "keywords": "Abbot Templating Language Inputs provided to Playbook Steps can be templates that will be rendered using the Abbot Templating Language, which is derived from Handlebars . Handlebars is a powerful templating language that allows you to use variables, conditionals, and loops to generate text. Here, we'll focus on the basics and cover the variables that Abbot makes available to you, and how to use them. Where can you use templates? Any Playbook step that accepts text input can include a template. For example, the \"Message\" input for the \"Send Message\" step: In addition, some drop-down inputs support pre-defined templates. For example, the \"Channel\" input for the \"Send Message\" step supports \"Channel from Triggers\" which is a template that will be replaced with the channel that triggered the Playbook: Other steps only support template values, such as the \"Condition\" in the \"Continue If\" step, which only allows a template from a predefined set of templates: All of these are implemented with templates, though you only need to write templates when using free-form text inputs. Handlebars Basics Handlebars is a fairly simple templating language. Most text is passed through unchanged, but you can use special syntax to insert variables. Variables are surrounded by double curly braces, like {{this}} . We provide a template \"context\", which is a set of variables that you can use in your templates. Many of these variables are objects that have their own properties, which you can access using dot notation. For example {{trigger.outputs.channel.name}} will be replaced with the name of the channel that triggered the Playbook. Template Context The following variables are available in all templates: Variable Description trigger Results from the trigger that started the Playbook. previous Results from the previous step. outputs A merged view of all the \"outputs\" from all previous steps. Outputs from later steps override outputs from earlier steps. The trigger object The trigger variable is a \"Step Results\" object and has the following properties: Variable Description trigger.id The ID of the trigger trigger.outcome The outcome of the trigger. Will always be Succeeded . trigger.outputs A table of output values from the trigger. The values in this table vary depending on the trigger. The previous object The previous variable is also \"Step Results\" object and has the following properties: Variable Description previous.id The ID of the previous step in the Playbook previous.outcome The outcome of the previous step in the Playbook. Will always be Succeeded . previous.outputs A table of output values from the previous step in the Playbook. The values in this table vary depending on the step. Note For the first step in a Playbook, previous will be identical to the trigger . The outputs object The outputs variable is a table of all the outputs from all previous steps in the Playbook. Unlike, say, trigger.outputs which is just the outputs from the trigger, or previous.outputs which is just the outputs from the previous step, this is a merged view of all outputs from all steps that have executed. If a later step has an output with the same name as an earlier step, the later step's output will override the earlier step's output. Some examples Here are some examples of triggers and steps and how you can use their outputs in templates. This isn't a full reference of all the outputs available, but it gives a brief overview of what to expect. Accessing the channel that triggered the Playbook If you use a trigger like \"Conversation Started\", \"Reaction Added\", \"Abbot Added to Channel\", or other triggers that are caused by events related to Slack messages, the Slack channel in which that event occurred is available in the trigger.outputs.channel object. That object has the following properties: Variable Description trigger.outputs.channel.id The ID of the channel trigger.outputs.channel.name The name of the channel If you want to mention the Channel in a Slack message, use Slack's linking syntax : Hey everyone, we got a new customer. They're in <#{{ trigger.outputs.channel.id }}>! Accessing the Customer that triggered the Playbook If you trigger a Playbook using the \"New Customer Created\" trigger, a customer output is available that contains information about the customer: Variable Description trigger.outputs.customer.name The name of the customer trigger.outputs.customer.segments A list of the Segments the customer is in trigger.outputs.customer.channels A list of the Slack channels associated with the customer In addition, all of the channels associated with the customer are available in the trigger.outputs.channels object. The first channel in the channel list is also available in the trigger.outputs.channel object, for convenience. This allows you to send a message to a customer when you create their record in Abbot, for example: The \"Channel from triggers\" here is equvalent to the template trigger.outputs.channel.id , so this will post a message to the first channel associated with the customer. This example assumes you've assigned a channel to the customer when you created their record in Abbot. There are also steps that create channels, such as \"Create Channel for Customer\". These make the channel they create available in the outputs.channel variable, so you can use that in subsequent steps: This example creates a new channel for the customer based on the prefix you specify and the name of the customer. For example, given a Customer name of Funny Business and a prefix of cust- , the channel name will be cust-funny-business . Then, in a subsequent step, you can use the outputs.channel.id template to mention the channel in a message. The example Playbook above posts a mention of the newly created channel in the #biz channel."
  },
  "reference/csharp/index.html": {
    "href": "reference/csharp/index.html",
    "title": "C# Bot Reference Overview | Abbot Docs",
    "keywords": "C# Bot Reference Overview Abbot skills written in C# receive a Bot property of type IBot . Bot is the starting point to access everything Abbot provides. Parsing arguments Abbot provides assistance in parsing arguments with a special implementation of IArguments . For more details, be sure to read the guide Parsing Arguments with C# . Managing Data Abbot includes a simple persistence layer that makes it easy for your skills to store and retrieve data. You can access Abbot's brain with Bot.Brain . The methods that are included in Bot.Brain are: WriteAsync(Key, Value) : Save Value with a key of Key . GetAsync(Key) : Get the value stored with key Key . GetKeysAsync(Key?) : Get all keys that match Key . Key can be empty and will return all keys. note: This is not currently implemented in Python or JavaScript. GetAllAsync(Key?) : Get all records where keys match Key . This supports fuzzy matching, so partial matches will be returned. Key can be empty and will return all keys and values. note: This is not currently implemented in Python or JavaScript. DeleteAsync(Key) : Delete the value stored with key Key . Managing Secrets Secrets are a special kind of data, and can be used to store things like authentication tokens or other configuration items that you prefer to exclude from your skill. Secrets can only be set from https://ab.bot , and are specific to a single skill. Since developers can read data from your secrets, be careful about the data that you store there -- passwords should never be stored in a Secret, for example. Secrets can be read using a similar interface to Abbot's brain: GetAsync(Key) : Get the Secret with the key of Key The Mentions Collection Bot.Mentions contains a list of all mentions that were found in the user's text. The ToString() method on each mention will return an appropriately formatted username mention to the chat system (for example, <@U92394113> in Slack). Skill developers can also use any of the other fields available in the Mention object in their skills. The Mention Object The Mention object has these fields: Id : The id of the person or bot that was mentioned. This id is unique to the chat platform that was being used, and is not an Abbot user id. UserName : The user name of the person or bot that was mentioned. This name is determined by the chat platform, and is not an Abbot user name. Name : The display name of the person or bot that was mentioned. This is set by the user in the chat platform and may change over time. If you are writing skills that rely on the Mention object, the Id is the only reliable field to use in keys and for comparison. Preloaded C# libraries All libraries available in .NET 7.0 Dapper 2.0.x HtmlAgilityPack 1.11.x Newtonsoft.Json 13.0.x Microsoft.Recognizers.Text 1.8.x MysqlConnector 1.3.x NodaTime 3.x Npgsql 6.0.x Octokit.net Refit 6.x To use these libraries, just add the respective using statement at the top of the skill. For example, the deploy package shows an example of using Octokit."
  },
  "reference/csharp/Serious.Abbot.Messages.AbbotResponse.html": {
    "href": "reference/csharp/Serious.Abbot.Messages.AbbotResponse.html",
    "title": "Class AbbotResponse | Abbot Docs",
    "keywords": "Class AbbotResponse Represents a response from an Abbot API Inheritance Object AbbotResponse AbbotResponse <T> Implements IResult IEquatable < AbbotResponse > Namespace : Serious.Abbot.Messages Assembly : Abbot.Scripting.Interfaces.dll Syntax public class AbbotResponse : Object, IResult Constructors AbbotResponse() Declaration public AbbotResponse() AbbotResponse(AbbotResponse) Declaration protected AbbotResponse(AbbotResponse original) Parameters Type Name Description AbbotResponse original Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Problem Gets a Refit.ProblemDetails describing the failure if Success(Int32) is false. Declaration public virtual ProblemDetails Problem { get; set; } Property Value Type Description Refit.ProblemDetails StatusCode Gets the HTTP status code of the response Declaration public int StatusCode { get; set; } Property Value Type Description Int32 Successful Gets a boolean indicating whether the response was successful. Declaration public virtual bool Successful { get; } Property Value Type Description Boolean Methods <Clone>$() Declaration public virtual AbbotResponse <Clone>$() Returns Type Description AbbotResponse Equals(AbbotResponse) Declaration public virtual bool Equals(AbbotResponse other) Parameters Type Name Description AbbotResponse other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Error(ProblemDetails) Creates a failed AbbotResponse with the specified Problem. Declaration public static AbbotResponse Error(ProblemDetails problem) Parameters Type Name Description Refit.ProblemDetails problem Returns Type Description AbbotResponse Error<T>(ProblemDetails) Creates a failed AbbotResponse<T> with the specified Problem. Declaration public static AbbotResponse<T> Error<T>(ProblemDetails problem) Parameters Type Name Description Refit.ProblemDetails problem Returns Type Description AbbotResponse <T> Type Parameters Name Description T GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean Success(Int32) Creates a successful AbbotResponse with no payload. Declaration public static AbbotResponse Success(int statusCode) Parameters Type Name Description Int32 statusCode Returns Type Description AbbotResponse Success<T>(Int32, T) Creates a successful AbbotResponse with the specified payload Declaration public static AbbotResponse<T> Success<T>(int statusCode, T body) Parameters Type Name Description Int32 statusCode T body Returns Type Description AbbotResponse <T> Type Parameters Name Description T ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(AbbotResponse, AbbotResponse) Declaration public static bool operator ==(AbbotResponse left, AbbotResponse right) Parameters Type Name Description AbbotResponse left AbbotResponse right Returns Type Description Boolean Inequality(AbbotResponse, AbbotResponse) Declaration public static bool operator !=(AbbotResponse left, AbbotResponse right) Parameters Type Name Description AbbotResponse left AbbotResponse right Returns Type Description Boolean Explicit Interface Implementations IResult.Error Describes the failure if Ok is false. Declaration string IResult.Error { get; } Returns Type Description String IResult.Ok Gets a boolean indicating whether the response was successful. Declaration bool IResult.Ok { get; } Returns Type Description Boolean Implements IResult System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Messages.AbbotResponse-1.html": {
    "href": "reference/csharp/Serious.Abbot.Messages.AbbotResponse-1.html",
    "title": "Class AbbotResponse<T> | Abbot Docs",
    "keywords": "Class AbbotResponse<T> Represents a response from an Abbot API that includes a payload. Inheritance Object AbbotResponse AbbotResponse<T> Implements IResult IEquatable < AbbotResponse > IEquatable < AbbotResponse <T>> Inherited Members AbbotResponse.Success(Int32) AbbotResponse.Success<T>(Int32, T) AbbotResponse.Error(ProblemDetails) AbbotResponse.Error<T>(ProblemDetails) AbbotResponse.StatusCode AbbotResponse.IResult.Ok AbbotResponse.IResult.Error Namespace : Serious.Abbot.Messages Assembly : Abbot.Scripting.Interfaces.dll Syntax public class AbbotResponse<T> : AbbotResponse, IResult Type Parameters Name Description T Constructors AbbotResponse() Declaration public AbbotResponse() AbbotResponse(AbbotResponse<T>) Declaration protected AbbotResponse(AbbotResponse<T> original) Parameters Type Name Description AbbotResponse <T> original Properties Body Gets the body of the response if Successful is true. Declaration public T Body { get; set; } Property Value Type Description T EqualityContract Declaration protected override Type EqualityContract { get; } Property Value Type Description Type Overrides AbbotResponse.EqualityContract Problem Gets a Refit.ProblemDetails describing the failure if Successful is false. Declaration public override ProblemDetails Problem { get; set; } Property Value Type Description Refit.ProblemDetails Overrides AbbotResponse.Problem Successful Gets a boolean indicating whether the response was successful. Declaration public override bool Successful { get; } Property Value Type Description Boolean Overrides AbbotResponse.Successful Methods <Clone>$() Declaration public override AbbotResponse<T> <Clone>$() Returns Type Description AbbotResponse <T> Overrides AbbotResponse.<Clone>$() Equals(AbbotResponse) Declaration public sealed override bool Equals(AbbotResponse other) Parameters Type Name Description AbbotResponse other Returns Type Description Boolean Overrides AbbotResponse.Equals(AbbotResponse) Equals(AbbotResponse<T>) Declaration public virtual bool Equals(AbbotResponse<T> other) Parameters Type Name Description AbbotResponse <T> other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides AbbotResponse.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides AbbotResponse.GetHashCode() PrintMembers(StringBuilder) Declaration protected override bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean Overrides AbbotResponse.PrintMembers(StringBuilder) RequireSuccess() If the status code is not successful, an exception is thrown. Otherwise this returns the response body. Declaration public T RequireSuccess() Returns Type Description T The response body, if the response resulted from a successful request. Exceptions Type Condition HttpRequestException The exception to throw if the request failed. ToString() Declaration public override string ToString() Returns Type Description String Overrides AbbotResponse.ToString() Operators Equality(AbbotResponse<T>, AbbotResponse<T>) Declaration public static bool operator ==(AbbotResponse<T> left, AbbotResponse<T> right) Parameters Type Name Description AbbotResponse <T> left AbbotResponse <T> right Returns Type Description Boolean Inequality(AbbotResponse<T>, AbbotResponse<T>) Declaration public static bool operator !=(AbbotResponse<T> left, AbbotResponse<T> right) Parameters Type Name Description AbbotResponse <T> left AbbotResponse <T> right Returns Type Description Boolean Implements IResult System.IEquatable<T> System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Messages.AbbotResponseExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Messages.AbbotResponseExtensions.html",
    "title": "Class AbbotResponseExtensions | Abbot Docs",
    "keywords": "Class AbbotResponseExtensions Useful extensions related to AbbotResponse. Inheritance Object AbbotResponseExtensions Namespace : Serious.Abbot.Messages Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class AbbotResponseExtensions : Object Methods RequireSuccess<T>(Task<AbbotResponse<T>>) If the status code is not successful, an exception is thrown. Otherwise this returns the response body. Declaration public static Task<T> RequireSuccess<T>(this Task<AbbotResponse<T>> responseTask) Parameters Type Name Description Task < AbbotResponse <T>> responseTask Returns Type Description Task <T> The response body, if the response resulted from a successful request. Type Parameters Name Description T Exceptions Type Condition HttpRequestException The exception to throw if the request failed."
  },
  "reference/csharp/Serious.Abbot.Messages.html": {
    "href": "reference/csharp/Serious.Abbot.Messages.html",
    "title": "Namespace Serious.Abbot.Messages | Abbot Docs",
    "keywords": "Namespace Serious.Abbot.Messages Classes AbbotResponse Represents a response from an Abbot API AbbotResponse<T> Represents a response from an Abbot API that includes a payload. AbbotResponseExtensions Useful extensions related to AbbotResponse. ProblemDetailsExtensions Extensions to Refit.ProblemDetails ."
  },
  "reference/csharp/Serious.Abbot.Messages.ProblemDetailsExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Messages.ProblemDetailsExtensions.html",
    "title": "Class ProblemDetailsExtensions | Abbot Docs",
    "keywords": "Class ProblemDetailsExtensions Extensions to Refit.ProblemDetails . Inheritance Object ProblemDetailsExtensions Namespace : Serious.Abbot.Messages Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class ProblemDetailsExtensions : Object Methods GetErrors(ProblemDetails) Gets a string describing the errors in a Refit.ProblemDetails object. Declaration public static string GetErrors(this ProblemDetails problem) Parameters Type Name Description Refit.ProblemDetails problem Returns Type Description String"
  },
  "reference/csharp/Serious.Abbot.Scripting.ArgumentExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ArgumentExtensions.html",
    "title": "Class ArgumentExtensions | Abbot Docs",
    "keywords": "Class ArgumentExtensions Extensions to IArgument to make it easier to work with arguments. Inheritance Object ArgumentExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class ArgumentExtensions : Object Methods ToInt32(IArgument) Parses the argument value as an Int32 and returns the value or null if it is not an integer. Supports numbers in the format #123 where it returns 123. Declaration public static Nullable<int> ToInt32(this IArgument argument) Parameters Type Name Description IArgument argument The argument. Returns Type Description Nullable < Int32 > ToLocalTime(IArgument) Parses the argument value and returns it as a LocalTime if it matches the format, otherwise returns null. Declaration public static Nullable<LocalTime> ToLocalTime(this IArgument argument) Parameters Type Name Description IArgument argument The argument. Returns Type Description Nullable < NodaTime.LocalTime > ToTimeZone(LocalTime, DateTimeZone, DateTimeZone) Converts this local time into a zoned date time for the target time zone. It assumes today as the starting point. If the local time is before today, then it returns the time the next day. Declaration public static ZonedDateTime ToTimeZone(this LocalTime localTime, DateTimeZone source, DateTimeZone target) Parameters Type Name Description NodaTime.LocalTime localTime The local time. NodaTime.DateTimeZone source The source time zone the local time is assumed to be in. NodaTime.DateTimeZone target The target time zone. Returns Type Description NodaTime.ZonedDateTime ToTimeZone(LocalTime, DateTimeZone, DateTimeZone, Instant) Converts this local time into a zoned date time for the target time zone. It assumes today as the starting point. If the local time is before today, then it returns the time the next day. Declaration public static ZonedDateTime ToTimeZone(this LocalTime localTime, DateTimeZone source, DateTimeZone target, Instant now) Parameters Type Name Description NodaTime.LocalTime localTime The local time. NodaTime.DateTimeZone source The source time zone the local time is assumed to be in. NodaTime.DateTimeZone target The target time zone. NodaTime.Instant now The current instance to use. Returns Type Description NodaTime.ZonedDateTime"
  },
  "reference/csharp/Serious.Abbot.Scripting.BotHttpClientExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.BotHttpClientExtensions.html",
    "title": "Class BotHttpClientExtensions | Abbot Docs",
    "keywords": "Class BotHttpClientExtensions Extension methods on IBotHttpClient to make it easy to request JSON. Inheritance Object BotHttpClientExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class BotHttpClientExtensions : Object Methods DeleteJsonAsync(IBotHttpClient, String) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> DeleteJsonAsync(this IBotHttpClient httpClient, string url) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. DeleteJsonAsync(IBotHttpClient, String, Headers) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> DeleteJsonAsync(this IBotHttpClient httpClient, string url, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Headers headers The HTTP headers to send. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. DeleteJsonAsync(IBotHttpClient, Uri) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> DeleteJsonAsync(this IBotHttpClient httpClient, Uri url) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. DeleteJsonAsync(IBotHttpClient, Uri, Headers) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> DeleteJsonAsync(this IBotHttpClient httpClient, Uri url, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Headers headers The HTTP headers to send. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. GetJsonAsync(IBotHttpClient, String) Makes an HTTP GET request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> GetJsonAsync(this IBotHttpClient httpClient, string url) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. GetJsonAsync(IBotHttpClient, String, Headers) Makes an HTTP GET request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> GetJsonAsync(this IBotHttpClient httpClient, string url, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Headers headers The HTTP headers to send. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. GetJsonAsync(IBotHttpClient, Uri) Makes an HTTP GET request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> GetJsonAsync(this IBotHttpClient httpClient, Uri url) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. GetJsonAsync(IBotHttpClient, Uri, Headers) Makes an HTTP GET request for the url and returns the JSON as a dynamic object. Declaration public static Task<dynamic> GetJsonAsync(this IBotHttpClient httpClient, Uri url, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Headers headers The HTTP headers to send. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. PostJsonAsync(IBotHttpClient, String, Object) Makes an HTTP POST request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PostJsonAsync(this IBotHttpClient httpClient, string url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Object content The content to send as JSON. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. PostJsonAsync(IBotHttpClient, String, Object, Headers) Makes an HTTP POST request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PostJsonAsync(this IBotHttpClient httpClient, string url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Object content The content to send as JSON. Headers headers The HTTP headers to send. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. PostJsonAsync(IBotHttpClient, Uri, Object) Makes an HTTP POST request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PostJsonAsync(this IBotHttpClient httpClient, Uri url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Object content The content to send as JSON. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. PostJsonAsync(IBotHttpClient, Uri, Object, Headers) Makes an HTTP POST request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PostJsonAsync(this IBotHttpClient httpClient, Uri url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Object content The content to send as JSON. Headers headers The HTTP headers to send. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. PutJsonAsync(IBotHttpClient, String, Object) Makes an HTTP PUT request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PutJsonAsync(this IBotHttpClient httpClient, string url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Object content The content to send as JSON. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. PutJsonAsync(IBotHttpClient, String, Object, Headers) Makes an HTTP PUT request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PutJsonAsync(this IBotHttpClient httpClient, string url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Object content The content to send as JSON. Headers headers The HTTP headers to send. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. PutJsonAsync(IBotHttpClient, Uri, Object) Makes an HTTP PUT request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PutJsonAsync(this IBotHttpClient httpClient, Uri url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Object content The content to send as JSON. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. PutJsonAsync(IBotHttpClient, Uri, Object, Headers) Makes an HTTP PUT request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<dynamic> PutJsonAsync(this IBotHttpClient httpClient, Uri url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Object content The content to send as JSON. Headers headers The HTTP headers to send. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON."
  },
  "reference/csharp/Serious.Abbot.Scripting.BotHttpClientStaticExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.BotHttpClientStaticExtensions.html",
    "title": "Class BotHttpClientStaticExtensions | Abbot Docs",
    "keywords": "Class BotHttpClientStaticExtensions Extension methods on IBotHttpClient to make it easy to request JSON and deserialize it to a static type. Inheritance Object BotHttpClientStaticExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class BotHttpClientStaticExtensions : Object Methods DeleteJsonAsAsync<TResponse>(IBotHttpClient, String) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<TResponse> DeleteJsonAsAsync<TResponse>(this IBotHttpClient httpClient, string url) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse DeleteJsonAsAsync<TResponse>(IBotHttpClient, String, Headers) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<TResponse> DeleteJsonAsAsync<TResponse>(this IBotHttpClient httpClient, string url, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Headers headers The HTTP headers to send. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse DeleteJsonAsAsync<TResponse>(IBotHttpClient, Uri) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<TResponse> DeleteJsonAsAsync<TResponse>(this IBotHttpClient httpClient, Uri url) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse DeleteJsonAsAsync<TResponse>(IBotHttpClient, Uri, Headers) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<TResponse> DeleteJsonAsAsync<TResponse>(this IBotHttpClient httpClient, Uri url, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Headers headers The HTTP headers to send. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse GetJsonAsAsync<TResponse>(IBotHttpClient, String) Makes an HTTP GET request for the url and returns the JSON as the specified type. Declaration public static Task<TResponse> GetJsonAsAsync<TResponse>(this IBotHttpClient httpClient, string url) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse GetJsonAsAsync<TResponse>(IBotHttpClient, String, Headers) Makes an HTTP GET request for the url and returns the JSON as the specified type. Declaration public static Task<TResponse> GetJsonAsAsync<TResponse>(this IBotHttpClient httpClient, string url, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Headers headers The HTTP headers to send. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse GetJsonAsAsync<TResponse>(IBotHttpClient, Uri) Makes an HTTP GET request for the url and returns the JSON as the specified type. Declaration public static Task<TResponse> GetJsonAsAsync<TResponse>(this IBotHttpClient httpClient, Uri url) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse GetJsonAsAsync<TResponse>(IBotHttpClient, Uri, Headers) Makes an HTTP GET request for the url and returns the JSON as the specified type. Declaration public static Task<TResponse> GetJsonAsAsync<TResponse>(this IBotHttpClient httpClient, Uri url, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Headers headers The HTTP headers to send. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse PatchJsonAsAsync<TResponse>(IBotHttpClient, String, Object) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<TResponse> PatchJsonAsAsync<TResponse>(this IBotHttpClient httpClient, string url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Object content The content to patch. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse PatchJsonAsAsync<TResponse>(IBotHttpClient, String, Object, Headers) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<TResponse> PatchJsonAsAsync<TResponse>(this IBotHttpClient httpClient, string url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Object content The content to patch. Headers headers The HTTP headers to send. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse PatchJsonAsAsync<TResponse>(IBotHttpClient, Uri, Object) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<TResponse> PatchJsonAsAsync<TResponse>(this IBotHttpClient httpClient, Uri url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Object content The content to patch. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse PatchJsonAsAsync<TResponse>(IBotHttpClient, Uri, Object, Headers) Makes an HTTP DELETE request for the url and returns the JSON as a dynamic object. Declaration public static Task<TResponse> PatchJsonAsAsync<TResponse>(this IBotHttpClient httpClient, Uri url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Object content The content to patch. Headers headers The HTTP headers to send. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse PostJsonAsAsync<TResponse>(IBotHttpClient, String, Object) Makes an HTTP POST request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<TResponse> PostJsonAsAsync<TResponse>(this IBotHttpClient httpClient, string url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Object content The content to send as JSON. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse PostJsonAsAsync<TResponse>(IBotHttpClient, String, Object, Headers) Makes an HTTP POST request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<TResponse> PostJsonAsAsync<TResponse>(this IBotHttpClient httpClient, string url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Object content The content to send as JSON. Headers headers The HTTP headers to send. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse PostJsonAsAsync<TResponse>(IBotHttpClient, Uri, Object) Makes an HTTP POST request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<TResponse> PostJsonAsAsync<TResponse>(this IBotHttpClient httpClient, Uri url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Object content The content to send as JSON. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse PostJsonAsAsync<TResponse>(IBotHttpClient, Uri, Object, Headers) Makes an HTTP POST request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<TResponse> PostJsonAsAsync<TResponse>(this IBotHttpClient httpClient, Uri url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Object content The content to send as JSON. Headers headers The HTTP headers to send. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse PutJsonAsAsync<TResponse>(IBotHttpClient, String, Object) Makes an HTTP PUT request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<TResponse> PutJsonAsAsync<TResponse>(this IBotHttpClient httpClient, string url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Object content The content to send as JSON. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse PutJsonAsAsync<TResponse>(IBotHttpClient, String, Object, Headers) Makes an HTTP PUT request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<TResponse> PutJsonAsAsync<TResponse>(this IBotHttpClient httpClient, string url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. String url The url to request. Object content The content to send as JSON. Headers headers The HTTP headers to send. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse PutJsonAsAsync<TResponse>(IBotHttpClient, Uri, Object) Makes an HTTP PUT request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<TResponse> PutJsonAsAsync<TResponse>(this IBotHttpClient httpClient, Uri url, object content) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Object content The content to send as JSON. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse PutJsonAsAsync<TResponse>(IBotHttpClient, Uri, Object, Headers) Makes an HTTP PUT request for the url, sends the content as JSON, and returns the JSON as a dynamic object. Declaration public static Task<TResponse> PutJsonAsAsync<TResponse>(this IBotHttpClient httpClient, Uri url, object content, Headers headers) Parameters Type Name Description IBotHttpClient httpClient The IBotHttpClient instance. Uri url The url to request. Object content The content to send as JSON. Headers headers The HTTP headers to send. Returns Type Description Task <TResponse> A from the returned JSON. Type Parameters Name Description TResponse"
  },
  "reference/csharp/Serious.Abbot.Scripting.BrainExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.BrainExtensions.html",
    "title": "Class BrainExtensions | Abbot Docs",
    "keywords": "Class BrainExtensions Useful methods for working with Abbot's brain. Inheritance Object BrainExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class BrainExtensions : Object Methods AddToHashSetAsync<T>(IBrain, String, T) Adds the specified item to a HashSet{T} stored in the brain associated with the specified key . Declaration public static Task<bool> AddToHashSetAsync<T>(this IBrain brain, string key, T item) Parameters Type Name Description IBrain brain The Bot brain. This is where skills can store and retrieve information. String key The key of the list. T item The item to add to the list. Returns Type Description Task < Boolean > true if the element is added to the HashSet{T} ; false if the element is already present. Type Parameters Name Description T Remarks This retrieves the set stored for the key. If there is none, it creates one. Then adds the item to the set, and then writes the set back to the brain. AddToListAsync<T>(IBrain, String, T) Adds the specified item to a List{T} stored in the brain. Behind the scenes this retrieves the list stored for the key. If there is none, it creates one. Then adds the item to the list, and then writes the list back to the brain. Declaration public static Task<List<T>> AddToListAsync<T>(this IBrain brain, string key, T item) Parameters Type Name Description IBrain brain The Bot brain. This is where skills can store and retrieve information. String key The key of the list. T item The item to add to the list. Returns Type Description Task < List <T>> Returns the List{T} associated to the key with the added item . Type Parameters Name Description T GetHashSetAsync<T>(IBrain, String) Gets a HashSet{T} from the brain. If it does not exist, returns a new HashSet{T} . Declaration public static Task<HashSet<T>> GetHashSetAsync<T>(this IBrain brain, string key) Parameters Type Name Description IBrain brain The brain String key The key Returns Type Description Task < HashSet <T>> Returns the HashSet{T} associated with the key Type Parameters Name Description T GetListAsync<T>(IBrain, String) Gets a List{T} from the brain. If it does not exist, returns a new List{T} . Declaration public static Task<List<T>> GetListAsync<T>(this IBrain brain, string key) Parameters Type Name Description IBrain brain The brain String key The key Returns Type Description Task < List <T>> Returns the List{T} associated with the key Type Parameters Name Description T RemoveAtFromListAsync<T>(IBrain, String, Int32) Removes an item by index from a List{T} stored in the brain associated with the specified key . Declaration public static Task<bool> RemoveAtFromListAsync<T>(this IBrain brain, string key, int index) Parameters Type Name Description IBrain brain The Bot brain. This is where skills can store and retrieve information. String key The key of the list. Int32 index The item to add to the list. Returns Type Description Task < Boolean > true if item is successfully removed; otherwise, false . This method also returns false if index is out of range. Type Parameters Name Description T Remarks This retrieves the list stored for the key. If there is none, it returns immediately. Otherwise it removes the specified item from the list. RemoveFromHashSetAsync<T>(IBrain, String, T) Removes the specified item from a HashSet{T} stored in the brain associated with the specified key . Declaration public static Task<bool> RemoveFromHashSetAsync<T>(this IBrain brain, string key, T item) Parameters Type Name Description IBrain brain The Bot brain. This is where skills can store and retrieve information. String key The key of the list. T item The item to remove from the list. Returns Type Description Task < Boolean > true if item is successfully removed; otherwise, false . This method also returns false if the item is not in the HashSet{T} . Type Parameters Name Description T Remarks This retrieves the set stored for the key. If there is none, it returns false. Then it removes the item from the set and writes the set back to the brain. RemoveFromListAsync<T>(IBrain, String, T) Removes the specified item from a List{T} stored in the brain associated with the specified key . Declaration public static Task<bool> RemoveFromListAsync<T>(this IBrain brain, string key, T item) Parameters Type Name Description IBrain brain The Bot brain. This is where skills can store and retrieve information. String key The key of the list. T item The item to add to the list. Returns Type Description Task < Boolean > true if item is successfully removed; otherwise, false . This method also returns false if item was not found in the List. Type Parameters Name Description T Remarks This retrieves the list stored for the key. If there is none, it returns immediately. Otherwise it removes the specified item from the list."
  },
  "reference/csharp/Serious.Abbot.Scripting.Button.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.Button.html",
    "title": "Class Button | Abbot Docs",
    "keywords": "Class Button A button presented to a user. Inheritance Object Button Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class Button : Object Constructors Button(String) Creates an instance of a button. Declaration public Button(string title) Parameters Type Name Description String title The text of the button. Button(String, String) Creates an instance of a button. Declaration public Button(string title, string arguments) Parameters Type Name Description String title The text of the button. String arguments The value passed back when the button is clicked. Button(String, String, ButtonStyle) Creates an instance of a button. Declaration public Button(string title, string arguments, ButtonStyle style) Parameters Type Name Description String title The text of the button. String arguments The value passed back when the button is selected. Serious.Slack.BlockKit.ButtonStyle style The style for the button (Slack only). Properties Arguments The value passed back to the skill when this button is clicked. Declaration public string Arguments { get; } Property Value Type Description String Style The style for the button. This only works with Slack at the moment. Declaration public ButtonStyle Style { get; } Property Value Type Description Serious.Slack.BlockKit.ButtonStyle Title The text displayed on the button. Declaration public string Title { get; } Property Value Type Description String"
  },
  "reference/csharp/Serious.Abbot.Scripting.ChatAddress.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ChatAddress.html",
    "title": "Class ChatAddress | Abbot Docs",
    "keywords": "Class ChatAddress Represents an address to which messages can be sent. Inheritance Object ChatAddress Implements IEquatable < ChatAddress > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public sealed class ChatAddress : ValueType Constructors ChatAddress(ChatAddressType, String, String, String, String) Represents an address to which messages can be sent. Declaration public ChatAddress(ChatAddressType Type, string Id, string ThreadId = null, string MessageId = null, string EphemeralUser = null) Parameters Type Name Description ChatAddressType Type A ChatAddressType indicating the type of the conversation referenced by the Id String Id The ID of a conversation (User/Room) to send to. String ThreadId An optional ID indicating a thread within the User/Room conversation indicated by the Id String MessageId An optional ID indicating a message within the User/Room conversation indicated by the Id String EphemeralUser An optional slack user id indicating a user to send an ephemeral message to. This is only valid if ChatAddressType is Room . Properties EphemeralUser An optional slack user id indicating a user to send an ephemeral message to. This is only valid if ChatAddressType is Room . Declaration public string EphemeralUser { get; set; } Property Value Type Description String Id The ID of a conversation (User/Room) to send to. Declaration public string Id { get; set; } Property Value Type Description String MessageId An optional ID indicating a message within the User/Room conversation indicated by the Id Declaration public string MessageId { get; set; } Property Value Type Description String ThreadId An optional ID indicating a thread within the User/Room conversation indicated by the Id Declaration public string ThreadId { get; set; } Property Value Type Description String Type A ChatAddressType indicating the type of the conversation referenced by the Id Declaration public ChatAddressType Type { get; set; } Property Value Type Description ChatAddressType Methods Deconstruct(out ChatAddressType, out String, out String, out String, out String) Declaration public void Deconstruct(out ChatAddressType Type, out string Id, out string ThreadId, out string MessageId, out string EphemeralUser) Parameters Type Name Description ChatAddressType Type String Id String ThreadId String MessageId String EphemeralUser Equals(ChatAddress) Declaration public bool Equals(ChatAddress other) Parameters Type Name Description ChatAddress other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 ToString() Produces a string representation of the ChatAddress . Declaration public override string ToString() Returns Type Description String Remarks We don't parse this anywhere. It's just for display. Operators Equality(ChatAddress, ChatAddress) Declaration public static bool operator ==(ChatAddress left, ChatAddress right) Parameters Type Name Description ChatAddress left ChatAddress right Returns Type Description Boolean Inequality(ChatAddress, ChatAddress) Declaration public static bool operator !=(ChatAddress left, ChatAddress right) Parameters Type Name Description ChatAddress left ChatAddress right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.ChatAddressType.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ChatAddressType.html",
    "title": "Class ChatAddressType | Abbot Docs",
    "keywords": "Class ChatAddressType For internal use only. Inheritance Object ChatAddressType Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public sealed class ChatAddressType : Enum Fields Room The ChatAddress refers to a room ID. Declaration public const ChatAddressType Room Field Value Type Description ChatAddressType User The ChatAddress refers to a user (for which a DM conversation must be created). Declaration public const ChatAddressType User Field Value Type Description ChatAddressType value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "reference/csharp/Serious.Abbot.Scripting.ChatConversationInfo.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ChatConversationInfo.html",
    "title": "Class ChatConversationInfo | Abbot Docs",
    "keywords": "Class ChatConversationInfo Information about a conversation. Inheritance Object ChatConversationInfo Implements IEquatable < ChatConversationInfo > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class ChatConversationInfo : Object Constructors ChatConversationInfo(ChatConversationInfo) Declaration protected ChatConversationInfo(ChatConversationInfo original) Parameters Type Name Description ChatConversationInfo original ChatConversationInfo(String, String, String) Information about a conversation. Declaration public ChatConversationInfo(string Id, string FirstMessageId, string Title) Parameters Type Name Description String Id The database id of the conversation. String FirstMessageId The platform-specific message Id of the first message in the conversation. String Title The title of the conversation. Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type FirstMessageId The platform-specific message Id of the first message in the conversation. Declaration public string FirstMessageId { get; set; } Property Value Type Description String Id The database id of the conversation. Declaration public string Id { get; set; } Property Value Type Description String Title The title of the conversation. Declaration public string Title { get; set; } Property Value Type Description String Methods <Clone>$() Declaration public virtual ChatConversationInfo <Clone>$() Returns Type Description ChatConversationInfo Deconstruct(out String, out String, out String) Declaration public void Deconstruct(out string Id, out string FirstMessageId, out string Title) Parameters Type Name Description String Id String FirstMessageId String Title Equals(ChatConversationInfo) Declaration public virtual bool Equals(ChatConversationInfo other) Parameters Type Name Description ChatConversationInfo other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(ChatConversationInfo, ChatConversationInfo) Declaration public static bool operator ==(ChatConversationInfo left, ChatConversationInfo right) Parameters Type Name Description ChatConversationInfo left ChatConversationInfo right Returns Type Description Boolean Inequality(ChatConversationInfo, ChatConversationInfo) Declaration public static bool operator !=(ChatConversationInfo left, ChatConversationInfo right) Parameters Type Name Description ChatConversationInfo left ChatConversationInfo right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.ChatUserExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ChatUserExtensions.html",
    "title": "Class ChatUserExtensions | Abbot Docs",
    "keywords": "Class ChatUserExtensions Useful extensions to the IChatUser . Inheritance Object ChatUserExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class ChatUserExtensions : Object Methods GetLocalDateTime(IChatUser) Retrieve the current local date and time for the chat user. Declaration public static Nullable<ZonedDateTime> GetLocalDateTime(this IChatUser chatUser) Parameters Type Name Description IChatUser chatUser The user. Returns Type Description Nullable < NodaTime.ZonedDateTime > The local time if the timezone is known, otherwise returns null. GetLocalTime(IChatUser) Retrieve the current local time for the chat user. Declaration public static Nullable<LocalTime> GetLocalTime(this IChatUser chatUser) Parameters Type Name Description IChatUser chatUser The user. Returns Type Description Nullable < NodaTime.LocalTime > The local time if the timezone is known, otherwise returns null."
  },
  "reference/csharp/Serious.Abbot.Scripting.CustomerClientExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.CustomerClientExtensions.html",
    "title": "Class CustomerClientExtensions | Abbot Docs",
    "keywords": "Class CustomerClientExtensions Extensions for ICustomersClient . Inheritance Object CustomerClientExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class CustomerClientExtensions : Object Methods GetUsageStatsAsync(ICustomersClient, CustomerInfo) Retrieves usage stats for the specified customer. Declaration public static Task<AbbotResponse<CustomerUsageStats>> GetUsageStatsAsync(this ICustomersClient customersClient, CustomerInfo customer) Parameters Type Name Description ICustomersClient customersClient The customers client. CustomerInfo customer The customer. Returns Type Description Task < AbbotResponse < CustomerUsageStats >>"
  },
  "reference/csharp/Serious.Abbot.Scripting.CustomerInfo.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.CustomerInfo.html",
    "title": "Class CustomerInfo | Abbot Docs",
    "keywords": "Class CustomerInfo Information about a customer. Inheritance Object CustomerInfo Implements IEquatable < CustomerInfo > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class CustomerInfo : Object Constructors CustomerInfo() Declaration public CustomerInfo() CustomerInfo(CustomerInfo) Declaration protected CustomerInfo(CustomerInfo original) Parameters Type Name Description CustomerInfo original Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Id The database Id for the customer. Declaration public int Id { get; set; } Property Value Type Description Int32 Metadata Custom metadata associated with this customer. Declaration public IReadOnlyDictionary<string, string> Metadata { get; set; } Property Value Type Description IReadOnlyDictionary < String , String > Name The name of the customer. Declaration public string Name { get; set; } Property Value Type Description String Rooms Information about a room. Declaration public IReadOnlyList<IRoom> Rooms { get; set; } Property Value Type Description IReadOnlyList < IRoom > Tags The set of tags applied to this room. Declaration public IReadOnlyList<string> Tags { get; set; } Property Value Type Description IReadOnlyList < String > Methods <Clone>$() Declaration public virtual CustomerInfo <Clone>$() Returns Type Description CustomerInfo Equals(CustomerInfo) Declaration public virtual bool Equals(CustomerInfo other) Parameters Type Name Description CustomerInfo other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(CustomerInfo, CustomerInfo) Declaration public static bool operator ==(CustomerInfo left, CustomerInfo right) Parameters Type Name Description CustomerInfo left CustomerInfo right Returns Type Description Boolean Inequality(CustomerInfo, CustomerInfo) Declaration public static bool operator !=(CustomerInfo left, CustomerInfo right) Parameters Type Name Description CustomerInfo left CustomerInfo right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.CustomerRequest.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.CustomerRequest.html",
    "title": "Class CustomerRequest | Abbot Docs",
    "keywords": "Class CustomerRequest Used to create or update a customer. Inheritance Object CustomerRequest Implements IEquatable < CustomerRequest > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class CustomerRequest : Object Constructors CustomerRequest() Declaration public CustomerRequest() CustomerRequest(CustomerRequest) Declaration protected CustomerRequest(CustomerRequest original) Parameters Type Name Description CustomerRequest original Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Name The name of the customer. Declaration public string Name { get; set; } Property Value Type Description String Rooms The channels to assign to this customer. Declaration public IReadOnlyList<string> Rooms { get; set; } Property Value Type Description IReadOnlyList < String > Segments The set of customer segments to associate with this customer. If any do not exist, they'll be created. Declaration public IReadOnlyList<string> Segments { get; set; } Property Value Type Description IReadOnlyList < String > Tags THIS IS OBSOLETE. Use Segments instead! Declaration public IReadOnlyList<string> Tags { get; set; } Property Value Type Description IReadOnlyList < String > Methods <Clone>$() Declaration public virtual CustomerRequest <Clone>$() Returns Type Description CustomerRequest Equals(CustomerRequest) Declaration public virtual bool Equals(CustomerRequest other) Parameters Type Name Description CustomerRequest other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(CustomerRequest, CustomerRequest) Declaration public static bool operator ==(CustomerRequest left, CustomerRequest right) Parameters Type Name Description CustomerRequest left CustomerRequest right Returns Type Description Boolean Inequality(CustomerRequest, CustomerRequest) Declaration public static bool operator !=(CustomerRequest left, CustomerRequest right) Parameters Type Name Description CustomerRequest left CustomerRequest right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.CustomerUsageStats.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.CustomerUsageStats.html",
    "title": "Class CustomerUsageStats | Abbot Docs",
    "keywords": "Class CustomerUsageStats Some usage stats for the customer. Inheritance Object CustomerUsageStats Implements IEquatable < CustomerUsageStats > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class CustomerUsageStats : Object Constructors CustomerUsageStats(CustomerUsageStats) Declaration protected CustomerUsageStats(CustomerUsageStats original) Parameters Type Name Description CustomerUsageStats original CustomerUsageStats(IReadOnlyList<TagFrequencyInfo>, TrendsSummary, InsightsSummaryInfo, LocalDate, LocalDate) Some usage stats for the customer. Declaration public CustomerUsageStats(IReadOnlyList<TagFrequencyInfo> TopTags, TrendsSummary TrendSummary, InsightsSummaryInfo InsightsSummary, LocalDate StartDate, LocalDate EndDate) Parameters Type Name Description IReadOnlyList < TagFrequencyInfo > TopTags The top tags used by the customer. TrendsSummary TrendSummary Summary information about trends. InsightsSummaryInfo InsightsSummary Summary information about conversations. NodaTime.LocalDate StartDate Start date. NodaTime.LocalDate EndDate End date. Properties EndDate End date. Declaration public LocalDate EndDate { get; set; } Property Value Type Description NodaTime.LocalDate EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type InsightsSummary Summary information about conversations. Declaration public InsightsSummaryInfo InsightsSummary { get; set; } Property Value Type Description InsightsSummaryInfo StartDate Start date. Declaration public LocalDate StartDate { get; set; } Property Value Type Description NodaTime.LocalDate TopTags The top tags used by the customer. Declaration public IReadOnlyList<TagFrequencyInfo> TopTags { get; set; } Property Value Type Description IReadOnlyList < TagFrequencyInfo > TrendSummary Summary information about trends. Declaration public TrendsSummary TrendSummary { get; set; } Property Value Type Description TrendsSummary Methods <Clone>$() Declaration public virtual CustomerUsageStats <Clone>$() Returns Type Description CustomerUsageStats Deconstruct(out IReadOnlyList<TagFrequencyInfo>, out TrendsSummary, out InsightsSummaryInfo, out LocalDate, out LocalDate) Declaration public void Deconstruct(out IReadOnlyList<TagFrequencyInfo> TopTags, out TrendsSummary TrendSummary, out InsightsSummaryInfo InsightsSummary, out LocalDate StartDate, out LocalDate EndDate) Parameters Type Name Description IReadOnlyList < TagFrequencyInfo > TopTags TrendsSummary TrendSummary InsightsSummaryInfo InsightsSummary NodaTime.LocalDate StartDate NodaTime.LocalDate EndDate Equals(CustomerUsageStats) Declaration public virtual bool Equals(CustomerUsageStats other) Parameters Type Name Description CustomerUsageStats other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(CustomerUsageStats, CustomerUsageStats) Declaration public static bool operator ==(CustomerUsageStats left, CustomerUsageStats right) Parameters Type Name Description CustomerUsageStats left CustomerUsageStats right Returns Type Description Boolean Inequality(CustomerUsageStats, CustomerUsageStats) Declaration public static bool operator !=(CustomerUsageStats left, CustomerUsageStats right) Parameters Type Name Description CustomerUsageStats left CustomerUsageStats right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.Headers.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.Headers.html",
    "title": "Class Headers | Abbot Docs",
    "keywords": "Class Headers A collection of HTTP headers Inheritance Object Headers Implements IEnumerable < KeyValuePair < String , String >> IEnumerable Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class Headers : Object Constructors Headers() Constructs an instance of Headers Declaration public Headers() Headers(IDictionary<String, String>) Constructs an instance of Headers Declaration public Headers(IDictionary<string, string> headers) Parameters Type Name Description IDictionary < String , String > headers A dictionary of initial header values Properties Item[String] Retrieves the header with the specified key. Declaration public string this[string key] { get; set; } Parameters Type Name Description String key The header name Property Value Type Description String Methods Add(String, String) Adds a header to the collection. Declaration public void Add(string key, string value) Parameters Type Name Description String key Header name String value Header value CopyTo(HttpRequestHeaders) Copies the headers into a HttpRequestHeaders collection. Declaration public void CopyTo(HttpRequestHeaders headers) Parameters Type Name Description HttpRequestHeaders headers GetEnumerator() Gets the enumerator for this collection. Declaration public IEnumerator<KeyValuePair<string, string>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair < String , String >> The enumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "reference/csharp/Serious.Abbot.Scripting.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.html",
    "title": "Namespace Serious.Abbot.Scripting | Abbot Docs",
    "keywords": "Namespace Serious.Abbot.Scripting Classes ArgumentExtensions Extensions to IArgument to make it easier to work with arguments. BotHttpClientExtensions Extension methods on IBotHttpClient to make it easy to request JSON. BotHttpClientStaticExtensions Extension methods on IBotHttpClient to make it easy to request JSON and deserialize it to a static type. BrainExtensions Useful methods for working with Abbot's brain. Button A button presented to a user. ChatAddress Represents an address to which messages can be sent. ChatAddressType For internal use only. ChatConversationInfo Information about a conversation. ChatUserExtensions Useful extensions to the IChatUser . CustomerClientExtensions Extensions for ICustomersClient . CustomerInfo Information about a customer. CustomerRequest Used to create or update a customer. CustomerUsageStats Some usage stats for the customer. Headers A collection of HTTP headers InsightsStats Represents statistics for the insights page. InsightsSummaryInfo Contains summary counts for the Insights page. MessageOptions Options to customize how a message is sent. MessageTarget Represents an arbitrary chat conversation. MetadataFieldInfo A metadata field defined for an organization. PatternType How a pattern or signal should be used to match incoming messages. PlatformType The type of chat platform. RecognizerExtensions Useful extensions for Microsoft.Recognizers ReplyExtensions Set of extension methods to make replying easier. ReplyInThreadMessageTarget Represents a reply to a message in a thread. ResponderGroup A set of responders. RoomMetadataUpdate Used to update room metadata. RoomNotification A notification to send to a room's responders. RoomRole The roles a user can be assigned to in a room. RoomsClientExtensions Useful extensions to IRoomsClient StringValues Represents zero/null, one, or many strings in an efficient way. StringValues.Enumerator Enumerates the string values of a StringValues . TagFrequencyInfo Information about the number of times a tag has been used. TaskItemInfo Information about a task. TaskItemStatus The status of a Task. TaskRequest Used to create or update a task. Threshold<T> Represents a threshold with a warning and critical level TimexConstants Helper constants for Timex types. The original definitions are in Microsoft.Recognizers.Text.DataTypes.TimexExpression.Constants.TimexTypes ( https://github.com/microsoft/Recognizers-Text/blob/45897758e92d2bf2bf0fc398e8c6461a2f7d1d38/.NET/Microsoft.Recognizers.Text.DataTypes.TimexExpression/Constants.cs#L44 ) But they are static strings, which cannot be used in switch statements. This is due to be fixed upstream but the PR hasn't merged yet TimexSet TrendsSummary Response time summaries. UserProfileField Provides detailed information about a user profile field, as returned from the Users client. WorkingHours A set of working hours. Interfaces IArgument Represents one argument tokenized from the Bot.Arguments property. IArguments Represents the arguments to the skill parsed into a collection of tokens. IBot It's Abbot! Provides context and a set of services and information for your bot skill. IBotHttpClient A simple HTTP client to make requests. IBrain Used to store information specific to your bot skill. IChatUser A user on the chat platform. IConversation Represents an Abbot Managed Conversation. ICoordinate Represents a geographic coordinate. ICustomersClient Used to manage customers. IFormCollection Contains the parsed form values. IHttpCollection Represents Http collections such as query string, form, and headers. IHttpTriggerEvent Represents an incoming http request that triggered a skill. IHttpTriggerResponse Gives some control over the response to an HTTP trigger request. Useful for webhooks. IInt32Argument Represents an argument that can be parsed into an integer. ILocation A geo-coded location. IMentionArgument Represents an argument that is a user mention. IMessage Represents a message in the chat platform. IMessageTarget A target to which messages can be sent. This could be a User, Channel, Thread, etc. IMissingArgument Represents a missing argument. IOriginalArgument Represents one argument tokenized from the Bot.Arguments property with the original potentially quoted value stored.. IPattern The pattern that caused a skill to be invoked. Most skills are called by name. For example, by mentioning Abbot followed by the skill name, or by using the shortcut character followed by the skill name. For example, .help calls the help skill. A pattern is another way a skill can be called. When a message that is NOT an Abbot command matches a skill's pattern, the skill is called with the message as the arguments. This interface describes such a pattern. IQueryCollection The HttpRequest query string collection IRequestHeaders Represents the collection of Request Headers as defined in RFC 2616. IResponseHeaders Represents the collection of Response Headers as defined in RFC 2616. IResponseSettings Settings related to conversation tracking response times and responders. IResult The result of an operation that could fail. If it fails, Ok will be false and Error will contain the reason for the failure. IResult<TValue> The result of an operation to retrieve a value that could fail. IRoom Represents a chat room (channel in Slack parlance). IRoomArgument Represents an argument that is a room mention (for example #room-name in Slack). IRoomDetails Detailed information about a chat room such as the first responders, the escalation responders, response times settings, etc. IRoomInfo Information about a chat room (Slack only at this time). IRoomMessageTarget Represents a chat room \"message target\", which is essentially an IRoom but only contains the ID of the room, making it suitable for sending to with To . IRoomsClient Used to manage Slack conversations. IRootSourceSkill The skill that is the root source of a signal. This is the skill that kicked off the current signal chain. IScriptGlobals The global object for all user skills. ISecrets Used to retrieve secrets stored for the skill. ISignalEvent A signal raised by a skill. ISignalSource Information about the source of a signal. ISkillDataItem Represents a piece of data stored for a skill. ISlack Provides methods to send Block Kit replies back to Slack. Methods of this class only work when the skill is responding to Slack. ISourceSkill Information about the source skill that raised a signal. ITasksClient Used to manage tasks. ITicketsClient Used to reply with a message to open a ticket. IUserDetails Provides detailed information about a user, as returned from the Users client. IUserMessageTarget Represents a chat user \"message target\", which is essentially an IChatUser but only contains the ID of the user, making it suitable for sending to with To . IVersionInfo Provides info about Abbot. IWorker Represents a person that has working hours and a timezone."
  },
  "reference/csharp/Serious.Abbot.Scripting.IArgument.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IArgument.html",
    "title": "Interface IArgument | Abbot Docs",
    "keywords": "Interface IArgument Represents one argument tokenized from the Bot.Arguments property. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IArgument Properties Value The value of the argument sans quotes. Declaration string Value { get; } Property Value Type Description String Extension Methods ArgumentExtensions.ToLocalTime(IArgument) ArgumentExtensions.ToInt32(IArgument)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IArguments.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IArguments.html",
    "title": "Interface IArguments | Abbot Docs",
    "keywords": "Interface IArguments Represents the arguments to the skill parsed into a collection of tokens. Inherited Members IArgument.Value Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IArguments : IArgument Properties Item[Range] Indexes a range of arguments into a new IArguments collection. Declaration IArguments this[Range range] { get; } Parameters Type Name Description Range range The range to grab. Property Value Type Description IArguments The resulting IArguments . Methods Deconstruct(out IArgument, out IArgument) Deconstructs the arguments into two arguments. If there are less than two arguments, this will return IMissingArgument for the missing arguments. If there are more than two arguments, the last argument will be a concatenation of the remaining arguments. Declaration void Deconstruct(out IArgument first, out IArgument second) Parameters Type Name Description IArgument first The first argument. IArgument second The second argument. Deconstruct(out IArgument, out IArgument, out IArgument) Deconstructs the arguments into three arguments. If there are less than three arguments, this will return IMissingArgument for the missing arguments. If there are more than three arguments, the last argument will be a concatenation of the remaining arguments. Declaration void Deconstruct(out IArgument first, out IArgument second, out IArgument third) Parameters Type Name Description IArgument first The first argument. IArgument second The second argument. IArgument third The third argument. Deconstruct(out IArgument, out IArgument, out IArgument, out IArgument) Deconstructs the arguments into four arguments. If there are less than four arguments, this will return IMissingArgument for the missing arguments. If there are more than four arguments, the last argument will be a concatenation of the remaining arguments. Declaration void Deconstruct(out IArgument first, out IArgument second, out IArgument third, out IArgument fourth) Parameters Type Name Description IArgument first The first argument. IArgument second The second argument. IArgument third The third argument. IArgument fourth The fourth argument. Deconstruct(out IArgument, out IArgument, out IArgument, out IArgument, out IArgument) Deconstructs the arguments into five arguments. If there are less than five arguments, this will return IMissingArgument for the missing arguments. If there are more than five arguments, the last argument will be a concatenation of the remaining arguments. Declaration void Deconstruct(out IArgument first, out IArgument second, out IArgument third, out IArgument fourth, out IArgument fifth) Parameters Type Name Description IArgument first The first argument. IArgument second The second argument. IArgument third The third argument. IArgument fourth The fourth argument. IArgument fifth The fifth argument. Deconstruct(out IArgument, out IArgument, out IArgument, out IArgument, out IArgument, out IArgument) Deconstructs the arguments into six arguments. If there are less than six arguments, this will return IMissingArgument for the missing arguments. If there are more than five arguments, the last argument will be a concatenation of the remaining arguments. Declaration void Deconstruct(out IArgument first, out IArgument second, out IArgument third, out IArgument fourth, out IArgument fifth, out IArgument sixth) Parameters Type Name Description IArgument first The first argument. IArgument second The second argument. IArgument third The third argument. IArgument fourth The fourth argument. IArgument fifth The fifth argument. IArgument sixth The sixth FindAndRemove(Predicate<IArgument>) Retrieves the first argument from the collection that matches the condition, and returns that argument and the rest of the arguments as an IArguments collection. If the condition is not meant, IMissingArgument will be returned. Declaration (IArgument, IArguments) FindAndRemove(Predicate<IArgument> condition) Parameters Type Name Description Predicate < IArgument > condition Returns Type Description (, ) < IArgument , IArguments > Pop() Pops the first argument from the collection as the skill name, and returns the rest of the arguments as an IArguments collection. Declaration (string, IArguments) Pop() Returns Type Description (, ) < String , IArguments > Skip(Int32) Skips the specified number of arguments and returns the rest as an IArguments collection. Declaration IArguments Skip(int count) Parameters Type Name Description Int32 count The number of elements to skip. Returns Type Description IArguments Slice(Int32, Int32) Slices the arguments into a new IArguments collection. Declaration IArguments Slice(int start, int length) Parameters Type Name Description Int32 start The start index. Int32 length The number of elements to slice. Returns Type Description IArguments The resulting IArguments ."
  },
  "reference/csharp/Serious.Abbot.Scripting.IBot.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IBot.html",
    "title": "Interface IBot | Abbot Docs",
    "keywords": "Interface IBot It's Abbot! Provides context and a set of services and information for your bot skill. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IBot Properties Arguments The arguments supplied to the skill. Does not include the skill name. Declaration IArguments Arguments { get; } Property Value Type Description IArguments Brain Stores information specific to your bot skill. Declaration IBrain Brain { get; } Property Value Type Description IBrain CommandText The exact command text provided to the skill, without argument extraction. Declaration string CommandText { get; } Property Value Type Description String Conversation The current IConversation . If the skill was invoked by a message within a conversation, or by a signal raised within a conversation, this value will be non- null . If this skill was not invoked as part of a conversation, this value will be null . Declaration IConversation Conversation { get; } Property Value Type Description IConversation Customer The customer the room this skill is responding to belongs to. Declaration CustomerInfo Customer { get; } Property Value Type Description CustomerInfo Customers Used to manage customers. Declaration ICustomersClient Customers { get; } Property Value Type Description ICustomersClient From The user that invoked the skill. Declaration IChatUser From { get; } Property Value Type Description IChatUser Http A convenience service for making HTTP requests. Declaration IBotHttpClient Http { get; } Property Value Type Description IBotHttpClient Id The platform specific identifier for the bot. For example, in Slack this is the Slack User Id. Declaration string Id { get; } Property Value Type Description String IsChat If true, the skill is responding to a chat message. Declaration bool IsChat { get; } Property Value Type Description Boolean IsInteraction If true, the skill is responding to the user interacting with a UI element in chat such as clicking on a button. Declaration bool IsInteraction { get; } Property Value Type Description Boolean IsPatternMatch If true, the skill is responding to a chat message because it matched a pattern, not because it was directly called. Declaration bool IsPatternMatch { get; } Property Value Type Description Boolean IsPlaybook If true, the skill is being called by a playbook Declaration bool IsPlaybook { get; } Property Value Type Description Boolean IsRequest If true, the skill is responding to an HTTP trigger request. The request information can be accessed via the Request property. Declaration bool IsRequest { get; } Property Value Type Description Boolean Mentions The mentioned users (if any). Declaration IReadOnlyList<IChatUser> Mentions { get; } Property Value Type Description IReadOnlyList < IChatUser > Message The message that triggered this skill, if it was triggered by a message or a reaction to a message. Declaration IMessage Message { get; } Property Value Type Description IMessage MessageId The platform-specific ID of the message that triggered this skill, if it was triggered by a message. Declaration string MessageId { get; } Property Value Type Description String MessageUrl The URL to the message that triggered this skill, if it was triggered by a message. Declaration Uri MessageUrl { get; } Property Value Type Description Uri Metadata Used to manage the set of metadata fields for your organization. Declaration IMetadataClient Metadata { get; } Property Value Type Description IMetadataClient Name The name of the Bot. Typically Abbot, but the bot can be renamed in your chat platform settings. Declaration string Name { get; } Property Value Type Description String Outputs When called by a playbook (aka IsPlaybook is true ), this provides outputs that can be consumed by the next step of the playbook. Declaration IDictionary<string, object> Outputs { get; } Property Value Type Description IDictionary < String , Object > Pattern If the skill is responding to a pattern match, then this contains information about the pattern that matched the incoming message and caused this skill to be called. Otherwise this is null. Declaration IPattern Pattern { get; } Property Value Type Description IPattern PlatformId The ID of the team or organization on the platform. For example, the Slack team id. Declaration string PlatformId { get; } Property Value Type Description String PlatformType Slack. Always Slack. Declaration virtual PlatformType PlatformType { get; } Property Value Type Description PlatformType Request If IsRequest is true, then the skill is responding to an HTTP trigger request (instead of a chat message) and this property is populated with the incoming request information. Declaration IHttpTriggerEvent Request { get; } Property Value Type Description IHttpTriggerEvent Response Sets properties of the HTTP response when the skill is called by an HTTP trigger request. Properties may only be set when IsRequest is true. Declaration IHttpTriggerResponse Response { get; } Property Value Type Description IHttpTriggerResponse Room The room (or channel) this skill is responding to. Declaration IRoom Room { get; } Property Value Type Description IRoom Rooms Used to manage Slack conversations. Declaration IRoomsClient Rooms { get; } Property Value Type Description IRoomsClient RuntimeDescription Gets a string that describes the version of the .NET runtime that the skill is running on. Declaration string RuntimeDescription { get; } Property Value Type Description String Secrets Retrieves secrets needed by your skill such as API tokens, etc. Secrets are set in the Skill Editor. Declaration ISecrets Secrets { get; } Property Value Type Description ISecrets SignalEvent The ISignalEvent signal that this source skill is responding to, if any. Declaration ISignalEvent SignalEvent { get; } Property Value Type Description ISignalEvent SkillName The name of the skill. Declaration string SkillName { get; } Property Value Type Description String SkillUrl The URL to the skill editor for the skill. Declaration Uri SkillUrl { get; } Property Value Type Description Uri Tasks Used to manage tasks. Declaration ITasksClient Tasks { get; } Property Value Type Description ITasksClient Thread Gets an IMessageTarget that sends a message to the thread in which this message was posted. If this message is a top-level message, sending to this conversation will start a new thread. Declaration IMessageTarget Thread { get; } Property Value Type Description IMessageTarget Tickets Used to reply with a message to open a ticket. Declaration ITicketsClient Tickets { get; } Property Value Type Description ITicketsClient TimeZone The system timezone of the bot. Declaration DateTimeZone TimeZone { get; } Property Value Type Description NodaTime.DateTimeZone Users Used to retrieve information about Slack users. Declaration IUsersClient Users { get; } Property Value Type Description IUsersClient Utilities A useful grab bag of utility methods for C# skill authors. Declaration IUtilities Utilities { get; } Property Value Type Description IUtilities VersionInfo Gets information about the version of Abbot the skill is running on. Declaration IVersionInfo VersionInfo { get; } Property Value Type Description IVersionInfo Methods ReplyAsync(String) Sends a reply to the chat. Declaration Task ReplyAsync(string text) Parameters Type Name Description String text The reply message. Returns Type Description Task ReplyAsync(String, MessageOptions) Sends a message to the user or room specified by the MessageOptions (Slack Only). Declaration Task ReplyAsync(string text, MessageOptions options) Parameters Type Name Description String text The reply message. MessageOptions options Options for sending the message, such as the target conversation/thread, etc. Returns Type Description Task ReplyAsync(String, Boolean) Sends a private message to the user that called the skill (Slack Only). Declaration Task ReplyAsync(string text, bool directMessage) Parameters Type Name Description String text The reply message. Boolean directMessage If true , the reply is sent as a direct message Returns Type Description Task ReplyLaterAsync(String, Int64) Sends the reply later. Declaration Task ReplyLaterAsync(string text, long delayInSeconds) Parameters Type Name Description String text The reply message. Int64 delayInSeconds How long to wait before the reply shows up. Returns Type Description Task ReplyLaterAsync(String, Int64, MessageOptions) Sends the reply later. Declaration Task ReplyLaterAsync(string text, long delayInSeconds, MessageOptions options) Parameters Type Name Description String text The reply message. Int64 delayInSeconds How long to wait before the reply shows up. MessageOptions options Options for sending the message, such as the target conversation/thread, etc. Returns Type Description Task ReplyLaterAsync(String, TimeSpan) Sends the reply later. Declaration Task ReplyLaterAsync(string text, TimeSpan timeSpan) Parameters Type Name Description String text The reply message. TimeSpan timeSpan How long to wait before the reply shows up. Returns Type Description Task ReplyLaterAsync(String, TimeSpan, MessageOptions) Sends the reply later. Declaration Task ReplyLaterAsync(string text, TimeSpan timeSpan, MessageOptions options) Parameters Type Name Description String text The reply message. TimeSpan timeSpan How long to wait before the reply shows up. MessageOptions options Options for sending the message, such as the target conversation/thread, etc. Returns Type Description Task ReplyTableAsync<T>(IEnumerable<T>) Replies with the collection as a nicely formatted text table. Declaration Task ReplyTableAsync<T>(IEnumerable<T> items) Parameters Type Name Description IEnumerable <T> items The items to print out Returns Type Description Task Type Parameters Name Description T Remarks Uses the properties of T for the columns. Each item in items is a row. ReplyTableAsync<T>(IEnumerable<T>, MessageOptions) Replies with the collection as a nicely formatted text table. Declaration Task ReplyTableAsync<T>(IEnumerable<T> items, MessageOptions options) Parameters Type Name Description IEnumerable <T> items The items to print out MessageOptions options Options for sending the message, such as the target conversation/thread, etc. Returns Type Description Task Type Parameters Name Description T Remarks Uses the properties of T for the columns. Each item in items is a row. ReplyWithButtonsAsync(String, IEnumerable<Button>) Sends a reply along with a set of buttons. Clicking a button will call back into this skill. Declaration Task ReplyWithButtonsAsync(string text, IEnumerable<Button> buttons) Parameters Type Name Description String text The reply message. IEnumerable < Button > buttons The set of buttons to display (Maximum 6). Returns Type Description Task ReplyWithButtonsAsync(String, IEnumerable<Button>, MessageOptions) Sends a reply along with a set of buttons. Clicking a button will call back into this skill. Declaration Task ReplyWithButtonsAsync(string text, IEnumerable<Button> buttons, MessageOptions options) Parameters Type Name Description String text The reply message. IEnumerable < Button > buttons The set of buttons to display (Maximum 6). MessageOptions options Options for sending the message, such as the target conversation/thread, etc. Returns Type Description Task ReplyWithButtonsAsync(String, IEnumerable<Button>, String, Uri, String) Sends a reply along with a set of buttons. Clicking a button will call back into this skill. Declaration Task ReplyWithButtonsAsync(string text, IEnumerable<Button> buttons, string buttonsLabel, Uri imageUrl, string title) Parameters Type Name Description String text The reply message. IEnumerable < Button > buttons The set of buttons to display (Maximum 6). String buttonsLabel (optional) The text that serves as a label for the set of buttons. Uri imageUrl (optional) An image to render before the set of buttons. String title (optional) A title to render Returns Type Description Task ReplyWithButtonsAsync(String, IEnumerable<Button>, String, Uri, String, MessageOptions) Sends a reply along with a set of buttons. Clicking a button will call back into this skill. Declaration Task ReplyWithButtonsAsync(string text, IEnumerable<Button> buttons, string buttonsLabel, Uri imageUrl, string title, MessageOptions options) Parameters Type Name Description String text The reply message. IEnumerable < Button > buttons The set of buttons to display (Maximum 6). String buttonsLabel (optional) The text that serves as a label for the set of buttons. Uri imageUrl (optional) An image to render before the set of buttons. String title (optional) A title to render MessageOptions options Options for sending the message, such as the target conversation/thread, etc. Returns Type Description Task ReplyWithButtonsAsync(String, IEnumerable<Button>, String, Uri, String, String) Sends a reply along with a set of buttons. Clicking a button will call back into this skill. Declaration Task ReplyWithButtonsAsync(string text, IEnumerable<Button> buttons, string buttonsLabel, Uri imageUrl, string title, string color) Parameters Type Name Description String text The reply message. IEnumerable < Button > buttons The set of buttons to display (Maximum 6). String buttonsLabel (optional) The text that serves as a label for the set of buttons. Uri imageUrl (optional) An image to render before the set of buttons. String title (optional) A title to render String color The color to use for the sidebar (Slack Only) in hex (ex. #3AA3E3). Returns Type Description Task ReplyWithButtonsAsync(String, IEnumerable<Button>, String, Uri, String, String, MessageOptions) Sends a reply along with a set of buttons. Clicking a button will call back into this skill. Declaration Task ReplyWithButtonsAsync(string text, IEnumerable<Button> buttons, string buttonsLabel, Uri imageUrl, string title, string color, MessageOptions options) Parameters Type Name Description String text The reply message. IEnumerable < Button > buttons The set of buttons to display (Maximum 6). String buttonsLabel (optional) The text that serves as a label for the set of buttons. Uri imageUrl (optional) An image to render before the set of buttons. String title (optional) A title to render String color The color to use for the sidebar (Slack Only) in hex (ex. #3AA3E3). MessageOptions options Options for sending the message, such as the target conversation/thread, etc. Returns Type Description Task ReplyWithImageAsync(String, String, String, Uri, String, MessageOptions) Sends a reply along with an image attachment. The image can be a URL to an image or a base64 encoded image. Declaration Task ReplyWithImageAsync(string image, string text = null, string title = null, Uri titleUrl = null, string color = null, MessageOptions options = null) Parameters Type Name Description String image Either the URL to an image or the base64 encoded image. String text The reply message. String title (optional) A title to render for the image. Uri titleUrl (optional) If specified, makes the title a link to this URL. Ignored if title is not set or if image is a base64 encoded image. String color The color to use for the sidebar in hex (ex. #3AA3E3). Ignored if image is a base64 encoded image. MessageOptions options Options for sending the message, such as the target conversation/thread, etc. Returns Type Description Task SignalAsync(String, String) Raises a signal from the skill with the specified name and arguments. Declaration Task<IResult> SignalAsync(string name, string arguments) Parameters Type Name Description String name The name of the signal. String arguments The arguments to pass to the skills that are subscribed to this signal. Returns Type Description Task < IResult > A IResult that indicates whether the operation succeeded or not."
  },
  "reference/csharp/Serious.Abbot.Scripting.IBotHttpClient.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IBotHttpClient.html",
    "title": "Interface IBotHttpClient | Abbot Docs",
    "keywords": "Interface IBotHttpClient A simple HTTP client to make requests. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IBotHttpClient Methods ScrapeAllAsync(Uri, String) Requests the specified url and returns an HtmlAgilityPack.HtmlNode with all sections of the HTML that match the selector. This uses the HtmlAgilityPack under the hood. Declaration Task<IReadOnlyList<HtmlNode>> ScrapeAllAsync(Uri url, string selector) Parameters Type Name Description Uri url String selector Returns Type Description Task < IReadOnlyList < HtmlAgilityPack.HtmlNode >> An HtmlAgilityPack.HtmlNode with the section of the web page. ScrapeAsync(Uri, String) Requests the specified url and returns an HtmlAgilityPack.HtmlNode with the first section of the HTML that matches the selector. This uses the HtmlAgilityPack under the hood. Declaration Task<HtmlNode> ScrapeAsync(Uri url, string selector) Parameters Type Name Description Uri url String selector Returns Type Description Task < HtmlAgilityPack.HtmlNode > An HtmlAgilityPack.HtmlNode with the section of the web page. SendJsonAsAsync<TResponse>(Uri, HttpMethod, Object, Headers) Makes an HTTP request sending the optional content and returns JSON as a dynamic object. Declaration Task<AbbotResponse<TResponse>> SendJsonAsAsync<TResponse>(Uri url, HttpMethod httpMethod, object content, Headers headers) Parameters Type Name Description Uri url The url to request. HttpMethod httpMethod The HTTP method of the request Object content The content to send as JSON. Headers headers The HTTP headers to send. Returns Type Description Task < AbbotResponse <TResponse>> A dynamic object with the structure of the returned JSON. Type Parameters Name Description TResponse SendJsonAsync(Uri, HttpMethod, Object, Headers) Makes an HTTP request sending the optional content and returns JSON as a dynamic object. Declaration Task<dynamic> SendJsonAsync(Uri url, HttpMethod httpMethod, object content, Headers headers) Parameters Type Name Description Uri url The url to request. HttpMethod httpMethod The HTTP method of the request Object content The content to send as JSON. Headers headers The HTTP headers to send. Returns Type Description Task < Object > A dynamic object with the structure of the returned JSON. Extension Methods BotHttpClientExtensions.GetJsonAsync(IBotHttpClient, String) BotHttpClientExtensions.GetJsonAsync(IBotHttpClient, Uri) BotHttpClientExtensions.GetJsonAsync(IBotHttpClient, String, Headers) BotHttpClientExtensions.GetJsonAsync(IBotHttpClient, Uri, Headers) BotHttpClientExtensions.PostJsonAsync(IBotHttpClient, String, Object) BotHttpClientExtensions.PostJsonAsync(IBotHttpClient, Uri, Object) BotHttpClientExtensions.PostJsonAsync(IBotHttpClient, String, Object, Headers) BotHttpClientExtensions.PostJsonAsync(IBotHttpClient, Uri, Object, Headers) BotHttpClientExtensions.PutJsonAsync(IBotHttpClient, String, Object) BotHttpClientExtensions.PutJsonAsync(IBotHttpClient, Uri, Object) BotHttpClientExtensions.PutJsonAsync(IBotHttpClient, String, Object, Headers) BotHttpClientExtensions.PutJsonAsync(IBotHttpClient, Uri, Object, Headers) BotHttpClientExtensions.DeleteJsonAsync(IBotHttpClient, String) BotHttpClientExtensions.DeleteJsonAsync(IBotHttpClient, Uri) BotHttpClientExtensions.DeleteJsonAsync(IBotHttpClient, String, Headers) BotHttpClientExtensions.DeleteJsonAsync(IBotHttpClient, Uri, Headers) BotHttpClientStaticExtensions.GetJsonAsAsync<TResponse>(IBotHttpClient, String) BotHttpClientStaticExtensions.GetJsonAsAsync<TResponse>(IBotHttpClient, Uri) BotHttpClientStaticExtensions.GetJsonAsAsync<TResponse>(IBotHttpClient, String, Headers) BotHttpClientStaticExtensions.GetJsonAsAsync<TResponse>(IBotHttpClient, Uri, Headers) BotHttpClientStaticExtensions.PostJsonAsAsync<TResponse>(IBotHttpClient, String, Object) BotHttpClientStaticExtensions.PostJsonAsAsync<TResponse>(IBotHttpClient, Uri, Object) BotHttpClientStaticExtensions.PostJsonAsAsync<TResponse>(IBotHttpClient, String, Object, Headers) BotHttpClientStaticExtensions.PostJsonAsAsync<TResponse>(IBotHttpClient, Uri, Object, Headers) BotHttpClientStaticExtensions.PutJsonAsAsync<TResponse>(IBotHttpClient, String, Object) BotHttpClientStaticExtensions.PutJsonAsAsync<TResponse>(IBotHttpClient, Uri, Object) BotHttpClientStaticExtensions.PutJsonAsAsync<TResponse>(IBotHttpClient, String, Object, Headers) BotHttpClientStaticExtensions.PutJsonAsAsync<TResponse>(IBotHttpClient, Uri, Object, Headers) BotHttpClientStaticExtensions.DeleteJsonAsAsync<TResponse>(IBotHttpClient, String) BotHttpClientStaticExtensions.DeleteJsonAsAsync<TResponse>(IBotHttpClient, Uri) BotHttpClientStaticExtensions.DeleteJsonAsAsync<TResponse>(IBotHttpClient, String, Headers) BotHttpClientStaticExtensions.DeleteJsonAsAsync<TResponse>(IBotHttpClient, Uri, Headers) BotHttpClientStaticExtensions.PatchJsonAsAsync<TResponse>(IBotHttpClient, String, Object) BotHttpClientStaticExtensions.PatchJsonAsAsync<TResponse>(IBotHttpClient, Uri, Object) BotHttpClientStaticExtensions.PatchJsonAsAsync<TResponse>(IBotHttpClient, String, Object, Headers) BotHttpClientStaticExtensions.PatchJsonAsAsync<TResponse>(IBotHttpClient, Uri, Object, Headers)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IBrain.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IBrain.html",
    "title": "Interface IBrain | Abbot Docs",
    "keywords": "Interface IBrain Used to store information specific to your bot skill. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IBrain Methods DeleteAsync(String) Deletes the stored item associated with the key. Declaration Task DeleteAsync(string key) Parameters Type Name Description String key key of the stored item to delete. Returns Type Description Task A task that represents the work queued to execute. GetAllAsync(String) Retrieves all the values Declaration Task<IReadOnlyList<ISkillDataItem>> GetAllAsync(string fuzzyKeyFilter = null) Parameters Type Name Description String fuzzyKeyFilter An optional fuzzy filter used to filter values Returns Type Description Task < IReadOnlyList < ISkillDataItem >> A task with all the stored data for this skill. GetAsAsync<T>(String) Gets an item from the brain and casts it to T . Returns null if it does not exist. Declaration Task<T> GetAsAsync<T>(string key) Parameters Type Name Description String key key of the item to read. Returns Type Description Task <T> A task with the stored value associated with the key. Type Parameters Name Description T GetAsAsync<T>(String, T) Gets an item from the brain and casts it to T . Returns defaultValue if it does not exist. Declaration Task<T> GetAsAsync<T>(string key, T defaultValue) Parameters Type Name Description String key key of the item to read. T defaultValue The value to return if the key is missing from storage. Returns Type Description Task <T> A task with the stored value associated with the key. Type Parameters Name Description T GetAsync(String) Reads a storage item from the brain. Declaration Task<dynamic> GetAsync(string key) Parameters Type Name Description String key key of the item to read. Returns Type Description Task < Object > A task with the stored value associated with the key. GetKeysAsync(String) Retrieves all of the stored keys. Declaration Task<IReadOnlyList<string>> GetKeysAsync(string fuzzyKeyFilter = null) Parameters Type Name Description String fuzzyKeyFilter Returns Type Description Task < IReadOnlyList < String >> A task with a list of all stored keys. WriteAsync(String, Object) Writes the specified value to the brain. It overwrites an existing item. Declaration Task WriteAsync(string key, object value) Parameters Type Name Description String key key of the item to store. Object value The item to store. Returns Type Description Task A task that represents the work queued to execute. Extension Methods BrainExtensions.AddToListAsync<T>(IBrain, String, T) BrainExtensions.AddToHashSetAsync<T>(IBrain, String, T) BrainExtensions.RemoveFromListAsync<T>(IBrain, String, T) BrainExtensions.RemoveAtFromListAsync<T>(IBrain, String, Int32) BrainExtensions.RemoveFromHashSetAsync<T>(IBrain, String, T) BrainExtensions.GetListAsync<T>(IBrain, String) BrainExtensions.GetHashSetAsync<T>(IBrain, String)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IChatUser.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IChatUser.html",
    "title": "Interface IChatUser | Abbot Docs",
    "keywords": "Interface IChatUser A user on the chat platform. Inherited Members IUserMessageTarget.GetThread(String) IUserMessageTarget.Id IMessageTarget.Address IWorker.WorkingHours IWorker.TimeZone Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IChatUser : IUserMessageTarget, IMessageTarget, IWorker Properties Email The user's email, if known. Declaration string Email { get; } Property Value Type Description String Location The location of the user, if anything is known about their location. Declaration ILocation Location { get; } Property Value Type Description ILocation Name The display name for the user if known. Otherwise the username. Declaration string Name { get; } Property Value Type Description String Remarks For Slack, this is profile.real_name if available, UserName . UserName The username for the user on the platform. Note that in some platforms this can be changed by the user at any time. If you're storing information related to a user, always use the Id property to identify a user. Declaration string UserName { get; } Property Value Type Description String Remarks For Slack, this is the username provided to us by Bot Service, which can be wrong if the user has since changed their username. We need to use the Slack API the first time we create the user to get their real username. Extension Methods ChatUserExtensions.GetLocalTime(IChatUser) ChatUserExtensions.GetLocalDateTime(IChatUser) ReplyExtensions.Format(IChatUser)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IConversation.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IConversation.html",
    "title": "Interface IConversation | Abbot Docs",
    "keywords": "Interface IConversation Represents an Abbot Managed Conversation. Inherited Members IMessageTarget.Address Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IConversation : IMessageTarget Properties Created The time at which the first message was posted to this conversation. Declaration DateTimeOffset Created { get; } Property Value Type Description DateTimeOffset Id The ID of the conversation. NOTE: Do not rely on the specific format of this value as it may change in the future. Declaration string Id { get; } Property Value Type Description String LastMessagePostedOn The time at which the last message was posted to this conversation. Declaration DateTimeOffset LastMessagePostedOn { get; } Property Value Type Description DateTimeOffset Members A list of IChatUser objects representing the users who are participating in the conversation Declaration IReadOnlyList<IChatUser> Members { get; } Property Value Type Description IReadOnlyList < IChatUser > Room The IRoom in which the conversation is taking place. Declaration IRoom Room { get; } Property Value Type Description IRoom StartedBy The IChatUser who started this conversation. Declaration IChatUser StartedBy { get; } Property Value Type Description IChatUser Title The title of the conversation Declaration string Title { get; } Property Value Type Description String WebUrl Gets the URL for the view of this conversation on Abbot's web interface. Only users of the workspace in which this conversation is taking place will be able to view this link, but it is safe to show it to non-workspace members. Declaration Uri WebUrl { get; } Property Value Type Description Uri"
  },
  "reference/csharp/Serious.Abbot.Scripting.ICoordinate.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ICoordinate.html",
    "title": "Interface ICoordinate | Abbot Docs",
    "keywords": "Interface ICoordinate Represents a geographic coordinate. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ICoordinate Properties Latitude The latitude. Those are the lines that are the belts of the earth. Declaration double Latitude { get; } Property Value Type Description Double Longitude The longitude. Those are the pin stripes of the earth. Declaration double Longitude { get; } Property Value Type Description Double Methods Deconstruct(out Double, out Double) Deconstructs a coordinate into its latitude and longitude. Declaration void Deconstruct(out double latitude, out double longitude) Parameters Type Name Description Double latitude The latitude. Double longitude The longitude."
  },
  "reference/csharp/Serious.Abbot.Scripting.ICustomersClient.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ICustomersClient.html",
    "title": "Interface ICustomersClient | Abbot Docs",
    "keywords": "Interface ICustomersClient Used to manage customers. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ICustomersClient Methods CreateAsync(CustomerRequest) Creates a Room and returns the created Id of the room. Declaration Task<AbbotResponse<CustomerInfo>> CreateAsync(CustomerRequest customerRequest) Parameters Type Name Description CustomerRequest customerRequest Information used to create a customer. Returns Type Description Task < AbbotResponse < CustomerInfo >> A IResult that indicates whether the operation succeeded or not and contains information about the created customer. GetAllAsync() Gets all the customers in your org. Declaration Task<AbbotResponse<IReadOnlyList<CustomerInfo>>> GetAllAsync() Returns Type Description Task < AbbotResponse < IReadOnlyList < CustomerInfo >>> A IResult that indicates whether the operation succeeded or not and contains information about the set of customers in the org. GetAsync(Int32) Gets the customer with the specified Id. Declaration Task<AbbotResponse<CustomerInfo>> GetAsync(int id) Parameters Type Name Description Int32 id Returns Type Description Task < AbbotResponse < CustomerInfo >> A IResult that indicates whether the operation succeeded or not and contains information about the customer. GetByNameAsync(String) Gets the customer with the specified name. Declaration Task<AbbotResponse<CustomerInfo>> GetByNameAsync(string name) Parameters Type Name Description String name Returns Type Description Task < AbbotResponse < CustomerInfo >> A IResult that indicates whether the operation succeeded or not and contains information about the customer. GetUsageStatsAsync(Int32) Retrieves usage stats for the specified customer. Declaration Task<AbbotResponse<CustomerUsageStats>> GetUsageStatsAsync(int id) Parameters Type Name Description Int32 id The customer id. Returns Type Description Task < AbbotResponse < CustomerUsageStats >> UpdateAsync(Int32, CustomerRequest) Creates a Room and returns the created Id of the room. Declaration Task<AbbotResponse<CustomerInfo>> UpdateAsync(int id, CustomerRequest customerRequest) Parameters Type Name Description Int32 id The Id of the customer to update. CustomerRequest customerRequest Information used to create a customer. Returns Type Description Task < AbbotResponse < CustomerInfo >> A IResult that indicates whether the operation succeeded or not and contains information about the updated customer. Extension Methods CustomerClientExtensions.GetUsageStatsAsync(ICustomersClient, CustomerInfo)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IFormCollection.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IFormCollection.html",
    "title": "Interface IFormCollection | Abbot Docs",
    "keywords": "Interface IFormCollection Contains the parsed form values. Inherited Members IHttpCollection.ContainsKey(String) IHttpCollection.TryGetValue(String, StringValues) IHttpCollection.Keys IHttpCollection.Values Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IFormCollection : IHttpCollection Properties Item[String] Gets the value with the specified key. Declaration StringValues this[string key] { get; } Parameters Type Name Description String key The key of the value to get. Property Value Type Description StringValues The element with the specified key, or StringValues.Empty if the key is not present. Remarks IHttpCollection has a different indexer contract than IDictionary{TKey,TValue} , as it will return StringValues.Empty for missing entries rather than throwing an Exception. Exceptions Type Condition ArgumentNullException key is null."
  },
  "reference/csharp/Serious.Abbot.Scripting.IHttpCollection.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IHttpCollection.html",
    "title": "Interface IHttpCollection | Abbot Docs",
    "keywords": "Interface IHttpCollection Represents Http collections such as query string, form, and headers. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IHttpCollection Properties Keys Gets an ICollection<T> containing the keys of the IHttpCollection . Declaration ICollection<string> Keys { get; } Property Value Type Description ICollection < String > An ICollection<T> containing the keys of the object that implements IHttpCollection . Values Gets an ICollection<T> containing the values of the IHttpCollection . Declaration ICollection<StringValues> Values { get; } Property Value Type Description ICollection < StringValues > An ICollection<T> containing the values of the object that implements IHttpCollection . Methods ContainsKey(String) Determines whether the IHttpCollection contains an element with the specified key. Declaration bool ContainsKey(string key) Parameters Type Name Description String key The key to locate in the IHttpCollection . Returns Type Description Boolean true if the IHttpCollection contains an element with the key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null. TryGetValue(String, out StringValues) Gets the value associated with the specified key. Declaration bool TryGetValue(string key, out StringValues value) Parameters Type Name Description String key The key of the value to get. StringValues value The key of the value to get. When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description Boolean true if the object that implements IHttpCollection contains an element with the specified key; otherwise, false. Exceptions Type Condition ArgumentNullException key is null."
  },
  "reference/csharp/Serious.Abbot.Scripting.IHttpTriggerEvent.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IHttpTriggerEvent.html",
    "title": "Interface IHttpTriggerEvent | Abbot Docs",
    "keywords": "Interface IHttpTriggerEvent Represents an incoming http request that triggered a skill. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IHttpTriggerEvent Properties ContentType The content type of the body, if any. Declaration string ContentType { get; } Property Value Type Description String Form The request body as a form. Declaration IFormCollection Form { get; } Property Value Type Description IFormCollection Headers The incoming request headers. Declaration IRequestHeaders Headers { get; } Property Value Type Description IRequestHeaders HttpMethod The HTTP Method of the request. Declaration HttpMethod HttpMethod { get; } Property Value Type Description HttpMethod IsForm Returns true if this request contains a form body as determined by the content type. Declaration bool IsForm { get; } Property Value Type Description Boolean IsJson Returns true if this request contains a Json body as determined by the content type. Declaration bool IsJson { get; } Property Value Type Description Boolean Query The query string parameters as a collection. Declaration IQueryCollection Query { get; } Property Value Type Description IQueryCollection RawBody The raw body of the HTTP request. Declaration string RawBody { get; } Property Value Type Description String Url The skill's trigger URL that triggered this event. Declaration Uri Url { get; } Property Value Type Description Uri Methods DeserializeBody() Deserializes the incoming request body into a dynamic object. Declaration dynamic DeserializeBody() Returns Type Description Object The incoming request body deserialized as a dynamic object. Exceptions Type Condition InvalidOperationException Thrown if the request is not Json. Check the IsJson property first. DeserializeBodyAs<T>() Deserializes the incoming request body into the specified type. Declaration T DeserializeBodyAs<T>() Returns Type Description T An instance of the type T or null. Type Parameters Name Description T The type to deserialize to. Exceptions Type Condition InvalidOperationException Thrown if the request is not Json. Check the IsJson property first."
  },
  "reference/csharp/Serious.Abbot.Scripting.IHttpTriggerResponse.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IHttpTriggerResponse.html",
    "title": "Interface IHttpTriggerResponse | Abbot Docs",
    "keywords": "Interface IHttpTriggerResponse Gives some control over the response to an HTTP trigger request. Useful for webhooks. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IHttpTriggerResponse Properties Content The content to return as the body of the response. This will be serialized as JSON. Cannot be set if RawContent is set. Declaration object Content { get; set; } Property Value Type Description Object ContentType The content type to use in the response. If null, Abbot will choose the best content type using content negotiation. Declaration string ContentType { get; set; } Property Value Type Description String Headers Represents the collection of Request Headers as defined in RFC 2616 that should be sent in the response to the HTTP trigger request. Declaration IResponseHeaders Headers { get; } Property Value Type Description IResponseHeaders RawContent The raw content to return as the body of the response. Cannot be set if Content is set. Declaration string RawContent { get; set; } Property Value Type Description String"
  },
  "reference/csharp/Serious.Abbot.Scripting.IInt32Argument.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IInt32Argument.html",
    "title": "Interface IInt32Argument | Abbot Docs",
    "keywords": "Interface IInt32Argument Represents an argument that can be parsed into an integer. Inherited Members IArgument.Value Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IInt32Argument : IArgument Properties Int32Value The integer value of the argument. Declaration int Int32Value { get; } Property Value Type Description Int32 Extension Methods ArgumentExtensions.ToLocalTime(IArgument) ArgumentExtensions.ToInt32(IArgument)"
  },
  "reference/csharp/Serious.Abbot.Scripting.ILocation.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ILocation.html",
    "title": "Interface ILocation | Abbot Docs",
    "keywords": "Interface ILocation A geo-coded location. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ILocation Properties Coordinate The coordinates of the location. Declaration ICoordinate Coordinate { get; } Property Value Type Description ICoordinate FormattedAddress The formatted address for the location. Declaration string FormattedAddress { get; } Property Value Type Description String TimeZone The timezone for the location, if it was retrieved. Declaration DateTimeZone TimeZone { get; } Property Value Type Description NodaTime.DateTimeZone"
  },
  "reference/csharp/Serious.Abbot.Scripting.IMentionArgument.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IMentionArgument.html",
    "title": "Interface IMentionArgument | Abbot Docs",
    "keywords": "Interface IMentionArgument Represents an argument that is a user mention. Inherited Members IArgument.Value Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IMentionArgument : IArgument Properties Mentioned The mentioned user. Declaration IChatUser Mentioned { get; } Property Value Type Description IChatUser Extension Methods ArgumentExtensions.ToLocalTime(IArgument) ArgumentExtensions.ToInt32(IArgument)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IMessage.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IMessage.html",
    "title": "Interface IMessage | Abbot Docs",
    "keywords": "Interface IMessage Represents a message in the chat platform. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IMessage Properties Author The author that sent the message. Declaration IChatUser Author { get; } Property Value Type Description IChatUser Id The platform-specific Id of the message. For Slack, this is the timestamp. Declaration string Id { get; } Property Value Type Description String Text The text of the message. Declaration string Text { get; } Property Value Type Description String ThreadId The thread id of the message, if it's in a thread. Declaration string ThreadId { get; } Property Value Type Description String Url The URL to the message. Declaration Uri Url { get; } Property Value Type Description Uri"
  },
  "reference/csharp/Serious.Abbot.Scripting.IMessageTarget.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IMessageTarget.html",
    "title": "Interface IMessageTarget | Abbot Docs",
    "keywords": "Interface IMessageTarget A target to which messages can be sent. This could be a User, Channel, Thread, etc. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IMessageTarget Properties Address Gets the ChatAddress used to reference this conversation. Declaration ChatAddress Address { get; } Property Value Type Description ChatAddress"
  },
  "reference/csharp/Serious.Abbot.Scripting.IMissingArgument.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IMissingArgument.html",
    "title": "Interface IMissingArgument | Abbot Docs",
    "keywords": "Interface IMissingArgument Represents a missing argument. Inherited Members IArgument.Value Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IMissingArgument : IArgument Extension Methods ArgumentExtensions.ToLocalTime(IArgument) ArgumentExtensions.ToInt32(IArgument)"
  },
  "reference/csharp/Serious.Abbot.Scripting.InsightsStats.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.InsightsStats.html",
    "title": "Class InsightsStats | Abbot Docs",
    "keywords": "Class InsightsStats Represents statistics for the insights page. Inheritance Object InsightsStats Implements IEquatable < InsightsStats > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class InsightsStats : Object Constructors InsightsStats(InsightsStats) Declaration protected InsightsStats(InsightsStats original) Parameters Type Name Description InsightsStats original InsightsStats(Int32, Int32, Int32, Int32, Int32) Represents statistics for the insights page. Declaration public InsightsStats(int WentOverdueCount, int OpenedCount, int NeededAttentionCount, int RespondedCount, int OpenedConversationsRoomCount) Parameters Type Name Description Int32 WentOverdueCount The count of conversations went overdue in the relevant period. Int32 OpenedCount The count of conversations created by foreign members in the relevant period. Int32 NeededAttentionCount The count of distinct conversations were in need of attention at any time during the period. Int32 RespondedCount The number of conversations in which a first-responder responded to the message during the relevant period. Int32 OpenedConversationsRoomCount Number of rooms in which conversations were opened during the relevant period. Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type NeededAttentionCount The count of distinct conversations were in need of attention at any time during the period. Declaration public int NeededAttentionCount { get; set; } Property Value Type Description Int32 OpenedConversationsRoomCount Number of rooms in which conversations were opened during the relevant period. Declaration public int OpenedConversationsRoomCount { get; set; } Property Value Type Description Int32 OpenedCount The count of conversations created by foreign members in the relevant period. Declaration public int OpenedCount { get; set; } Property Value Type Description Int32 RespondedCount The number of conversations in which a first-responder responded to the message during the relevant period. Declaration public int RespondedCount { get; set; } Property Value Type Description Int32 WentOverdueCount The count of conversations went overdue in the relevant period. Declaration public int WentOverdueCount { get; set; } Property Value Type Description Int32 Methods <Clone>$() Declaration public virtual InsightsStats <Clone>$() Returns Type Description InsightsStats Deconstruct(out Int32, out Int32, out Int32, out Int32, out Int32) Declaration public void Deconstruct(out int WentOverdueCount, out int OpenedCount, out int NeededAttentionCount, out int RespondedCount, out int OpenedConversationsRoomCount) Parameters Type Name Description Int32 WentOverdueCount Int32 OpenedCount Int32 NeededAttentionCount Int32 RespondedCount Int32 OpenedConversationsRoomCount Equals(InsightsStats) Declaration public virtual bool Equals(InsightsStats other) Parameters Type Name Description InsightsStats other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(InsightsStats, InsightsStats) Declaration public static bool operator ==(InsightsStats left, InsightsStats right) Parameters Type Name Description InsightsStats left InsightsStats right Returns Type Description Boolean Inequality(InsightsStats, InsightsStats) Declaration public static bool operator !=(InsightsStats left, InsightsStats right) Parameters Type Name Description InsightsStats left InsightsStats right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.InsightsSummaryInfo.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.InsightsSummaryInfo.html",
    "title": "Class InsightsSummaryInfo | Abbot Docs",
    "keywords": "Class InsightsSummaryInfo Contains summary counts for the Insights page. Inheritance Object InsightsSummaryInfo Implements IEquatable < InsightsSummaryInfo > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class InsightsSummaryInfo : Object Constructors InsightsSummaryInfo(InsightsSummaryInfo) Declaration protected InsightsSummaryInfo(InsightsSummaryInfo original) Parameters Type Name Description InsightsSummaryInfo original InsightsSummaryInfo(Int32, Int32, Int32, Int32, Int32, Int32) Contains summary counts for the Insights page. Declaration public InsightsSummaryInfo(int OverdueCount, int NeedsAttention, int RespondedCount, int OpenConversations, int TicketsCreated, int OpenedConversationsRoomCount) Parameters Type Name Description Int32 OverdueCount The number of distinct conversations that were in an overdue state during the period. Int32 NeedsAttention The number of distinct conversations that needed a response from a first-responder during the period. Int32 RespondedCount The number of distinct conversations that received a response from a first-responder during the period. Int32 OpenConversations The number of distinct conversations that were in an open state during the period. Int32 TicketsCreated The number of tickets opened from these conversations. Int32 OpenedConversationsRoomCount Number of rooms in which conversations were opened during the relevant period. Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type NeedsAttention The number of distinct conversations that needed a response from a first-responder during the period. Declaration public int NeedsAttention { get; set; } Property Value Type Description Int32 OpenConversations The number of distinct conversations that were in an open state during the period. Declaration public int OpenConversations { get; set; } Property Value Type Description Int32 OpenedConversationsRoomCount Number of rooms in which conversations were opened during the relevant period. Declaration public int OpenedConversationsRoomCount { get; set; } Property Value Type Description Int32 OverdueCount The number of distinct conversations that were in an overdue state during the period. Declaration public int OverdueCount { get; set; } Property Value Type Description Int32 RespondedCount The number of distinct conversations that received a response from a first-responder during the period. Declaration public int RespondedCount { get; set; } Property Value Type Description Int32 TicketsCreated The number of tickets opened from these conversations. Declaration public int TicketsCreated { get; set; } Property Value Type Description Int32 Methods <Clone>$() Declaration public virtual InsightsSummaryInfo <Clone>$() Returns Type Description InsightsSummaryInfo Deconstruct(out Int32, out Int32, out Int32, out Int32, out Int32, out Int32) Declaration public void Deconstruct(out int OverdueCount, out int NeedsAttention, out int RespondedCount, out int OpenConversations, out int TicketsCreated, out int OpenedConversationsRoomCount) Parameters Type Name Description Int32 OverdueCount Int32 NeedsAttention Int32 RespondedCount Int32 OpenConversations Int32 TicketsCreated Int32 OpenedConversationsRoomCount Equals(InsightsSummaryInfo) Declaration public virtual bool Equals(InsightsSummaryInfo other) Parameters Type Name Description InsightsSummaryInfo other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(InsightsSummaryInfo, InsightsSummaryInfo) Declaration public static bool operator ==(InsightsSummaryInfo left, InsightsSummaryInfo right) Parameters Type Name Description InsightsSummaryInfo left InsightsSummaryInfo right Returns Type Description Boolean Inequality(InsightsSummaryInfo, InsightsSummaryInfo) Declaration public static bool operator !=(InsightsSummaryInfo left, InsightsSummaryInfo right) Parameters Type Name Description InsightsSummaryInfo left InsightsSummaryInfo right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.IOriginalArgument.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IOriginalArgument.html",
    "title": "Interface IOriginalArgument | Abbot Docs",
    "keywords": "Interface IOriginalArgument Represents one argument tokenized from the Bot.Arguments property with the original potentially quoted value stored.. Inherited Members IArgument.Value Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IOriginalArgument : IArgument Properties OriginalText The original value of the argument, which may include quotes if it was quoted. Declaration string OriginalText { get; } Property Value Type Description String Extension Methods ArgumentExtensions.ToLocalTime(IArgument) ArgumentExtensions.ToInt32(IArgument)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IPattern.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IPattern.html",
    "title": "Interface IPattern | Abbot Docs",
    "keywords": "Interface IPattern The pattern that caused a skill to be invoked. Most skills are called by name. For example, by mentioning Abbot followed by the skill name, or by using the shortcut character followed by the skill name. For example, .help calls the help skill. A pattern is another way a skill can be called. When a message that is NOT an Abbot command matches a skill's pattern, the skill is called with the message as the arguments. This interface describes such a pattern. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IPattern Properties CaseSensitive Whether or not the pattern is case sensitive. By default, it is not. Declaration bool CaseSensitive { get; } Property Value Type Description Boolean Description An optional description of the pattern. Declaration string Description { get; } Property Value Type Description String Name A friendly name for the pattern. Declaration string Name { get; } Property Value Type Description String Pattern The pattern to match. Declaration string Pattern { get; } Property Value Type Description String PatternType The type of pattern. Declaration PatternType PatternType { get; } Property Value Type Description PatternType"
  },
  "reference/csharp/Serious.Abbot.Scripting.IQueryCollection.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IQueryCollection.html",
    "title": "Interface IQueryCollection | Abbot Docs",
    "keywords": "Interface IQueryCollection The HttpRequest query string collection Inherited Members IHttpCollection.ContainsKey(String) IHttpCollection.TryGetValue(String, StringValues) IHttpCollection.Keys IHttpCollection.Values Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IQueryCollection : IHttpCollection Properties Item[String] Gets the value with the specified key. Declaration StringValues this[string key] { get; } Parameters Type Name Description String key The key of the value to get. Property Value Type Description StringValues The element with the specified key, or StringValues.Empty if the key is not present. Remarks IHttpCollection has a different indexer contract than IDictionary<TKey,TValue> , as it will return StringValues.Empty for missing entries rather than throwing an Exception. Exceptions Type Condition ArgumentNullException key is null."
  },
  "reference/csharp/Serious.Abbot.Scripting.IRequestHeaders.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IRequestHeaders.html",
    "title": "Interface IRequestHeaders | Abbot Docs",
    "keywords": "Interface IRequestHeaders Represents the collection of Request Headers as defined in RFC 2616. Inherited Members IHttpCollection.ContainsKey(String) IHttpCollection.TryGetValue(String, StringValues) IHttpCollection.Keys IHttpCollection.Values Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IRequestHeaders : IHttpCollection Properties Accept Gets the value of the Accept request HTTP header. This header advertises which content types, expressed as MIME types, the client is able to understand. Declaration StringValues Accept { get; } Property Value Type Description StringValues Item[String] Gets the value with the specified key. Declaration StringValues this[string key] { get; } Parameters Type Name Description String key The key of the value to get. Property Value Type Description StringValues The element with the specified key, or StringValues.Empty if the key is not present. Remarks IHttpCollection has a different indexer contract than IDictionary<TKey,TValue> , as it will return StringValues.Empty for missing entries rather than throwing an Exception. Exceptions Type Condition ArgumentNullException key is null. Origin The Origin request header indicates where a request originates from. It doesn't include any path information, just the server name Declaration StringValues Origin { get; } Property Value Type Description StringValues Referrer Gets or sets the value of the Referer header. The address of the previous web page from which a link to the currently requested page was followed. This is not required to be set by a client. Declaration StringValues Referrer { get; } Property Value Type Description StringValues UserAgent Gets the User-Agent header. This is a characteristic string that allows the network protocol peers to identify the application type, operating system, software vendor or software version of the requesting software user agent. Declaration StringValues UserAgent { get; } Property Value Type Description StringValues WebHookRequestCallback The WebHook-Request-Callback header is OPTIONAL and augments the WebHook-Request-Origin header. It allows the delivery target to grant send permission asynchronously, via a simple HTTPS callback. Declaration StringValues WebHookRequestCallback { get; } Property Value Type Description StringValues WebHookRequestOrigin Sent to request permission to deliver a webhook from the specified origin. This is part of the HTTP 1.1 Web Hooks for Event Delivery - Version 1.0.1 specification: https://github.com/cloudevents/spec/blob/v1.0.1/http-webhook.md Declaration StringValues WebHookRequestOrigin { get; } Property Value Type Description StringValues WebHookRequestRate Sent to request permission to deliver a webhook at the specified rate. The rate is an integer indicating the number of requests per minute. This is part of the HTTP 1.1 Web Hooks for Event Delivery - Version 1.0.1 specification: https://github.com/cloudevents/spec/blob/v1.0.1/http-webhook.md Declaration Nullable<int> WebHookRequestRate { get; } Property Value Type Description Nullable < Int32 >"
  },
  "reference/csharp/Serious.Abbot.Scripting.IResponseHeaders.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IResponseHeaders.html",
    "title": "Interface IResponseHeaders | Abbot Docs",
    "keywords": "Interface IResponseHeaders Represents the collection of Response Headers as defined in RFC 2616. Inherited Members IHttpCollection.ContainsKey(String) IHttpCollection.TryGetValue(String, StringValues) IHttpCollection.Keys IHttpCollection.Values Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IResponseHeaders : IHttpCollection Properties Item[String] Gets or sets the value with the specified key. Declaration StringValues this[string key] { get; set; } Parameters Type Name Description String key The key of the value to get. Property Value Type Description StringValues The element with the specified key, or StringValues.Empty if the key is not present. Remarks IHttpCollection has a different indexer contract than IDictionary<TKey,TValue> , as it will return StringValues.Empty for missing entries rather than throwing an Exception. Exceptions Type Condition ArgumentNullException key is null. WebHookAllowedOrigin Indicates this trigger will allow WebHook requests from the specified origin in response to a validation request. This is part of the HTTP 1.1 Web Hooks for Event Delivery - Version 1.0.1 specification: https://github.com/cloudevents/spec/blob/v1.0.1/http-webhook.md#42-validation-response Declaration string WebHookAllowedOrigin { get; set; } Property Value Type Description String WebHookAllowedRate Grants permission to send notifications at the specified rate. Abbot limits this value to 120. Declaration int WebHookAllowedRate { get; set; } Property Value Type Description Int32"
  },
  "reference/csharp/Serious.Abbot.Scripting.IResponseSettings.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IResponseSettings.html",
    "title": "Interface IResponseSettings | Abbot Docs",
    "keywords": "Interface IResponseSettings Settings related to conversation tracking response times and responders. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IResponseSettings Properties EscalationResponders The set of escalation responders. Declaration IReadOnlyList<IChatUser> EscalationResponders { get; } Property Value Type Description IReadOnlyList < IChatUser > FirstResponders The set of first responders. Declaration IReadOnlyList<IChatUser> FirstResponders { get; } Property Value Type Description IReadOnlyList < IChatUser > ResponseTime The response time thresholds. Declaration Threshold<TimeSpan> ResponseTime { get; } Property Value Type Description Threshold < TimeSpan >"
  },
  "reference/csharp/Serious.Abbot.Scripting.IResult.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IResult.html",
    "title": "Interface IResult | Abbot Docs",
    "keywords": "Interface IResult The result of an operation that could fail. If it fails, Ok will be false and Error will contain the reason for the failure. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IResult Properties Error The error message if the operation failed. Declaration string Error { get; } Property Value Type Description String Ok Whether the operation succeeded. Declaration bool Ok { get; } Property Value Type Description Boolean"
  },
  "reference/csharp/Serious.Abbot.Scripting.IResult-1.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IResult-1.html",
    "title": "Interface IResult<TValue> | Abbot Docs",
    "keywords": "Interface IResult<TValue> The result of an operation to retrieve a value that could fail. Inherited Members IResult.Ok IResult.Error Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IResult<out TValue> : IResult Type Parameters Name Description TValue The type of the operation result Properties Value The value of the operation if it succeeded. Declaration TValue Value { get; } Property Value Type Description TValue"
  },
  "reference/csharp/Serious.Abbot.Scripting.IRoom.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IRoom.html",
    "title": "Interface IRoom | Abbot Docs",
    "keywords": "Interface IRoom Represents a chat room (channel in Slack parlance). Inherited Members IRoomMessageTarget.GetThread(String) IRoomMessageTarget.Id IMessageTarget.Address Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IRoom : IRoomMessageTarget, IMessageTarget Properties Name The name of the room, if known. Declaration string Name { get; } Property Value Type Description String"
  },
  "reference/csharp/Serious.Abbot.Scripting.IRoomArgument.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IRoomArgument.html",
    "title": "Interface IRoomArgument | Abbot Docs",
    "keywords": "Interface IRoomArgument Represents an argument that is a room mention (for example #room-name in Slack). Inherited Members IArgument.Value Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IRoomArgument : IArgument Properties Room The mentioned room. Declaration IRoom Room { get; } Property Value Type Description IRoom Extension Methods ArgumentExtensions.ToLocalTime(IArgument) ArgumentExtensions.ToInt32(IArgument)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IRoomDetails.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IRoomDetails.html",
    "title": "Interface IRoomDetails | Abbot Docs",
    "keywords": "Interface IRoomDetails Detailed information about a chat room such as the first responders, the escalation responders, response times settings, etc. Inherited Members IRoom.Name IRoomMessageTarget.GetThread(String) IRoomMessageTarget.Id IMessageTarget.Address Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IRoomDetails : IRoom, IRoomMessageTarget, IMessageTarget Properties BotIsMember Whether or not Abbot is a member of the room. It's null if it is not yet known. Declaration Nullable<bool> BotIsMember { get; } Property Value Type Description Nullable < Boolean > ConversationTrackingEnabled Whether conversation tracking is enabled in this room. Declaration bool ConversationTrackingEnabled { get; } Property Value Type Description Boolean DefaultResponseSettings The default response settings for the organization. Declaration IResponseSettings DefaultResponseSettings { get; } Property Value Type Description IResponseSettings Metadata Custom metadata associated with the room. Declaration IReadOnlyDictionary<string, string> Metadata { get; } Property Value Type Description IReadOnlyDictionary < String , String > ResponseSettings The conversation tracking response settings for the room. If any of the properties are empty, check the DefaultResponseSettings for the corresponding organizational default value. Declaration IResponseSettings ResponseSettings { get; } Property Value Type Description IResponseSettings"
  },
  "reference/csharp/Serious.Abbot.Scripting.IRoomInfo.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IRoomInfo.html",
    "title": "Interface IRoomInfo | Abbot Docs",
    "keywords": "Interface IRoomInfo Information about a chat room (Slack only at this time). Inherited Members IRoom.Name IRoomMessageTarget.GetThread(String) IRoomMessageTarget.Id IMessageTarget.Address Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IRoomInfo : IRoom, IRoomMessageTarget, IMessageTarget Properties Purpose The purpose of the chat room. Declaration string Purpose { get; } Property Value Type Description String Topic The topic of the chat room. Declaration string Topic { get; } Property Value Type Description String"
  },
  "reference/csharp/Serious.Abbot.Scripting.IRoomMessageTarget.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IRoomMessageTarget.html",
    "title": "Interface IRoomMessageTarget | Abbot Docs",
    "keywords": "Interface IRoomMessageTarget Represents a chat room \"message target\", which is essentially an IRoom but only contains the ID of the room, making it suitable for sending to with To . Inherited Members IMessageTarget.Address Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IRoomMessageTarget : IMessageTarget Properties Id The platform specific identifier for the room, if known. Declaration string Id { get; } Property Value Type Description String Methods GetThread(String) Gets an IMessageTarget , suitable for using in To , for sending a message on the specified thread within this room. Declaration virtual IMessageTarget GetThread(string threadId) Parameters Type Name Description String threadId The ID of the thread, within this room, to send on. Returns Type Description IMessageTarget An IMessageTarget representing that thread."
  },
  "reference/csharp/Serious.Abbot.Scripting.IRoomsClient.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IRoomsClient.html",
    "title": "Interface IRoomsClient | Abbot Docs",
    "keywords": "Interface IRoomsClient Used to manage Slack conversations. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IRoomsClient Methods ArchiveAsync(IRoomMessageTarget) Archives a room. Declaration Task<IResult> ArchiveAsync(IRoomMessageTarget room) Parameters Type Name Description IRoomMessageTarget room The room to archive. Returns Type Description Task < IResult > A IResult that indicates whether the operation succeeded or not. CreateAsync(String, Boolean) Creates a Room and returns the created Id of the room. Declaration Task<IResult<IRoomInfo>> CreateAsync(string name, bool isPrivate) Parameters Type Name Description String name The name of the room. Boolean isPrivate Whether or not the room is private. Returns Type Description Task < IResult < IRoomInfo >> A IResult that indicates whether the operation succeeded or not and contains information about the created room. GetCoverageAsync(IRoomMessageTarget, RoomRole, String) Retrieves the coverage for a room. This is the set of working hours that responders are available. Declaration Task<IResult<IReadOnlyList<WorkingHours>>> GetCoverageAsync(IRoomMessageTarget room, RoomRole roomRole, string timeZoneId) Parameters Type Name Description IRoomMessageTarget room The room to retrieve information about. RoomRole roomRole The type of room role to check for coverage such as first responders or escalation responders. String timeZoneId The IANA time zone Id to get coverage for. If omitted, the caller's timezone is used. Returns Type Description Task < IResult < IReadOnlyList < WorkingHours >>> An IRoomDetails with detailed room information. Returns null if the room is not found. GetDetailsAsync(IRoomMessageTarget) Retrieves detailed information about a room. You can pass Room to this for the current room. For a different room, call GetTarget(String) with the Id of the room (aka channel) to get a handle to the room. Declaration Task<IResult<IRoomDetails>> GetDetailsAsync(IRoomMessageTarget room) Parameters Type Name Description IRoomMessageTarget room The room to retrieve information about. Returns Type Description Task < IResult < IRoomDetails >> An IRoomDetails with detailed room information. Returns null if the room is not found. GetTarget(String) Retrieves a handle that can be used to send messages to a room given it's platform-specific ID (for example, the Channel ID 'Cnnnnnnn' in Slack). Declaration IRoomMessageTarget GetTarget(string id) Parameters Type Name Description String id The ID of the room to retrieve Returns Type Description IRoomMessageTarget An IRoomMessageTarget , suitable for use in To , referring to the room. Remarks This method does not confirm that the room exists. If the room does not exist, sending a message to it will fail silently. InviteUsersAsync(IRoomMessageTarget, IEnumerable<IChatUser>) Invites the set of users to the room. Declaration Task<IResult> InviteUsersAsync(IRoomMessageTarget room, IEnumerable<IChatUser> users) Parameters Type Name Description IRoomMessageTarget room The room to invite users to. IEnumerable < IChatUser > users The set of users to invite. Returns Type Description Task < IResult > A IResult that indicates whether the operation succeeded or not. NotifyAsync(RoomNotification, IRoomMessageTarget) Sends a notification to the room's responders. If the room is attached to a Hub, then the message is sent to the hub and the responders are mentioned. Otherwise the message is sent as a group DM to the responders. Declaration Task<AbbotResponse> NotifyAsync(RoomNotification notification, IRoomMessageTarget room) Parameters Type Name Description RoomNotification notification The notification to send. IRoomMessageTarget room The room to send a notification for. Returns Type Description Task < AbbotResponse > SetPurposeAsync(IRoomMessageTarget, String) Sets the room's purpose. Declaration Task<IResult> SetPurposeAsync(IRoomMessageTarget room, string purpose) Parameters Type Name Description IRoomMessageTarget room The room for which to set a purpose. String purpose The purpose to set for the room. Returns Type Description Task < IResult > A IResult that indicates whether the operation succeeded or not. SetTopicAsync(IRoomMessageTarget, String) Sets the room's topic. Declaration Task<IResult> SetTopicAsync(IRoomMessageTarget room, string topic) Parameters Type Name Description IRoomMessageTarget room The room for which to set a topic. String topic The topic to set for the room. Returns Type Description Task < IResult > A IResult that indicates whether the operation succeeded or not. UpdateMetadataAsync(IRoomMessageTarget, IReadOnlyDictionary<String, String>) Sets the room's metadata to match the provided dictionary. Declaration Task<AbbotResponse> UpdateMetadataAsync(IRoomMessageTarget room, IReadOnlyDictionary<string, string> metadata) Parameters Type Name Description IRoomMessageTarget room The room for which to set metadata. IReadOnlyDictionary < String , String > metadata The metadata to set for the room. Returns Type Description Task < AbbotResponse > A IResult that indicates whether the operation succeeded or not. Extension Methods RoomsClientExtensions.CreateAsync(IRoomsClient, String) RoomsClientExtensions.GetCoverageAsync(IRoomsClient, IRoomMessageTarget, RoomRole) RoomsClientExtensions.GetCoverageAsync(IRoomsClient, IRoomMessageTarget, RoomRole, DateTimeZone)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IRootSourceSkill.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IRootSourceSkill.html",
    "title": "Interface IRootSourceSkill | Abbot Docs",
    "keywords": "Interface IRootSourceSkill The skill that is the root source of a signal. This is the skill that kicked off the current signal chain. Inherited Members ISignalSource.SkillName ISignalSource.SkillUrl ISignalSource.Arguments ISignalSource.Mentions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IRootSourceSkill : ISignalSource Properties IsChat If true, the skill is responding to a chat message. Declaration bool IsChat { get; } Property Value Type Description Boolean IsInteraction If true, the skill is responding to the user interacting with a UI element in chat such as clicking on a button. Declaration bool IsInteraction { get; } Property Value Type Description Boolean IsPatternMatch If true, the skill is responding to a chat message because it matched a pattern, not because it was directly called. Declaration bool IsPatternMatch { get; } Property Value Type Description Boolean IsRequest If true, the skill is responding to an HTTP trigger request. The request information can be accessed via the Request property. Declaration bool IsRequest { get; } Property Value Type Description Boolean Pattern If the skill is responding to a pattern match, then this contains information about the pattern that matched the incoming message and caused this skill to be called. Otherwise this is null. Declaration IPattern Pattern { get; } Property Value Type Description IPattern Request If IsRequest is true, then the skill is responding to an HTTP trigger request (instead of a chat message) and this property is populated with the incoming request information. Declaration IHttpTriggerEvent Request { get; } Property Value Type Description IHttpTriggerEvent"
  },
  "reference/csharp/Serious.Abbot.Scripting.IScriptGlobals.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IScriptGlobals.html",
    "title": "Interface IScriptGlobals | Abbot Docs",
    "keywords": "Interface IScriptGlobals The global object for all user skills. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IScriptGlobals Properties Bot It's Abbot! Provides a set of services and information for your bot skill. Declaration IBot Bot { get; } Property Value Type Description IBot"
  },
  "reference/csharp/Serious.Abbot.Scripting.ISecrets.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ISecrets.html",
    "title": "Interface ISecrets | Abbot Docs",
    "keywords": "Interface ISecrets Used to retrieve secrets stored for the skill. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ISecrets Methods GetAsync(String) Retrieves a stored secret for the current skill using the name . Declaration Task<string> GetAsync(string name) Parameters Type Name Description String name The key. Returns Type Description Task < String > A task with the value of the secret."
  },
  "reference/csharp/Serious.Abbot.Scripting.ISignalEvent.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ISignalEvent.html",
    "title": "Interface ISignalEvent | Abbot Docs",
    "keywords": "Interface ISignalEvent A signal raised by a skill. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ISignalEvent Properties Arguments The signal arguments the source raised. Declaration string Arguments { get; } Property Value Type Description String Name The name of the signal. Declaration string Name { get; } Property Value Type Description String RootSource The skill that started this chain of signals. Declaration IRootSourceSkill RootSource { get; } Property Value Type Description IRootSourceSkill The IRootSourceSkill that started this chain of signals. Source The skill that raised this signal. Declaration ISourceSkill Source { get; } Property Value Type Description ISourceSkill The ISourceSkill that raised this signal."
  },
  "reference/csharp/Serious.Abbot.Scripting.ISignalSource.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ISignalSource.html",
    "title": "Interface ISignalSource | Abbot Docs",
    "keywords": "Interface ISignalSource Information about the source of a signal. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ISignalSource Properties Arguments The arguments supplied to the skill. Does not include the skill name. Declaration IArguments Arguments { get; } Property Value Type Description IArguments Mentions The mentioned users (if any). Declaration IReadOnlyList<IChatUser> Mentions { get; } Property Value Type Description IReadOnlyList < IChatUser > SkillName Name of the skill. Declaration string SkillName { get; } Property Value Type Description String SkillUrl The URL to the skill editor for the skill. May be null if the signal name starts with \"system:\" (for signals that Abbot raises directly). Declaration Uri SkillUrl { get; } Property Value Type Description Uri"
  },
  "reference/csharp/Serious.Abbot.Scripting.ISkillDataItem.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ISkillDataItem.html",
    "title": "Interface ISkillDataItem | Abbot Docs",
    "keywords": "Interface ISkillDataItem Represents a piece of data stored for a skill. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ISkillDataItem Properties Key The key Declaration string Key { get; } Property Value Type Description String Value A dynamic value. Could be a string or an object. Declaration dynamic Value { get; } Property Value Type Description Object Methods GetValueAs<T>(T) Retrieves the value as type T. Declaration T GetValueAs<T>(T defaultValue = null) Parameters Type Name Description T defaultValue The value to return if value does not exist or cannot be cast. Returns Type Description T Type Parameters Name Description T The type to cast the value as."
  },
  "reference/csharp/Serious.Abbot.Scripting.ISlack.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ISlack.html",
    "title": "Interface ISlack | Abbot Docs",
    "keywords": "Interface ISlack Provides methods to send Block Kit replies back to Slack. Methods of this class only work when the skill is responding to Slack. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ISlack Methods ReplyAsync(MessageOptions, String, ILayoutBlock[]) Reply to the current message with block kit blocks. Declaration Task ReplyAsync(MessageOptions options, string fallbackText, params ILayoutBlock[] blocks) Parameters Type Name Description MessageOptions options Options for sending the message, such as the target conversation/thread, etc. String fallbackText Alternative text to show in places where block kit is not supported such as in a notification for the message. Serious.Slack.BlockKit.ILayoutBlock [] blocks The block or set of Serious.Slack.BlockKit.ILayoutBlock blocks that make up the mention. Returns Type Description Task A Task. ReplyAsync(MessageOptions, String, String) Reply to the current message with an anonymous object representing the blocks. Use this method with care as the blocksJson string has to exactly match the JSON that the Slack API expects. Declaration Task ReplyAsync(MessageOptions options, string fallbackText, string blocksJson) Parameters Type Name Description MessageOptions options Options for sending the message, such as the target conversation/thread, etc. String fallbackText Alternative text to show in places where block kit is not supported such as in a notification for the message. String blocksJson A JSON string that the Slack API expects for blocks. This can be an individual block or an array of blocks. Returns Type Description Task A Task. ReplyAsync(String, ILayoutBlock[]) Reply to the current message with block kit blocks. Declaration Task ReplyAsync(string fallbackText, params ILayoutBlock[] blocks) Parameters Type Name Description String fallbackText Alternative text to show in places where block kit is not supported such as in a notification for the message. Serious.Slack.BlockKit.ILayoutBlock [] blocks The block or set of Serious.Slack.BlockKit.ILayoutBlock blocks that make up the mention. Returns Type Description Task A Task. ReplyAsync(String, String) Reply to the current message with an anonymous object representing the blocks. Use this method with care as the blocksJson string has to exactly match the JSON that the Slack API expects. Declaration Task ReplyAsync(string fallbackText, string blocksJson) Parameters Type Name Description String fallbackText Alternative text to show in places where block kit is not supported such as in a notification for the message. String blocksJson A JSON string that the Slack API expects for blocks. This can be an individual block or an array of blocks. Returns Type Description Task A Task."
  },
  "reference/csharp/Serious.Abbot.Scripting.ISourceSkill.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ISourceSkill.html",
    "title": "Interface ISourceSkill | Abbot Docs",
    "keywords": "Interface ISourceSkill Information about the source skill that raised a signal. Inherited Members ISignalSource.SkillName ISignalSource.SkillUrl ISignalSource.Arguments ISignalSource.Mentions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ISourceSkill : ISignalSource Properties SignalEvent The ISignalEvent signal that this source skill is responding to, if any. Declaration ISignalEvent SignalEvent { get; } Property Value Type Description ISignalEvent"
  },
  "reference/csharp/Serious.Abbot.Scripting.ITasksClient.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ITasksClient.html",
    "title": "Interface ITasksClient | Abbot Docs",
    "keywords": "Interface ITasksClient Used to manage tasks. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ITasksClient Methods CreateAsync(TaskRequest) Creates a Task and returns the created Id of the task. Declaration Task<AbbotResponse<TaskItemInfo>> CreateAsync(TaskRequest taskRequest) Parameters Type Name Description TaskRequest taskRequest Information used to create a customer. Returns Type Description Task < AbbotResponse < TaskItemInfo >> A IResult that indicates whether the operation succeeded or not and contains information about the created customer. GetAllAsync() Gets all the customers in your org. Declaration Task<AbbotResponse<IReadOnlyList<TaskItemInfo>>> GetAllAsync() Returns Type Description Task < AbbotResponse < IReadOnlyList < TaskItemInfo >>> A IResult that indicates whether the operation succeeded or not and contains information about the set of customers in the org. GetAsync(Int32) Gets the customer with the specified Id. Declaration Task<AbbotResponse<TaskItemInfo>> GetAsync(int id) Parameters Type Name Description Int32 id Returns Type Description Task < AbbotResponse < TaskItemInfo >> A IResult that indicates whether the operation succeeded or not and contains information about the customer. UpdateAsync(Int32, TaskRequest) Creates a Task and returns the created Id of the task. Declaration Task<AbbotResponse<TaskItemInfo>> UpdateAsync(int id, TaskRequest taskRequest) Parameters Type Name Description Int32 id The Id of the customer to update. TaskRequest taskRequest Information used to create a customer. Returns Type Description Task < AbbotResponse < TaskItemInfo >> A IResult that indicates whether the operation succeeded or not and contains information about the updated customer."
  },
  "reference/csharp/Serious.Abbot.Scripting.ITicketsClient.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ITicketsClient.html",
    "title": "Interface ITicketsClient | Abbot Docs",
    "keywords": "Interface ITicketsClient Used to reply with a message to open a ticket. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface ITicketsClient Methods ReplyWithTicketPromptAsync() Replies with an ephemeral message that displays a button to open a ticket for each enabled ticketing system. Declaration Task<IResult> ReplyWithTicketPromptAsync() Returns Type Description Task < IResult > A Task with an IResult ."
  },
  "reference/csharp/Serious.Abbot.Scripting.IUserDetails.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IUserDetails.html",
    "title": "Interface IUserDetails | Abbot Docs",
    "keywords": "Interface IUserDetails Provides detailed information about a user, as returned from the Users client. Inherited Members IChatUser.UserName IChatUser.Name IChatUser.Email IChatUser.Location IUserMessageTarget.GetThread(String) IUserMessageTarget.Id IMessageTarget.Address IWorker.WorkingHours IWorker.TimeZone Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IUserDetails : IChatUser, IUserMessageTarget, IMessageTarget, IWorker Properties CustomFields Gets a dictionary of custom fields for the user. The key of the dictionary is the ID of the custom field. Declaration IDictionary<string, UserProfileField> CustomFields { get; } Property Value Type Description IDictionary < String , UserProfileField > Extension Methods ChatUserExtensions.GetLocalTime(IChatUser) ChatUserExtensions.GetLocalDateTime(IChatUser) ReplyExtensions.Format(IChatUser)"
  },
  "reference/csharp/Serious.Abbot.Scripting.IUserMessageTarget.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IUserMessageTarget.html",
    "title": "Interface IUserMessageTarget | Abbot Docs",
    "keywords": "Interface IUserMessageTarget Represents a chat user \"message target\", which is essentially an IChatUser but only contains the ID of the user, making it suitable for sending to with To . Inherited Members IMessageTarget.Address Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IUserMessageTarget : IMessageTarget Properties Id The ID of the user on their chat platform. Declaration string Id { get; } Property Value Type Description String Methods GetThread(String) Gets an IMessageTarget , suitable for using in To , for sending a message on the specified thread within this user's DMs with Abbot. Declaration virtual IMessageTarget GetThread(string threadId) Parameters Type Name Description String threadId The ID of the thread, within this user's DMs with Abbot, to send on. Returns Type Description IMessageTarget An IMessageTarget representing that thread."
  },
  "reference/csharp/Serious.Abbot.Scripting.IVersionInfo.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IVersionInfo.html",
    "title": "Interface IVersionInfo | Abbot Docs",
    "keywords": "Interface IVersionInfo Provides info about Abbot. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IVersionInfo Properties ApiVersion The version of the API that a skill is compiled against. Declaration Version ApiVersion { get; } Property Value Type Description Version ProductVersion The current version of the Abbot Product. Declaration string ProductVersion { get; } Property Value Type Description String"
  },
  "reference/csharp/Serious.Abbot.Scripting.IWorker.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.IWorker.html",
    "title": "Interface IWorker | Abbot Docs",
    "keywords": "Interface IWorker Represents a person that has working hours and a timezone. Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IWorker Properties TimeZone The IANA Time Zone identifier for the member as reported by the chat platform. Declaration DateTimeZone TimeZone { get; } Property Value Type Description NodaTime.DateTimeZone WorkingHours The working hours during the day for the user. Declaration WorkingHours WorkingHours { get; } Property Value Type Description WorkingHours"
  },
  "reference/csharp/Serious.Abbot.Scripting.MessageOptions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.MessageOptions.html",
    "title": "Class MessageOptions | Abbot Docs",
    "keywords": "Class MessageOptions Options to customize how a message is sent. Inheritance Object MessageOptions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class MessageOptions : Object Constructors MessageOptions() Declaration public MessageOptions() Properties To Gets or sets the target to send the message to. If not specified, the default target depends on how the skill was triggered, see remarks for details. Declaration public IMessageTarget To { get; set; } Property Value Type Description IMessageTarget Remarks The default message target depends on how the skill was triggered. If the skill was invoked by a top-level message in a room, the default target is to send another top-level message to the room the message was posted in. If the skill was invoked by a thread reply, the default target is to send to the same thread. > If the skill was invoked by a trigger, the default target is to send a top-level message to the room the trigger is attached to."
  },
  "reference/csharp/Serious.Abbot.Scripting.MessageTarget.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.MessageTarget.html",
    "title": "Class MessageTarget | Abbot Docs",
    "keywords": "Class MessageTarget Represents an arbitrary chat conversation. Inheritance Object MessageTarget ReplyInThreadMessageTarget Implements IMessageTarget Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class MessageTarget : Object, IMessageTarget Constructors MessageTarget(ChatAddress) Creates a new MessageTarget for the specified address. Declaration public MessageTarget(ChatAddress address) Parameters Type Name Description ChatAddress address The ChatAddress to use when sending messages to this conversation. Properties Address Gets the ChatAddress indicating how to send messages to this conversation. Declaration public ChatAddress Address { get; } Property Value Type Description ChatAddress Implements IMessageTarget"
  },
  "reference/csharp/Serious.Abbot.Scripting.MetadataFieldInfo.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.MetadataFieldInfo.html",
    "title": "Class MetadataFieldInfo | Abbot Docs",
    "keywords": "Class MetadataFieldInfo A metadata field defined for an organization. Inheritance Object MetadataFieldInfo Implements IEquatable < MetadataFieldInfo > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class MetadataFieldInfo : Object Constructors MetadataFieldInfo(MetadataFieldInfo) Declaration protected MetadataFieldInfo(MetadataFieldInfo original) Parameters Type Name Description MetadataFieldInfo original MetadataFieldInfo(String, String) A metadata field defined for an organization. Declaration public MetadataFieldInfo(string Name, string DefaultValue) Parameters Type Name Description String Name The metadata field name. String DefaultValue The default value for the metadata field. Properties DefaultValue The default value for the metadata field. Declaration public string DefaultValue { get; set; } Property Value Type Description String EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Name The metadata field name. Declaration public string Name { get; set; } Property Value Type Description String Methods <Clone>$() Declaration public virtual MetadataFieldInfo <Clone>$() Returns Type Description MetadataFieldInfo Deconstruct(out String, out String) Declaration public void Deconstruct(out string Name, out string DefaultValue) Parameters Type Name Description String Name String DefaultValue Equals(MetadataFieldInfo) Declaration public virtual bool Equals(MetadataFieldInfo other) Parameters Type Name Description MetadataFieldInfo other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(MetadataFieldInfo, MetadataFieldInfo) Declaration public static bool operator ==(MetadataFieldInfo left, MetadataFieldInfo right) Parameters Type Name Description MetadataFieldInfo left MetadataFieldInfo right Returns Type Description Boolean Inequality(MetadataFieldInfo, MetadataFieldInfo) Declaration public static bool operator !=(MetadataFieldInfo left, MetadataFieldInfo right) Parameters Type Name Description MetadataFieldInfo left MetadataFieldInfo right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.PatternType.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.PatternType.html",
    "title": "Class PatternType | Abbot Docs",
    "keywords": "Class PatternType How a pattern or signal should be used to match incoming messages. Inheritance Object PatternType Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public sealed class PatternType : Enum Remarks ALWAYS set an explicit integer value for each entry, and DO NOT change the existing ones, no matter how tempting it may be to reorder them for \"consistency\". Fields Contains Matches messages where the message contains the pattern. Declaration public const PatternType Contains Field Value Type Description PatternType EndsWith Matches messages that end with the pattern. Declaration public const PatternType EndsWith Field Value Type Description PatternType ExactMatch This pattern matches messages that are an exact match. Declaration public const PatternType ExactMatch Field Value Type Description PatternType None Pattern doesn't match anything. Used to disable a pattern. Declaration public const PatternType None Field Value Type Description PatternType RegularExpression This pattern uses regular expressions to match incoming messages. Declaration public const PatternType RegularExpression Field Value Type Description PatternType StartsWith Matches messages that start with the pattern. Declaration public const PatternType StartsWith Field Value Type Description PatternType value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "reference/csharp/Serious.Abbot.Scripting.PlatformType.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.PlatformType.html",
    "title": "Class PlatformType | Abbot Docs",
    "keywords": "Class PlatformType The type of chat platform. Inheritance Object PlatformType Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public sealed class PlatformType : Enum Remarks ALWAYS set an explicit integer value for each entry, and DO NOT change the existing ones, no matter how tempting it may be to reorder them for \"consistency\". Fields Discord Discord Declaration public const PlatformType Discord Field Value Type Description PlatformType MsTeams Teams Declaration public const PlatformType MsTeams Field Value Type Description PlatformType Slack Slack Declaration public const PlatformType Slack Field Value Type Description PlatformType UnitTest Unit test Declaration public const PlatformType UnitTest Field Value Type Description PlatformType value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "reference/csharp/Serious.Abbot.Scripting.RecognizerExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.RecognizerExtensions.html",
    "title": "Class RecognizerExtensions | Abbot Docs",
    "keywords": "Class RecognizerExtensions Useful extensions for Microsoft.Recognizers Inheritance Object RecognizerExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class RecognizerExtensions : Object Methods GetValues(ModelResult) Returns the values property of a Microsoft.Recognizers.Text.ModelResult result, cast to the appropriate type. Declaration public static IEnumerable<dynamic> GetValues(this ModelResult result) Parameters Type Name Description Microsoft.Recognizers.Text.ModelResult result Returns Type Description IEnumerable < Object >"
  },
  "reference/csharp/Serious.Abbot.Scripting.ReplyExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ReplyExtensions.html",
    "title": "Class ReplyExtensions | Abbot Docs",
    "keywords": "Class ReplyExtensions Set of extension methods to make replying easier. Inheritance Object ReplyExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class ReplyExtensions : Object Methods Format(IChatUser) DEPRECATED: Just call ToString. Formats the user for the target chat platform. This ensures platforms like Slack render the user in the proper format. Declaration public static string Format(this IChatUser user) Parameters Type Name Description IChatUser user The user to format. Returns Type Description String ToMarkdownList(IEnumerable<String>) Converts the list of items into a bulleted markdown list. Declaration public static string ToMarkdownList(this IEnumerable<string> items) Parameters Type Name Description IEnumerable < String > items The collection of strings to turn into a markdown list. Returns Type Description String A string formatted as a markdown list. ToOrderedList(IEnumerable<String>) Converts the list of items into an ordered markdown list. Declaration public static string ToOrderedList(this IEnumerable<string> items) Parameters Type Name Description IEnumerable < String > items The collection of strings to turn into a markdown list. Returns Type Description String A string formatted as a markdown list."
  },
  "reference/csharp/Serious.Abbot.Scripting.ReplyInThreadMessageTarget.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ReplyInThreadMessageTarget.html",
    "title": "Class ReplyInThreadMessageTarget | Abbot Docs",
    "keywords": "Class ReplyInThreadMessageTarget Represents a reply to a message in a thread. Inheritance Object MessageTarget ReplyInThreadMessageTarget Implements IMessageTarget Inherited Members MessageTarget.Address Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class ReplyInThreadMessageTarget : MessageTarget, IMessageTarget Constructors ReplyInThreadMessageTarget(String, String) Constructs a ReplyInThreadMessageTarget Declaration public ReplyInThreadMessageTarget(string platformRoomId, string threadId) Parameters Type Name Description String platformRoomId String threadId Implements IMessageTarget"
  },
  "reference/csharp/Serious.Abbot.Scripting.ResponderGroup.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.ResponderGroup.html",
    "title": "Class ResponderGroup | Abbot Docs",
    "keywords": "Class ResponderGroup A set of responders. Inheritance Object ResponderGroup Implements IEquatable < ResponderGroup > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class ResponderGroup : Object Constructors ResponderGroup(ResponderGroup) Declaration protected ResponderGroup(ResponderGroup original) Parameters Type Name Description ResponderGroup original ResponderGroup(RoomRole, IReadOnlyList<IChatUser>) A set of responders. Declaration public ResponderGroup(RoomRole RoomRole, IReadOnlyList<IChatUser> Members) Parameters Type Name Description RoomRole RoomRole The role of the responders IReadOnlyList < IChatUser > Members The responders. Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Members The responders. Declaration public IReadOnlyList<IChatUser> Members { get; set; } Property Value Type Description IReadOnlyList < IChatUser > MentionIds The set of mention IDs for the responders. Declaration public IReadOnlyList<string> MentionIds { get; } Property Value Type Description IReadOnlyList < String > RoomRole The role of the responders Declaration public RoomRole RoomRole { get; set; } Property Value Type Description RoomRole Methods <Clone>$() Declaration public virtual ResponderGroup <Clone>$() Returns Type Description ResponderGroup Deconstruct(out RoomRole, out IReadOnlyList<IChatUser>) Declaration public void Deconstruct(out RoomRole RoomRole, out IReadOnlyList<IChatUser> Members) Parameters Type Name Description RoomRole RoomRole IReadOnlyList < IChatUser > Members Equals(ResponderGroup) Declaration public virtual bool Equals(ResponderGroup other) Parameters Type Name Description ResponderGroup other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(ResponderGroup, ResponderGroup) Declaration public static bool operator ==(ResponderGroup left, ResponderGroup right) Parameters Type Name Description ResponderGroup left ResponderGroup right Returns Type Description Boolean Inequality(ResponderGroup, ResponderGroup) Declaration public static bool operator !=(ResponderGroup left, ResponderGroup right) Parameters Type Name Description ResponderGroup left ResponderGroup right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.RoomMetadataUpdate.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.RoomMetadataUpdate.html",
    "title": "Class RoomMetadataUpdate | Abbot Docs",
    "keywords": "Class RoomMetadataUpdate Used to update room metadata. Inheritance Object RoomMetadataUpdate Implements IEquatable < RoomMetadataUpdate > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class RoomMetadataUpdate : Object Constructors RoomMetadataUpdate(RoomMetadataUpdate) Declaration protected RoomMetadataUpdate(RoomMetadataUpdate original) Parameters Type Name Description RoomMetadataUpdate original RoomMetadataUpdate(IReadOnlyDictionary<String, String>) Used to update room metadata. Declaration public RoomMetadataUpdate(IReadOnlyDictionary<string, string> Values) Parameters Type Name Description IReadOnlyDictionary < String , String > Values The metadata values. If any keys do not match defined existing metadata, they are ignored. Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Values The metadata values. If any keys do not match defined existing metadata, they are ignored. Declaration public IReadOnlyDictionary<string, string> Values { get; set; } Property Value Type Description IReadOnlyDictionary < String , String > Methods <Clone>$() Declaration public virtual RoomMetadataUpdate <Clone>$() Returns Type Description RoomMetadataUpdate Deconstruct(out IReadOnlyDictionary<String, String>) Declaration public void Deconstruct(out IReadOnlyDictionary<string, string> Values) Parameters Type Name Description IReadOnlyDictionary < String , String > Values Equals(RoomMetadataUpdate) Declaration public virtual bool Equals(RoomMetadataUpdate other) Parameters Type Name Description RoomMetadataUpdate other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(RoomMetadataUpdate, RoomMetadataUpdate) Declaration public static bool operator ==(RoomMetadataUpdate left, RoomMetadataUpdate right) Parameters Type Name Description RoomMetadataUpdate left RoomMetadataUpdate right Returns Type Description Boolean Inequality(RoomMetadataUpdate, RoomMetadataUpdate) Declaration public static bool operator !=(RoomMetadataUpdate left, RoomMetadataUpdate right) Parameters Type Name Description RoomMetadataUpdate left RoomMetadataUpdate right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.RoomNotification.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.RoomNotification.html",
    "title": "Class RoomNotification | Abbot Docs",
    "keywords": "Class RoomNotification A notification to send to a room's responders. Inheritance Object RoomNotification Implements IEquatable < RoomNotification > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class RoomNotification : Object Constructors RoomNotification(RoomNotification) Declaration protected RoomNotification(RoomNotification original) Parameters Type Name Description RoomNotification original RoomNotification(String, String, String, Boolean) A notification to send to a room's responders. Declaration public RoomNotification(string Icon, string Headline, string Message, bool Escalation = false) Parameters Type Name Description String Icon Gets or sets the icon for this notification. This should be a Unicode Emoji, but if absolutely necessary it can be a Slack emoji reference (\":smile:\") String Headline Gets or sets the headline for this notification. String Message Gets or sets the message for this notification. Boolean Escalation If true , then escalation responders will be notified, instead of first responders. Properties EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Escalation If true , then escalation responders will be notified, instead of first responders. Declaration public bool Escalation { get; set; } Property Value Type Description Boolean Headline Gets or sets the headline for this notification. Declaration public string Headline { get; set; } Property Value Type Description String Icon Gets or sets the icon for this notification. This should be a Unicode Emoji, but if absolutely necessary it can be a Slack emoji reference (\":smile:\") Declaration public string Icon { get; set; } Property Value Type Description String Message Gets or sets the message for this notification. Declaration public string Message { get; set; } Property Value Type Description String Methods <Clone>$() Declaration public virtual RoomNotification <Clone>$() Returns Type Description RoomNotification Deconstruct(out String, out String, out String, out Boolean) Declaration public void Deconstruct(out string Icon, out string Headline, out string Message, out bool Escalation) Parameters Type Name Description String Icon String Headline String Message Boolean Escalation Equals(RoomNotification) Declaration public virtual bool Equals(RoomNotification other) Parameters Type Name Description RoomNotification other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(RoomNotification, RoomNotification) Declaration public static bool operator ==(RoomNotification left, RoomNotification right) Parameters Type Name Description RoomNotification left RoomNotification right Returns Type Description Boolean Inequality(RoomNotification, RoomNotification) Declaration public static bool operator !=(RoomNotification left, RoomNotification right) Parameters Type Name Description RoomNotification left RoomNotification right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.RoomRole.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.RoomRole.html",
    "title": "Class RoomRole | Abbot Docs",
    "keywords": "Class RoomRole The roles a user can be assigned to in a room. Inheritance Object RoomRole Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public sealed class RoomRole : Enum Fields EscalationResponder An escalation responder receives notifications for messages from supportees that are overdue. Declaration public const RoomRole EscalationResponder Field Value Type Description RoomRole FirstResponder A first responder receives notifications for messages from supportees that are about to hit their warning threshold or are overdue. Declaration public const RoomRole FirstResponder Field Value Type Description RoomRole value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "reference/csharp/Serious.Abbot.Scripting.RoomsClientExtensions.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.RoomsClientExtensions.html",
    "title": "Class RoomsClientExtensions | Abbot Docs",
    "keywords": "Class RoomsClientExtensions Useful extensions to IRoomsClient Inheritance Object RoomsClientExtensions Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class RoomsClientExtensions : Object Methods CreateAsync(IRoomsClient, String) Creates a public Room and returns the created Id of the room. Declaration public static Task<IResult<IRoomInfo>> CreateAsync(this IRoomsClient client, string name) Parameters Type Name Description IRoomsClient client The IRoomsClient this extends. String name The name of the room. Returns Type Description Task < IResult < IRoomInfo >> The ID of the created room. GetCoverageAsync(IRoomsClient, IRoomMessageTarget, RoomRole) Retrieves the coverage for a room in the caller's timezone. This is the set of working hours that responders are available. Declaration public static Task<IResult<IReadOnlyList<WorkingHours>>> GetCoverageAsync(this IRoomsClient client, IRoomMessageTarget room, RoomRole roomRole) Parameters Type Name Description IRoomsClient client The IRoomsClient this extends. IRoomMessageTarget room The room to retrieve information about. RoomRole roomRole The type of room role to check for coverage such as first responders or escalation responders. Returns Type Description Task < IResult < IReadOnlyList < WorkingHours >>> An IRoomDetails with detailed room information. Returns null if the room is not found. GetCoverageAsync(IRoomsClient, IRoomMessageTarget, RoomRole, DateTimeZone) Retrieves the coverage for a room in the specified timezone. This is the set of working hours that responders are available. Declaration public static Task<IResult<IReadOnlyList<WorkingHours>>> GetCoverageAsync(this IRoomsClient client, IRoomMessageTarget room, RoomRole roomRole, DateTimeZone timeZone) Parameters Type Name Description IRoomsClient client The IRoomsClient this extends. IRoomMessageTarget room The room to retrieve information about. RoomRole roomRole The type of room role to check for coverage such as first responders or escalation responders. NodaTime.DateTimeZone timeZone The time zone to get coverage for. Returns Type Description Task < IResult < IReadOnlyList < WorkingHours >>> An IRoomDetails with detailed room information. Returns null if the room is not found."
  },
  "reference/csharp/Serious.Abbot.Scripting.StringValues.Enumerator.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.StringValues.Enumerator.html",
    "title": "Class StringValues.Enumerator | Abbot Docs",
    "keywords": "Class StringValues.Enumerator Enumerates the string values of a StringValues . Inheritance Object StringValues.Enumerator Implements IEnumerator < String > IEnumerator IDisposable Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public sealed class Enumerator : ValueType Constructors Enumerator(ref StringValues) Declaration public Enumerator(ref StringValues values) Parameters Type Name Description StringValues values Properties Current Declaration public string Current { get; } Property Value Type Description String Methods Dispose() Declaration public void Dispose() MoveNext() Declaration public bool MoveNext() Returns Type Description Boolean Implements System.Collections.Generic.IEnumerator<T> System.Collections.IEnumerator System.IDisposable"
  },
  "reference/csharp/Serious.Abbot.Scripting.StringValues.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.StringValues.html",
    "title": "Class StringValues | Abbot Docs",
    "keywords": "Class StringValues Represents zero/null, one, or many strings in an efficient way. Inheritance Object StringValues Implements IList < String > ICollection < String > IEnumerable < String > IEnumerable IReadOnlyList < String > IReadOnlyCollection < String > IEquatable < StringValues > IEquatable < String > IEquatable < String []> Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public sealed class StringValues : ValueType Constructors StringValues(String) Initializes a new instance of the StringValues structure using the specified string. Declaration public StringValues(string value) Parameters Type Name Description String value A string value or null . StringValues(String[]) Initializes a new instance of the StringValues structure using the specified array of strings. Declaration public StringValues(string[] values) Parameters Type Name Description String [] values A string array. Fields Empty A readonly instance of the StringValues struct whose value is an empty string array. Declaration public static readonly StringValues Empty Field Value Type Description StringValues Remarks In application code, this field is most commonly used to safely represent a StringValues that has null string values. Properties Count Gets the number of String elements contained in this StringValues . Declaration public int Count { get; } Property Value Type Description Int32 Item[Int32] Gets the String at index. Declaration public string this[int index] { get; } Parameters Type Name Description Int32 index The zero-based index of the element to get. Property Value Type Description String The string at the specified index. Methods Concat(StringValues, StringValues) Concatenates two specified instances of StringValues . Declaration public static StringValues Concat(StringValues values1, StringValues values2) Parameters Type Name Description StringValues values1 The first StringValues to concatenate. StringValues values2 The second StringValues to concatenate. Returns Type Description StringValues The concatenation of values1 and values2 . Concat(in StringValues, String) Concatenates specified instance of StringValues with specified String . Declaration public static StringValues Concat(in StringValues values, string value) Parameters Type Name Description StringValues values The StringValues to concatenate. String value The String to concatenate. Returns Type Description StringValues The concatenation of values and value . Concat(String, in StringValues) Concatenates specified instance of String with specified StringValues . Declaration public static StringValues Concat(string value, in StringValues values) Parameters Type Name Description String value The String to concatenate. StringValues values The StringValues to concatenate. Returns Type Description StringValues The concatenation of values and values . Equals(StringValues) Determines whether this instance and another specified StringValues object have the same values. Declaration public bool Equals(StringValues other) Parameters Type Name Description StringValues other The string to compare to this instance. Returns Type Description Boolean true if the value of other is the same as the value of this instance; otherwise, false . Equals(StringValues, StringValues) Determines whether two specified StringValues objects have the same values in the same order. Declaration public static bool Equals(StringValues left, StringValues right) Parameters Type Name Description StringValues left The first StringValues to compare. StringValues right The second StringValues to compare. Returns Type Description Boolean true if the value of left is the same as the value of right ; otherwise, false . Equals(StringValues, String) Determines whether the specified StringValues and String objects have the same values. Declaration public static bool Equals(StringValues left, string right) Parameters Type Name Description StringValues left The StringValues to compare. String right The String to compare. Returns Type Description Boolean true if the value of left is the same as the value of right ; otherwise, false . If right is null , the method returns false . Equals(StringValues, String[]) Determines whether the specified StringValues and string array objects have the same values. Declaration public static bool Equals(StringValues left, string[] right) Parameters Type Name Description StringValues left The StringValues to compare. String [] right The string array to compare. Returns Type Description Boolean true if the value of left is the same as the value of right ; otherwise, false . Equals(Object) Determines whether this instance and a specified object have the same value. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj An object to compare with this object. Returns Type Description Boolean true if the current object is equal to obj ; otherwise, false . Equals(String) Determines whether this instance and a specified String , have the same value. Declaration public bool Equals(string other) Parameters Type Name Description String other The String to compare to this instance. Returns Type Description Boolean true if the value of other is the same as this instance; otherwise, false . If other is null , returns false . Equals(String, StringValues) Determines whether the specified String and StringValues objects have the same values. Declaration public static bool Equals(string left, StringValues right) Parameters Type Name Description String left The String to compare. StringValues right The StringValues to compare. Returns Type Description Boolean true if the value of left is the same as the value of right ; otherwise, false . If left is null , the method returns false . Equals(String[]) Determines whether this instance and a specified string array have the same values. Declaration public bool Equals(string[] other) Parameters Type Name Description String [] other The string array to compare to this instance. Returns Type Description Boolean true if the value of other is the same as this instance; otherwise, false . Equals(String[], StringValues) Determines whether the specified string array and StringValues objects have the same values. Declaration public static bool Equals(string[] left, StringValues right) Parameters Type Name Description String [] left The string array to compare. StringValues right The StringValues to compare. Returns Type Description Boolean true if the value of left is the same as the value of right ; otherwise, false . GetEnumerator() Retrieves an object that can iterate through the individual strings in this StringValues . Declaration public StringValues.Enumerator GetEnumerator() Returns Type Description StringValues.Enumerator An enumerator that can be used to iterate through the StringValues . GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 IsNullOrEmpty(StringValues) Indicates whether the specified StringValues contains no string values. Declaration public static bool IsNullOrEmpty(StringValues value) Parameters Type Name Description StringValues value The StringValues to test. Returns Type Description Boolean true if value contains a single null or empty string or an empty array; otherwise, false. ToArray() Creates a string array from the current StringValues object. Declaration public string[] ToArray() Returns Type Description String [] A string array represented by this instance. Remarks If the StringValues contains a single string internally, it is copied to a new array. If the StringValues contains an array internally it returns that array instance. ToString() Converts the value of the current StringValues object to its equivalent string representation, with multiple values joined as a comma separated string. Declaration public override string ToString() Returns Type Description String A string representation of the value of the current StringValues object. Operators Equality(StringValues, StringValues) Determines whether two specified StringValues have the same values. Declaration public static bool operator ==(StringValues left, StringValues right) Parameters Type Name Description StringValues left The first StringValues to compare. StringValues right The second StringValues to compare. Returns Type Description Boolean true if the value of left is the same as the value of right ; otherwise, false . Equality(StringValues, Object) Determines whether the specified StringValues and Object , which must be a StringValues , String , or array of String , have the same value. Declaration public static bool operator ==(StringValues left, object right) Parameters Type Name Description StringValues left The StringValues to compare. Object right The Object to compare. Returns Type Description Boolean true if the left object is equal to the right ; otherwise, false . Equality(StringValues, String) Declaration public static bool operator ==(StringValues left, string right) Parameters Type Name Description StringValues left String right Returns Type Description Boolean Equality(StringValues, String[]) Declaration public static bool operator ==(StringValues left, string[] right) Parameters Type Name Description StringValues left String [] right Returns Type Description Boolean Equality(Object, StringValues) Determines whether the specified Object , which must be a StringValues , String , or array of String , and specified StringValues , have the same value. Declaration public static bool operator ==(object left, StringValues right) Parameters Type Name Description Object left The StringValues to compare. StringValues right The Object to compare. Returns Type Description Boolean true if the left object is equal to the right ; otherwise, false . Equality(String, StringValues) Declaration public static bool operator ==(string left, StringValues right) Parameters Type Name Description String left StringValues right Returns Type Description Boolean Equality(String[], StringValues) Declaration public static bool operator ==(string[] left, StringValues right) Parameters Type Name Description String [] left StringValues right Returns Type Description Boolean Implicit(StringValues to String) Defines an implicit conversion of a given StringValues to a string, with multiple values joined as a comma separated string. Declaration public static implicit operator string (StringValues values) Parameters Type Name Description StringValues values A StringValues to implicitly convert. Returns Type Description String Remarks Returns null where StringValues has been initialized from an empty string array or is Empty . Implicit(StringValues to String[]) Defines an implicit conversion of a given StringValues to a string array. Declaration public static implicit operator string[](StringValues value) Parameters Type Name Description StringValues value A StringValues to implicitly convert. Returns Type Description String [] Implicit(String to StringValues) Defines an implicit conversion of a given string to a StringValues . Declaration public static implicit operator StringValues(string value) Parameters Type Name Description String value A string to implicitly convert. Returns Type Description StringValues Implicit(String[] to StringValues) Defines an implicit conversion of a given string array to a StringValues . Declaration public static implicit operator StringValues(string[] values) Parameters Type Name Description String [] values A string array to implicitly convert. Returns Type Description StringValues Inequality(StringValues, StringValues) Determines whether two specified StringValues have different values. Declaration public static bool operator !=(StringValues left, StringValues right) Parameters Type Name Description StringValues left The first StringValues to compare. StringValues right The second StringValues to compare. Returns Type Description Boolean true if the value of left is different to the value of right ; otherwise, false . Inequality(StringValues, Object) Determines whether the specified StringValues and Object , which must be a StringValues , String , or array of String , have different values. Declaration public static bool operator !=(StringValues left, object right) Parameters Type Name Description StringValues left The StringValues to compare. Object right The Object to compare. Returns Type Description Boolean true if the left object is equal to the right ; otherwise, false . Inequality(StringValues, String) Determines whether the specified StringValues and String objects have different values. Declaration public static bool operator !=(StringValues left, string right) Parameters Type Name Description StringValues left The StringValues to compare. String right The String to compare. Returns Type Description Boolean true if the value of left is different to the value of right ; otherwise, false . Inequality(StringValues, String[]) Determines whether the specified StringValues and string array have different values. Declaration public static bool operator !=(StringValues left, string[] right) Parameters Type Name Description StringValues left The StringValues to compare. String [] right The string array to compare. Returns Type Description Boolean true if the value of left is different to the value of right ; otherwise, false . Inequality(Object, StringValues) Determines whether the specified Object and StringValues object have the same values. Declaration public static bool operator !=(object left, StringValues right) Parameters Type Name Description Object left The Object to compare. StringValues right The StringValues to compare. Returns Type Description Boolean true if the left object is equal to the right ; otherwise, false . Inequality(String, StringValues) Determines whether the specified String and StringValues objects have different values. Declaration public static bool operator !=(string left, StringValues right) Parameters Type Name Description String left The String to compare. StringValues right The StringValues to compare. Returns Type Description Boolean true if the value of left is different to the value of right ; otherwise, false . Inequality(String[], StringValues) Determines whether the specified string array and StringValues have different values. Declaration public static bool operator !=(string[] left, StringValues right) Parameters Type Name Description String [] left The string array to compare. StringValues right The StringValues to compare. Returns Type Description Boolean true if the value of left is different to the value of right ; otherwise, false . Implements System.Collections.Generic.IList<T> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.IEquatable<T> System.IEquatable<T> System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.TagFrequencyInfo.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.TagFrequencyInfo.html",
    "title": "Class TagFrequencyInfo | Abbot Docs",
    "keywords": "Class TagFrequencyInfo Information about the number of times a tag has been used. Inheritance Object TagFrequencyInfo Implements IEquatable < TagFrequencyInfo > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class TagFrequencyInfo : Object Constructors TagFrequencyInfo(TagFrequencyInfo) Declaration protected TagFrequencyInfo(TagFrequencyInfo original) Parameters Type Name Description TagFrequencyInfo original TagFrequencyInfo(String, Int32) Information about the number of times a tag has been used. Declaration public TagFrequencyInfo(string Tag, int Count) Parameters Type Name Description String Tag The tag name. Int32 Count The number of times it was used. Properties Count The number of times it was used. Declaration public int Count { get; set; } Property Value Type Description Int32 EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Tag The tag name. Declaration public string Tag { get; set; } Property Value Type Description String Methods <Clone>$() Declaration public virtual TagFrequencyInfo <Clone>$() Returns Type Description TagFrequencyInfo Deconstruct(out String, out Int32) Declaration public void Deconstruct(out string Tag, out int Count) Parameters Type Name Description String Tag Int32 Count Equals(TagFrequencyInfo) Declaration public virtual bool Equals(TagFrequencyInfo other) Parameters Type Name Description TagFrequencyInfo other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(TagFrequencyInfo, TagFrequencyInfo) Declaration public static bool operator ==(TagFrequencyInfo left, TagFrequencyInfo right) Parameters Type Name Description TagFrequencyInfo left TagFrequencyInfo right Returns Type Description Boolean Inequality(TagFrequencyInfo, TagFrequencyInfo) Declaration public static bool operator !=(TagFrequencyInfo left, TagFrequencyInfo right) Parameters Type Name Description TagFrequencyInfo left TagFrequencyInfo right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.TaskItemInfo.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.TaskItemInfo.html",
    "title": "Class TaskItemInfo | Abbot Docs",
    "keywords": "Class TaskItemInfo Information about a task. Inheritance Object TaskRequest TaskItemInfo Implements IEquatable < TaskRequest > IEquatable < TaskItemInfo > Inherited Members TaskRequest.Title TaskRequest.Assignee TaskRequest.Status TaskRequest.Customer TaskRequest.Conversation Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class TaskItemInfo : TaskRequest Constructors TaskItemInfo() Declaration public TaskItemInfo() TaskItemInfo(TaskItemInfo) Declaration protected TaskItemInfo(TaskItemInfo original) Parameters Type Name Description TaskItemInfo original Properties CreatedUtc The date this task was created. Declaration public DateTime CreatedUtc { get; set; } Property Value Type Description DateTime Creator The user that created this task. Declaration public IChatUser Creator { get; set; } Property Value Type Description IChatUser EqualityContract Declaration protected override Type EqualityContract { get; } Property Value Type Description Type Overrides TaskRequest.EqualityContract Id The database Id for the customer. Declaration public int Id { get; set; } Property Value Type Description Int32 Modified The date this task was last modified. Declaration public DateTime Modified { get; set; } Property Value Type Description DateTime ModifiedBy The user that last modified this task. Declaration public IChatUser ModifiedBy { get; set; } Property Value Type Description IChatUser Methods <Clone>$() Declaration public override TaskItemInfo <Clone>$() Returns Type Description TaskItemInfo Overrides TaskRequest.<Clone>$() Equals(TaskItemInfo) Declaration public virtual bool Equals(TaskItemInfo other) Parameters Type Name Description TaskItemInfo other Returns Type Description Boolean Equals(TaskRequest) Declaration public sealed override bool Equals(TaskRequest other) Parameters Type Name Description TaskRequest other Returns Type Description Boolean Overrides TaskRequest.Equals(TaskRequest) Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean Overrides TaskRequest.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides TaskRequest.GetHashCode() PrintMembers(StringBuilder) Declaration protected override bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean Overrides TaskRequest.PrintMembers(StringBuilder) ToString() Declaration public override string ToString() Returns Type Description String Overrides TaskRequest.ToString() Operators Equality(TaskItemInfo, TaskItemInfo) Declaration public static bool operator ==(TaskItemInfo left, TaskItemInfo right) Parameters Type Name Description TaskItemInfo left TaskItemInfo right Returns Type Description Boolean Inequality(TaskItemInfo, TaskItemInfo) Declaration public static bool operator !=(TaskItemInfo left, TaskItemInfo right) Parameters Type Name Description TaskItemInfo left TaskItemInfo right Returns Type Description Boolean Implements System.IEquatable<T> System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.TaskItemStatus.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.TaskItemStatus.html",
    "title": "Class TaskItemStatus | Abbot Docs",
    "keywords": "Class TaskItemStatus The status of a Task. Inheritance Object TaskItemStatus Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public sealed class TaskItemStatus : Enum Fields Blocked The task is blocked. Declaration public const TaskItemStatus Blocked Field Value Type Description TaskItemStatus Closed The task is closed. Declaration public const TaskItemStatus Closed Field Value Type Description TaskItemStatus InProgress The task is in-progress, Declaration public const TaskItemStatus InProgress Field Value Type Description TaskItemStatus None The task has no status. Declaration public const TaskItemStatus None Field Value Type Description TaskItemStatus Open The task is opened. Declaration public const TaskItemStatus Open Field Value Type Description TaskItemStatus value__ Declaration public int value__ Field Value Type Description Int32"
  },
  "reference/csharp/Serious.Abbot.Scripting.TaskRequest.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.TaskRequest.html",
    "title": "Class TaskRequest | Abbot Docs",
    "keywords": "Class TaskRequest Used to create or update a task. Inheritance Object TaskRequest TaskItemInfo Implements IEquatable < TaskRequest > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class TaskRequest : Object Constructors TaskRequest() Declaration public TaskRequest() TaskRequest(TaskRequest) Declaration protected TaskRequest(TaskRequest original) Parameters Type Name Description TaskRequest original Properties Assignee The person that this task is assigned to. Declaration public IChatUser Assignee { get; set; } Property Value Type Description IChatUser Conversation The conversation this task was created from. Declaration public ChatConversationInfo Conversation { get; set; } Property Value Type Description ChatConversationInfo Customer The customer this task is for. Declaration public CustomerInfo Customer { get; set; } Property Value Type Description CustomerInfo EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Status The status of the task. Declaration public TaskItemStatus Status { get; set; } Property Value Type Description TaskItemStatus Title The title of the task. Declaration public string Title { get; set; } Property Value Type Description String Methods <Clone>$() Declaration public virtual TaskRequest <Clone>$() Returns Type Description TaskRequest Equals(TaskRequest) Declaration public virtual bool Equals(TaskRequest other) Parameters Type Name Description TaskRequest other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(TaskRequest, TaskRequest) Declaration public static bool operator ==(TaskRequest left, TaskRequest right) Parameters Type Name Description TaskRequest left TaskRequest right Returns Type Description Boolean Inequality(TaskRequest, TaskRequest) Declaration public static bool operator !=(TaskRequest left, TaskRequest right) Parameters Type Name Description TaskRequest left TaskRequest right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.Threshold-1.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.Threshold-1.html",
    "title": "Class Threshold<T> | Abbot Docs",
    "keywords": "Class Threshold<T> Represents a threshold with a warning and critical level Inheritance Object Threshold<T> Implements IEquatable < Threshold <T>> Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class Threshold<T> : Object where T : struct, IComparable<T>, ValueType Type Parameters Name Description T The type of the value for the threshold. Constructors Threshold(Threshold<T>) Declaration protected Threshold(Threshold<T> original) Parameters Type Name Description Threshold <T> original Threshold(Nullable<T>, Nullable<T>) Represents a threshold with a warning and critical level Declaration public Threshold(Nullable<T> Warning, Nullable<T> Deadline) Parameters Type Name Description Nullable <T> Warning If the value goes above this level, the resource should be set to a Warning state. Nullable <T> Deadline If the value goes above this level, the resource should be set to an Overdue state. Properties Deadline If the value goes above this level, the resource should be set to an Overdue state. Declaration public Nullable<T> Deadline { get; set; } Property Value Type Description Nullable <T> EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Warning If the value goes above this level, the resource should be set to a Warning state. Declaration public Nullable<T> Warning { get; set; } Property Value Type Description Nullable <T> Methods <Clone>$() Declaration public virtual Threshold<T> <Clone>$() Returns Type Description Threshold <T> Deconstruct(out Nullable<T>, out Nullable<T>) Declaration public void Deconstruct(out Nullable<T> Warning, out Nullable<T> Deadline) Parameters Type Name Description Nullable <T> Warning Nullable <T> Deadline Equals(Threshold<T>) Declaration public virtual bool Equals(Threshold<T> other) Parameters Type Name Description Threshold <T> other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(Threshold<T>, Threshold<T>) Declaration public static bool operator ==(Threshold<T> left, Threshold<T> right) Parameters Type Name Description Threshold <T> left Threshold <T> right Returns Type Description Boolean Inequality(Threshold<T>, Threshold<T>) Declaration public static bool operator !=(Threshold<T> left, Threshold<T> right) Parameters Type Name Description Threshold <T> left Threshold <T> right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.TimexConstants.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.TimexConstants.html",
    "title": "Class TimexConstants | Abbot Docs",
    "keywords": "Class TimexConstants Helper constants for Timex types. The original definitions are in Microsoft.Recognizers.Text.DataTypes.TimexExpression.Constants.TimexTypes ( https://github.com/microsoft/Recognizers-Text/blob/45897758e92d2bf2bf0fc398e8c6461a2f7d1d38/.NET/Microsoft.Recognizers.Text.DataTypes.TimexExpression/Constants.cs#L44 ) But they are static strings, which cannot be used in switch statements. This is due to be fixed upstream but the PR hasn't merged yet Inheritance Object TimexConstants Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public static class TimexConstants : Object Fields Date Declaration public const string Date = \"date\" Field Value Type Description String DateRange Declaration public const string DateRange = \"daterange\" Field Value Type Description String DateTime Declaration public const string DateTime = \"datetime\" Field Value Type Description String DateTimeRange Declaration public const string DateTimeRange = \"datetimerange\" Field Value Type Description String Definite Declaration public const string Definite = \"definite\" Field Value Type Description String Duration Declaration public const string Duration = \"duration\" Field Value Type Description String Present Declaration public const string Present = \"present\" Field Value Type Description String Set Declaration public const string Set = \"set\" Field Value Type Description String Time Declaration public const string Time = \"time\" Field Value Type Description String TimeRange Declaration public const string TimeRange = \"timerange\" Field Value Type Description String"
  },
  "reference/csharp/Serious.Abbot.Scripting.TimexSet.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.TimexSet.html",
    "title": "Class TimexSet | Abbot Docs",
    "keywords": "Class TimexSet Inheritance Object TimexSet Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class TimexSet : TimexSet Constructors TimexSet(String) Declaration public TimexSet(string timex) Parameters Type Name Description String timex Methods ToNaturalLanguage() Returns a natural language representation of this time set. Declaration public string ToNaturalLanguage() Returns Type Description String ToString() Declaration public override string ToString() Returns Type Description String"
  },
  "reference/csharp/Serious.Abbot.Scripting.TrendsSummary.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.TrendsSummary.html",
    "title": "Class TrendsSummary | Abbot Docs",
    "keywords": "Class TrendsSummary Response time summaries. Inheritance Object TrendsSummary Implements IEquatable < TrendsSummary > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class TrendsSummary : Object Constructors TrendsSummary(TrendsSummary) Declaration protected TrendsSummary(TrendsSummary original) Parameters Type Name Description TrendsSummary original TrendsSummary(Nullable<Double>, Nullable<Double>, Nullable<Double>, Nullable<Double>, Nullable<Double>, Nullable<Int32>) Response time summaries. Declaration public TrendsSummary(Nullable<double> AverageTimeToFirstResponse, Nullable<double> AverageTimeToResponse, Nullable<double> AverageTimeToFirstResponseDuringCoverage, Nullable<double> AverageTimeToResponseDuringCoverage, Nullable<double> AverageTimeToClose, Nullable<int> NewConversations) Parameters Type Name Description Nullable < Double > AverageTimeToFirstResponse Nullable < Double > AverageTimeToResponse Nullable < Double > AverageTimeToFirstResponseDuringCoverage Nullable < Double > AverageTimeToResponseDuringCoverage Nullable < Double > AverageTimeToClose Nullable < Int32 > NewConversations Properties AverageTimeToClose Declaration public Nullable<double> AverageTimeToClose { get; set; } Property Value Type Description Nullable < Double > AverageTimeToFirstResponse Declaration public Nullable<double> AverageTimeToFirstResponse { get; set; } Property Value Type Description Nullable < Double > AverageTimeToFirstResponseDuringCoverage Declaration public Nullable<double> AverageTimeToFirstResponseDuringCoverage { get; set; } Property Value Type Description Nullable < Double > AverageTimeToResponse Declaration public Nullable<double> AverageTimeToResponse { get; set; } Property Value Type Description Nullable < Double > AverageTimeToResponseDuringCoverage Declaration public Nullable<double> AverageTimeToResponseDuringCoverage { get; set; } Property Value Type Description Nullable < Double > EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type NewConversations Declaration public Nullable<int> NewConversations { get; set; } Property Value Type Description Nullable < Int32 > Methods <Clone>$() Declaration public virtual TrendsSummary <Clone>$() Returns Type Description TrendsSummary Deconstruct(out Nullable<Double>, out Nullable<Double>, out Nullable<Double>, out Nullable<Double>, out Nullable<Double>, out Nullable<Int32>) Declaration public void Deconstruct(out Nullable<double> AverageTimeToFirstResponse, out Nullable<double> AverageTimeToResponse, out Nullable<double> AverageTimeToFirstResponseDuringCoverage, out Nullable<double> AverageTimeToResponseDuringCoverage, out Nullable<double> AverageTimeToClose, out Nullable<int> NewConversations) Parameters Type Name Description Nullable < Double > AverageTimeToFirstResponse Nullable < Double > AverageTimeToResponse Nullable < Double > AverageTimeToFirstResponseDuringCoverage Nullable < Double > AverageTimeToResponseDuringCoverage Nullable < Double > AverageTimeToClose Nullable < Int32 > NewConversations Equals(TrendsSummary) Declaration public virtual bool Equals(TrendsSummary other) Parameters Type Name Description TrendsSummary other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(TrendsSummary, TrendsSummary) Declaration public static bool operator ==(TrendsSummary left, TrendsSummary right) Parameters Type Name Description TrendsSummary left TrendsSummary right Returns Type Description Boolean Inequality(TrendsSummary, TrendsSummary) Declaration public static bool operator !=(TrendsSummary left, TrendsSummary right) Parameters Type Name Description TrendsSummary left TrendsSummary right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.UserProfileField.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.UserProfileField.html",
    "title": "Class UserProfileField | Abbot Docs",
    "keywords": "Class UserProfileField Provides detailed information about a user profile field, as returned from the Users client. Inheritance Object UserProfileField Implements IEquatable < UserProfileField > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class UserProfileField : Object Constructors UserProfileField() Declaration public UserProfileField() UserProfileField(UserProfileField) Declaration protected UserProfileField(UserProfileField original) Parameters Type Name Description UserProfileField original Properties Alt The alternate text for the user profile field. You should generally prefer to use this value when displaying the profile field. Declaration public string Alt { get; set; } Property Value Type Description String EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Id The platform-specific ID of the user profile field. Declaration public string Id { get; set; } Property Value Type Description String Value The value of the user profile field. Declaration public string Value { get; set; } Property Value Type Description String Methods <Clone>$() Declaration public virtual UserProfileField <Clone>$() Returns Type Description UserProfileField Equals(UserProfileField) Declaration public virtual bool Equals(UserProfileField other) Parameters Type Name Description UserProfileField other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(UserProfileField, UserProfileField) Declaration public static bool operator ==(UserProfileField left, UserProfileField right) Parameters Type Name Description UserProfileField left UserProfileField right Returns Type Description Boolean Inequality(UserProfileField, UserProfileField) Declaration public static bool operator !=(UserProfileField left, UserProfileField right) Parameters Type Name Description UserProfileField left UserProfileField right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/csharp/Serious.Abbot.Scripting.Utilities.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.Utilities.html",
    "title": "Namespace Serious.Abbot.Scripting.Utilities | Abbot Docs",
    "keywords": "Namespace Serious.Abbot.Scripting.Utilities Interfaces IMetadataClient A client used to manage room metadata for the organization. IUsersClient Used to retrieve information about Slack users. IUtilities A useful grab bag of utility methods for C# skill authors."
  },
  "reference/csharp/Serious.Abbot.Scripting.Utilities.IMetadataClient.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.Utilities.IMetadataClient.html",
    "title": "Interface IMetadataClient | Abbot Docs",
    "keywords": "Interface IMetadataClient A client used to manage room metadata for the organization. Namespace : Serious.Abbot.Scripting.Utilities Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IMetadataClient Methods CreateAsync(MetadataFieldInfo) Creates a metadata field for the org. Declaration Task<AbbotResponse<MetadataFieldInfo>> CreateAsync(MetadataFieldInfo metadataField) Parameters Type Name Description MetadataFieldInfo metadataField The values for the metadata field to create. Returns Type Description Task < AbbotResponse < MetadataFieldInfo >> A IResult that indicates whether the operation succeeded or not and contains information about the created customer. GetAllAsync() Gets all the metadata fields in your org. Declaration Task<AbbotResponse<IReadOnlyList<MetadataFieldInfo>>> GetAllAsync() Returns Type Description Task < AbbotResponse < IReadOnlyList < MetadataFieldInfo >>> A IResult that indicates whether the operation succeeded or not and contains information about the set of customers in the org. GetByNameAsync(String) Gets the metadata field with the specified name. Declaration Task<AbbotResponse<MetadataFieldInfo>> GetByNameAsync(string name) Parameters Type Name Description String name Returns Type Description Task < AbbotResponse < MetadataFieldInfo >> A IResult that indicates whether the operation succeeded or not and contains information about the customer. UpdateAsync(String, MetadataFieldInfo) Updates a metadata field for the org. If a field is not found, returns null. Declaration Task<AbbotResponse<MetadataFieldInfo>> UpdateAsync(string name, MetadataFieldInfo metadataField) Parameters Type Name Description String name The name of the field to update. MetadataFieldInfo metadataField The updated values for the metadata field. Returns Type Description Task < AbbotResponse < MetadataFieldInfo >> A IResult that indicates whether the operation succeeded or not and contains information about the updated customer."
  },
  "reference/csharp/Serious.Abbot.Scripting.Utilities.IUsersClient.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.Utilities.IUsersClient.html",
    "title": "Interface IUsersClient | Abbot Docs",
    "keywords": "Interface IUsersClient Used to retrieve information about Slack users. Namespace : Serious.Abbot.Scripting.Utilities Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IUsersClient Methods GetTarget(String) Retrieves a handle that can be used to send messages to a user given their platform-specific ID (for example, the User ID 'Unnnnnnn' in Slack). Declaration IUserMessageTarget GetTarget(string id) Parameters Type Name Description String id The ID of the user to retrieve Returns Type Description IUserMessageTarget An IUserMessageTarget , suitable for use in To , referring to the user. Remarks This method does not confirm that the user exists. If the user does not exist, sending a message to it will fail silently. GetUserAsync(String) Retrieves details about a user, including custom profile fields. Declaration Task<AbbotResponse<IUserDetails>> GetUserAsync(string id) Parameters Type Name Description String id The ID of the user to retrieve Returns Type Description Task < AbbotResponse < IUserDetails >>"
  },
  "reference/csharp/Serious.Abbot.Scripting.Utilities.IUtilities.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.Utilities.IUtilities.html",
    "title": "Interface IUtilities | Abbot Docs",
    "keywords": "Interface IUtilities A useful grab bag of utility methods for C# skill authors. Namespace : Serious.Abbot.Scripting.Utilities Assembly : Abbot.Scripting.Interfaces.dll Syntax public interface IUtilities Methods CreateRandom() Returns a class that derives from Random , but is cryptographically strong. Declaration Random CreateRandom() Returns Type Description Random Deserialize<T>(String) Deserialize a json string to a given object Declaration T Deserialize<T>(string value) Parameters Type Name Description String value The JSON string to deserialize. Returns Type Description T Type Parameters Name Description T GetGeocodeAsync(String, Boolean) Returns the coordinates and name of an address. The address can be specified in the same way you'd use with mapping software such as specifying a zip, city, full address, name of a business, or even cross streets. Declaration Task<ILocation> GetGeocodeAsync(string address, bool includeTimezone = false) Parameters Type Name Description String address An address to geocode. Boolean includeTimezone Optional. Whether or not to include the time zone for the location in the response. Returns Type Description Task < ILocation > A task with an ILocation that matches the address. If no location matches the input, then returns null. GetRandomElement<T>(IReadOnlyList<T>) Retrieves a random element from a collection. This happens often enough it's nice having a utility method. Declaration T GetRandomElement<T>(IReadOnlyList<T> list) Parameters Type Name Description IReadOnlyList <T> list The collection to retrieve the random item from. Returns Type Description T Type Parameters Name Description T Serialize(Object, Boolean) Serializes an object to json Declaration string Serialize(object value, bool withTypes = false) Parameters Type Name Description Object value The object to serialize. Boolean withTypes When true , includes type information in the serialized output. Returns Type Description String TryParseSlackUrl(String, out IMessageTarget) Attempts to parse a Slack URL into an IMessageTarget that can be used to send to it. Declaration bool TryParseSlackUrl(string url, out IMessageTarget conversation) Parameters Type Name Description String url The URL to parse. IMessageTarget conversation An IMessageTarget that can be used to send messages to that destination. Returns Type Description Boolean A boolean indicating if parsing was successful. Remarks You can pass any of the following URLs to this method: A URL to a Slack message, to refer to a thread, for example: https://myorg.slack.com/archives/C0000000000/p0000000000000000 A URL to a Slack DM session, for example: https://myorg.slack.com/archives/D0000000000 A URL to a Slack channel, for example: https://myorg.slack.com/archives/C0000000000 TryParseSlackUrl(Uri, out IMessageTarget) Attempts to parse a Slack URL into an IMessageTarget that can be used to send to it. Declaration bool TryParseSlackUrl(Uri url, out IMessageTarget conversation) Parameters Type Name Description Uri url The URL to parse. IMessageTarget conversation An IMessageTarget that can be used to send messages to that destination. Returns Type Description Boolean A boolean indicating if parsing was successful. Remarks You can pass any of the following URLs to this method: A URL to a Slack message, to refer to a thread, for example: https://myorg.slack.com/archives/C0000000000/p0000000000000000 A URL to a Slack DM session, for example: https://myorg.slack.com/archives/D0000000000 A URL to a Slack channel, for example: https://myorg.slack.com/archives/C0000000000"
  },
  "reference/csharp/Serious.Abbot.Scripting.WorkingHours.html": {
    "href": "reference/csharp/Serious.Abbot.Scripting.WorkingHours.html",
    "title": "Class WorkingHours | Abbot Docs",
    "keywords": "Class WorkingHours A set of working hours. Inheritance Object WorkingHours Implements IEquatable < WorkingHours > Namespace : Serious.Abbot.Scripting Assembly : Abbot.Scripting.Interfaces.dll Syntax public class WorkingHours : Object Constructors WorkingHours(WorkingHours) Declaration protected WorkingHours(WorkingHours original) Parameters Type Name Description WorkingHours original WorkingHours(TimeOnly, TimeOnly) A set of working hours. Declaration public WorkingHours(TimeOnly Start, TimeOnly End) Parameters Type Name Description TimeOnly Start The start time. TimeOnly End The end time. Fields Default The default set of working hours, aka 9am to 5pm. What a way to make a living! Declaration public static readonly WorkingHours Default Field Value Type Description WorkingHours Properties Duration The duration of the working hours. Declaration public TimeSpan Duration { get; } Property Value Type Description TimeSpan Remarks You might think you could just subtract Start from End, but you'd be wrong! Consider a graveyard shift worker who starts in the evening and finishes the following morning. End The end time. Declaration public TimeOnly End { get; set; } Property Value Type Description TimeOnly EqualityContract Declaration protected virtual Type EqualityContract { get; } Property Value Type Description Type Start The start time. Declaration public TimeOnly Start { get; set; } Property Value Type Description TimeOnly Methods <Clone>$() Declaration public virtual WorkingHours <Clone>$() Returns Type Description WorkingHours Contains(LocalTime) Checks if the given time is within the working hours. Declaration public bool Contains(LocalTime time) Parameters Type Name Description NodaTime.LocalTime time The time to check against the working hours. Returns Type Description Boolean Returns true if the provided time is within working hours. Remarks You might think that this is a simple \"time is between Start and End\" check, but you'd be wrong! Consider a graveyard shift worker who starts in the evening and finishes the following morning. The basic rule here is that \"working hours\" go from Start to End, regardless of the current Date. Contains(DateTime, String) Checks if the time represented by the given UTC date is is within the working hours for the specified timezone. Declaration public bool Contains(DateTime utcDate, string timezoneId) Parameters Type Name Description DateTime utcDate The UTC date. String timezoneId An IANA timezone id. Returns Type Description Boolean Contains(TimeOnly) Checks if the given time is within the working hours. Declaration public bool Contains(TimeOnly time) Parameters Type Name Description TimeOnly time The time to check against the working hours. Returns Type Description Boolean Returns true if the provided time is within working hours. Remarks You might think that this is a simple \"time is between Start and End\" check, but you'd be wrong! Consider a graveyard shift worker who starts in the evening and finishes the following morning. The basic rule here is that \"working hours\" go from Start to End, regardless of the current Date. Deconstruct(out TimeOnly, out TimeOnly) Declaration public void Deconstruct(out TimeOnly Start, out TimeOnly End) Parameters Type Name Description TimeOnly Start TimeOnly End Equals(WorkingHours) Declaration public virtual bool Equals(WorkingHours other) Parameters Type Name Description WorkingHours other Returns Type Description Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 GetNextDateWithinWorkingHours(DateTime, String) Given a DateTime and a timezone, returns the DateTime of the start of the next working hours. Declaration public DateTime GetNextDateWithinWorkingHours(DateTime utcDate, string timezoneId) Parameters Type Name Description DateTime utcDate The UTC date. String timezoneId An IANA timezone id. Returns Type Description DateTime Humanize() Returns a human-readable string representation of the working hours. Declaration public string Humanize() Returns Type Description String PrintMembers(StringBuilder) Declaration protected virtual bool PrintMembers(StringBuilder builder) Parameters Type Name Description StringBuilder builder Returns Type Description Boolean ToString() Declaration public override string ToString() Returns Type Description String Operators Equality(WorkingHours, WorkingHours) Declaration public static bool operator ==(WorkingHours left, WorkingHours right) Parameters Type Name Description WorkingHours left WorkingHours right Returns Type Description Boolean Inequality(WorkingHours, WorkingHours) Declaration public static bool operator !=(WorkingHours left, WorkingHours right) Parameters Type Name Description WorkingHours left WorkingHours right Returns Type Description Boolean Implements System.IEquatable<T>"
  },
  "reference/index.html": {
    "href": "reference/index.html",
    "title": "Bot Reference Docs | Abbot Docs",
    "keywords": "Bot Reference Docs Every skill receives a Bot object with a set of properties and methods. The set of properties and methods may differ slightly based on the language of the skill. The following are the languages Abbot supports and the reference docs for the Bot object. C# Bot Reference Python Bot Reference JavaScript Bot Reference"
  },
  "reference/javascript/ApiClient.html": {
    "href": "reference/javascript/ApiClient.html",
    "title": "Class ApiClient | Abbot Docs",
    "keywords": "Class ApiClient Api Client for the skill runner APIs hosted on abbot-web. This class understands the authentication mechanism when calling a skill runner API. Constructors ApiClient() Declaration new ApiClient()"
  },
  "reference/javascript/Argument.html": {
    "href": "reference/javascript/Argument.html",
    "title": "Class Argument | Abbot Docs",
    "keywords": "Class Argument A parsed argument passed to this skill. Constructors Argument(value, originalText) Declaration new Argument(value, originalText) Parameters Type Name Description string value The normalized argument value. string originalText The original argument value. For quoted values this would include the surrounding quotes."
  },
  "reference/javascript/Bot.html": {
    "href": "reference/javascript/Bot.html",
    "title": "Class Bot | Abbot Docs",
    "keywords": "Class Bot The main interface with Abbot. Instantiated in your script as bot . Constructors Bot() Declaration new Bot() Members outputs When called from a playbook, this supplies outputs that can be consumed by the next step in the playbook. Declaration outputs isPatternMatch Whether or not this skill is being called because of a pattern match. Declaration isPatternMatch isChat True if this is being run in chat. Otherwise falsey. Declaration isChat Functions replyWithButtons(message, buttons, buttonsLabel, imageUrl, title, color, options) Sends a reply along with a set of buttons. Clicking a button will call back into this skill. Declaration function replyWithButtons(message, buttons, buttonsLabel, imageUrl, title, color, options) Parameters Type Name Description string message The message to send as a response. abbot-js.Array.<Button> buttons The set of buttons to display (Maximum 6). string buttonsLabel The text that serves as a label for the set of buttons (optional). string imageUrl An image to render before the set of buttons (optional). string title A title to render (optional). string color The color to use for the sidebar (Slack Only) in hex (ex. #3AA3E3) (optional). object options A set of message options. Properties Type Name Description object to The user, room, or thread to send the message to. replyWithImage(image, message, title, titleUrl, color, options) Sends a reply along with an image attachment. The image can be a URL to an image or a base64 encoded image. Declaration function replyWithImage(image, message, title, titleUrl, color, options) Parameters Type Name Description string image Either the URL to an image or the base64 encoded image. string message The message to send as a response (optional). string title A title to render (optional). string titleUrl If specified, makes the title a link to this URL. Ignored if title is not set. (optional). string color The color to use for the sidebar (Slack Only) in hex (ex. #3AA3E3) (optional). object options A set of message options. Properties Type Name Description object to The user, room, or thread to send the message to. replyWithTicketPrompt() Replies with an ephemeral message that displays a button to open a ticket for each enabled ticketing system. Declaration function replyWithTicketPrompt() replyLater(message, delay_in_seconds, options) Send a reply after a number of seconds. Declaration function replyLater(message, delay_in_seconds, options) Parameters Type Name Description string message The message to send as a response. number delay_in_seconds The number of seconds to delay before sending the message. object options A set of message options. Properties Type Name Description object to The user, room, or thread to send the message to. signal(name, args) Raises a signal from the skill with the specified name and arguments. Declaration function signal(name, args) Parameters Type Name Description string name The name of the signal to send. string args The arguments to pass to the skills that are subscribed to this signal. Returns Type Description abbot-js.ApiResult a result indicating success or failure"
  },
  "reference/javascript/Brain.html": {
    "href": "reference/javascript/Brain.html",
    "title": "Class Brain | Abbot Docs",
    "keywords": "Class Brain Abbot's brain. This has been instantiated for you as bot.brain . Constructors Brain() Declaration new Brain() Functions read(key) Read a value from Abbot's brain. Declaration function read(key) Parameters Type Name Description string key Returns Type Description Object get(key) An alias to read . Declaration function get(key) Parameters Type Name Description string key Returns Type Description Object write(key, value) Write an object to Abbot's brain. Declaration function write(key, value) Parameters Type Name Description string key abbot-js.* value Returns Type Description Object list() Return a list of all items in Abbot's brain. Declaration function list() Returns Type Description abbot-js.Array.<Object> delete(key) Delete an object from Abbot's brain Declaration function delete(key) Parameters Type Name Description string key Returns Type Description string"
  },
  "reference/javascript/Button.html": {
    "href": "reference/javascript/Button.html",
    "title": "Class Button | Abbot Docs",
    "keywords": "Class Button A button presented to a user. Constructors Button(title, args) Declaration new Button(title, args) Parameters Type Name Description string title The title displayed on the button. string args The arguments to pass back to this skill when the button is clicked. Members arguments The arguments to pass back to this skill when the button is clicked. Declaration arguments"
  },
  "reference/javascript/Coordinate.html": {
    "href": "reference/javascript/Coordinate.html",
    "title": "Class Coordinate | Abbot Docs",
    "keywords": "Class Coordinate A Coordinate pair Constructors Coordinate(latitude, longitude) Declaration new Coordinate(latitude, longitude) Parameters Type Name Description number latitude Latitude number longitude Longitude"
  },
  "reference/javascript/Customer.html": {
    "href": "reference/javascript/Customer.html",
    "title": "Class Customer | Abbot Docs",
    "keywords": "Class Customer A customer. Constructors Customer(id, name, metadata) Declaration new Customer(id, name, metadata) Parameters Type Name Description string id The database id of the customer. string name The name of the customer. undefinedMap.<string, string> metadata The metadata of the customer."
  },
  "reference/javascript/index.html": {
    "href": "reference/javascript/index.html",
    "title": "Package abbot-js | Abbot Docs",
    "keywords": "Package abbot-js Classes Time A time of day independent of a date or timezone. WorkingHours Represents a range of time during which a user is working. Utils Convenience utilities for skill development. This has been instantiated for you as bot.utils . UserProfile A Chat User with profile information. User A Chat User. UserMessageTarget A handle that can be used to send messages to a user. Users Abbot's users client. Used to manage Slack users. This has been instantiated for you as bot.users . Brain Abbot's brain. This has been instantiated for you as bot.brain . SourceMessage The source message for calling a skill. Either the message that invoked the skill or the message that was reacted to such as a button click or reaction. Signaler Not to be confused with SignalR, use this to raise signals by calling the signal api endpoint https://ab.bot/api/skills/{id}/signal RootSourceSkill The skill that is the root source of a signal. This is the skill that kicked off the current signal chain. SourceSkill Information about the source skill that raised a signal. SignalSource Information about the source of a signal. SignalEvent A signal raised by a skill. Secrets Abbot's secrets manager. This has been instantiated for you as bot.secrets . Room A room is a place where people can chat. RoomMessageTarget A handle that can be used to send messages to a room. Rooms Abbot's rooms client. Used to manage Slack conversations. This has been instantiated for you as bot.rooms . Request A request that's been sent to Abbot. ReplyClient Used to send replies back to chat. If we have a valid ConversationReference, then replies are sent asynchronously at the time bot.reply is called. Otherwise replies are returned synchrously in the response to the request that calls this skill. Location A User's Location Customer A customer. Coordinate A Coordinate pair Bot The main interface with Abbot. Instantiated in your script as bot . MessageAttachment An attachment to the reply that may contain UI elements to render such as buttons. Button A button presented to a user. RoomArgument A parsed argument that represents a mentioned room passed to this skill. MentionArgument A parsed argument that represents a mentioned user passed to this skill. Argument A parsed argument passed to this skill. ApiClient Api Client for the skill runner APIs hosted on abbot-web. This class understands the authentication mechanism when calling a skill runner API."
  },
  "reference/javascript/Location.html": {
    "href": "reference/javascript/Location.html",
    "title": "Class Location | Abbot Docs",
    "keywords": "Class Location A User's Location Constructors Location(formattedAddress, coordinate, timeZone) Declaration new Location(formattedAddress, coordinate, timeZone) Parameters Type Name Description string formattedAddress A formatted address undefinedCoordinate coordinate The Location's Coordinate string timeZone This location's time zone (optional)"
  },
  "reference/javascript/MentionArgument.html": {
    "href": "reference/javascript/MentionArgument.html",
    "title": "Class MentionArgument | Abbot Docs",
    "keywords": "Class MentionArgument A parsed argument that represents a mentioned user passed to this skill. Constructors MentionArgument(value, originalText, mentioned) Declaration new MentionArgument(value, originalText, mentioned) Parameters Type Name Description string value The normalized argument value. string originalText The original argument value. For quoted values this would include the surrounding quotes. undefinedUser mentioned The mentioned user."
  },
  "reference/javascript/MessageAttachment.html": {
    "href": "reference/javascript/MessageAttachment.html",
    "title": "Class MessageAttachment | Abbot Docs",
    "keywords": "Class MessageAttachment An attachment to the reply that may contain UI elements to render such as buttons. Constructors MessageAttachment(buttons, buttonsLabel, imageUrl, title, titleUrl, color) Declaration new MessageAttachment(buttons, buttonsLabel, imageUrl, title, titleUrl, color) Parameters Type Name Description undefinedArray.<Button> buttons The set of buttons to display (Maximum 6). string buttonsLabel The text that serves as a label for the set of buttons (optional). string imageUrl An image to render before the set of buttons (optional). string title A title to render (optional). string titleUrl If specified, makes the title a link to this URL. Ignored if title is not set. (optional). string color The color to use for the sidebar (Slack Only) in hex (ex. #3AA3E3) (optional)."
  },
  "reference/javascript/ReplyClient.html": {
    "href": "reference/javascript/ReplyClient.html",
    "title": "Class ReplyClient | Abbot Docs",
    "keywords": "Class ReplyClient Used to send replies back to chat. If we have a valid ConversationReference, then replies are sent asynchronously at the time bot.reply is called. Otherwise replies are returned synchrously in the response to the request that calls this skill. Constructors ReplyClient() Declaration new ReplyClient() Functions reply(message, directMessage, options) Send a reply. Declaration function reply(message, directMessage, options) Parameters Type Name Description string message The message to send as a response. boolean directMessage If true, sends the message as a direct message to the user. Default is false. object options A set of message options. Properties Type Name Description object to The user, room, or thread to send the message to. replyWithButtons(message, buttons, buttonsLabel, imageUrl, title, color, options) Sends a reply along with a set of buttons. Clicking a button will call back into this skill. Declaration function replyWithButtons(message, buttons, buttonsLabel, imageUrl, title, color, options) Parameters Type Name Description string message The message to send as a response. abbot-js.Array.<Button> buttons The set of buttons to display (Maximum 6). string buttonsLabel The text that serves as a label for the set of buttons (optional). string imageUrl An image to render before the set of buttons (optional). string title A title to render (optional). string color The color to use for the sidebar (Slack Only) in hex (ex. #3AA3E3) (optional). object options A set of message options. Properties Type Name Description object to The user, room, or thread to send the message to. replyWithImage(image, message, title, titleUrl, color, options) Sends a reply along with an image attachment. The image can be a URL to an image or a base64 encoded image. Declaration function replyWithImage(image, message, title, titleUrl, color, options) Parameters Type Name Description string image Either the URL to an image or the base64 encoded image. string message The message to send as a response (optional). string title A title to render (optional). string titleUrl If specified, makes the title a link to this URL. Ignored if title is not set. (optional). string color The color to use for the sidebar (Slack Only) in hex (ex. #3AA3E3) (optional). object options A set of message options. Properties Type Name Description object to The user, room, or thread to send the message to. replyLater(message, delay_in_seconds, options) Send a reply after a number of seconds. Declaration function replyLater(message, delay_in_seconds, options) Parameters Type Name Description string message The message to send as a response. number delay_in_seconds The number of seconds to delay before sending the message. object options A set of message options. Properties Type Name Description object to The user, room, or thread to send the message to."
  },
  "reference/javascript/Request.html": {
    "href": "reference/javascript/Request.html",
    "title": "Class Request | Abbot Docs",
    "keywords": "Class Request A request that's been sent to Abbot. Constructors Request() Declaration new Request()"
  },
  "reference/javascript/Room.html": {
    "href": "reference/javascript/Room.html",
    "title": "Class Room | Abbot Docs",
    "keywords": "Class Room A room is a place where people can chat. Constructors Room(id, name, cacheKey) Declaration new Room(id, name, cacheKey) Parameters Type Name Description string id The id of the room string name The name of the room string cacheKey Convenient property to use as a cache key for the room. Returns the room id. If that's null, returns the room name."
  },
  "reference/javascript/RoomArgument.html": {
    "href": "reference/javascript/RoomArgument.html",
    "title": "Class RoomArgument | Abbot Docs",
    "keywords": "Class RoomArgument A parsed argument that represents a mentioned room passed to this skill. Constructors RoomArgument(value, originalText, room) Declaration new RoomArgument(value, originalText, room) Parameters Type Name Description string value The normalized argument value. string originalText The original argument value. For quoted values this would include the surrounding quotes. undefinedRoom room The mentioned room."
  },
  "reference/javascript/RoomMessageTarget.html": {
    "href": "reference/javascript/RoomMessageTarget.html",
    "title": "Class RoomMessageTarget | Abbot Docs",
    "keywords": "Class RoomMessageTarget A handle that can be used to send messages to a room. Constructors RoomMessageTarget(id) Declaration new RoomMessageTarget(id) Parameters Type Name Description string id The id of the room"
  },
  "reference/javascript/Rooms.html": {
    "href": "reference/javascript/Rooms.html",
    "title": "Class Rooms | Abbot Docs",
    "keywords": "Class Rooms Abbot's rooms client. Used to manage Slack conversations. This has been instantiated for you as bot.rooms . Constructors Rooms() Declaration new Rooms() Functions create(name, isPrivate) Creates a Room and returns a ApiResult that indicates whether the operation succeeded or not, and contains information about the created room if it was successful. Declaration function create(name, isPrivate) Parameters Type Name Description string name The name of the room to create. boolean isPrivate (optional) - Whether the room should be private or not. Defaults to false. Returns Type Description abbot-js.ApiResult archive(room) Archives a Room and returns a result if it succeeded. Declaration function archive(room) Parameters Type Name Description Room room the room to archive. Returns Type Description abbot-js.ApiResult inviteUsers(room, users) Invites users to a Room and returns a result if it succeeded. Declaration function inviteUsers(room, users) Parameters Type Name Description Room room The room to invite users to. abbot-js.Array.<User> users The users to invite. Returns Type Description abbot-js.ApiResult setTopic(room, topic) Sets the topic for a Room and returns a result if it succeeded. Declaration function setTopic(room, topic) Parameters Type Name Description Room room The room to set the topic for. string topic The topic to set. setPurpose(room, purpose) Sets the purpose for a Room and returns a result if it succeeded. Declaration function setPurpose(room, purpose) Parameters Type Name Description Room room The room to set the topic for. string purpose The purpose to set. getDetails(room) Gets extra details about a room a Room by it's ID and returns a ApiResult that indicates whether the operation succeeded or not, and contains information about the room if it was successful. Declaration function getDetails(room) Parameters Type Name Description Room room The room to get the target for. Returns Type Description abbot-js.ApiResult.<RoomDetails> getTarget(roomId) Gets a chat address, suitable for sending to with to , for a room, given it's platform-specific ID (for example, the Channel ID 'Cnnnnnnn' in Slack). This method does not confirm that the room exists. If the room does not exist, sending a message to it will fail silently. Declaration function getTarget(roomId) Parameters Type Name Description string roomId The ID of the room"
  },
  "reference/javascript/RootSourceSkill.html": {
    "href": "reference/javascript/RootSourceSkill.html",
    "title": "Class RootSourceSkill | Abbot Docs",
    "keywords": "Class RootSourceSkill The skill that is the root source of a signal. This is the skill that kicked off the current signal chain. Constructors RootSourceSkill() Declaration new RootSourceSkill()"
  },
  "reference/javascript/Secrets.html": {
    "href": "reference/javascript/Secrets.html",
    "title": "Class Secrets | Abbot Docs",
    "keywords": "Class Secrets Abbot's secrets manager. This has been instantiated for you as bot.secrets . Constructors Secrets() Declaration new Secrets() Functions read(key) Read a secret from the secrets vault. Declaration function read(key) Parameters Type Name Description string key Returns Type Description string"
  },
  "reference/javascript/Signaler.html": {
    "href": "reference/javascript/Signaler.html",
    "title": "Class Signaler | Abbot Docs",
    "keywords": "Class Signaler Not to be confused with SignalR, use this to raise signals by calling the signal api endpoint https://ab.bot/api/skills/{id}/signal Constructors Signaler() Declaration new Signaler() Functions signal(name, args) Raises a signal from the skill with the specified name and arguments. Declaration function signal(name, args) Parameters Type Name Description string name The name of the signal to send. string args The arguments to pass to the skills that are subscribed to this signal."
  },
  "reference/javascript/SignalEvent.html": {
    "href": "reference/javascript/SignalEvent.html",
    "title": "Class SignalEvent | Abbot Docs",
    "keywords": "Class SignalEvent A signal raised by a skill. Constructors SignalEvent() Declaration new SignalEvent()"
  },
  "reference/javascript/SignalSource.html": {
    "href": "reference/javascript/SignalSource.html",
    "title": "Class SignalSource | Abbot Docs",
    "keywords": "Class SignalSource Information about the source of a signal. Constructors SignalSource() Declaration new SignalSource()"
  },
  "reference/javascript/SourceMessage.html": {
    "href": "reference/javascript/SourceMessage.html",
    "title": "Class SourceMessage | Abbot Docs",
    "keywords": "Class SourceMessage The source message for calling a skill. Either the message that invoked the skill or the message that was reacted to such as a button click or reaction. Constructors SourceMessage() Declaration new SourceMessage()"
  },
  "reference/javascript/SourceSkill.html": {
    "href": "reference/javascript/SourceSkill.html",
    "title": "Class SourceSkill | Abbot Docs",
    "keywords": "Class SourceSkill Information about the source skill that raised a signal. Constructors SourceSkill() Declaration new SourceSkill() Members signalEvent The signal event that raised this signal. Declaration signalEvent"
  },
  "reference/javascript/Time.html": {
    "href": "reference/javascript/Time.html",
    "title": "Class Time | Abbot Docs",
    "keywords": "Class Time A time of day independent of a date or timezone. Constructors Time() Declaration new Time() Functions compare(other) Compares this Time to another Time. Declaration function compare(other) Parameters Type Name Description other Returns Type Description -1 if the this time is less than the other time, 0 if they are equal, 1 if this time is greater than the other time. parse(timeString) Parses a string into a Time object. Declaration function parse(timeString) Parameters Type Name Description timeString A string in the format HH:MM:SS Returns Type Description a Time object toString() Returns a short string representation of the time. Declaration function toString() Returns Type Description a string representation of the time in the format HH:MM toLongString() Returns a long string representation of the time. Declaration function toLongString() Returns Type Description a string representation of the time in the format HH:MM:SS"
  },
  "reference/javascript/User.html": {
    "href": "reference/javascript/User.html",
    "title": "Class User | Abbot Docs",
    "keywords": "Class User A Chat User. Constructors User() Declaration new User()"
  },
  "reference/javascript/UserMessageTarget.html": {
    "href": "reference/javascript/UserMessageTarget.html",
    "title": "Class UserMessageTarget | Abbot Docs",
    "keywords": "Class UserMessageTarget A handle that can be used to send messages to a user. Constructors UserMessageTarget(id) Declaration new UserMessageTarget(id) Parameters Type Name Description string id The id of the user"
  },
  "reference/javascript/UserProfile.html": {
    "href": "reference/javascript/UserProfile.html",
    "title": "Class UserProfile | Abbot Docs",
    "keywords": "Class UserProfile A Chat User with profile information. Constructors UserProfile() Declaration new UserProfile()"
  },
  "reference/javascript/Users.html": {
    "href": "reference/javascript/Users.html",
    "title": "Class Users | Abbot Docs",
    "keywords": "Class Users Abbot's users client. Used to manage Slack users. This has been instantiated for you as bot.users . Constructors Users() Declaration new Users() Functions getTarget(userId) Gets a chat address, suitable for sending to with to , for a user, given it's platform-specific ID (for example, the User ID 'Unnnnnnn' in Slack). This method does not confirm that the user exists. If the user does not exist, sending a message to it will fail silently. Declaration function getTarget(userId) Parameters Type Name Description string userId The ID of the user getUser(userId) Gets the full user profile information for a Slack user, given their ID. Declaration function getUser(userId) Parameters Type Name Description userId The Slack user ID of the user to get the profile for."
  },
  "reference/javascript/Utils.html": {
    "href": "reference/javascript/Utils.html",
    "title": "Class Utils | Abbot Docs",
    "keywords": "Class Utils Convenience utilities for skill development. This has been instantiated for you as bot.utils . Constructors Utils() Declaration new Utils() Functions geocode(address, includeTimezone) Geocode an address Declaration function geocode(address, includeTimezone) Parameters Type Name Description string address The address to geocode. boolean includeTimezone Includes the time zone (e.g. America/Los_Angeles ) if true. Returns Type Description Location parseSlackUrl(url) Attempts to parse a Slack URL into a chat conversation that can be used to send messages. Declaration function parseSlackUrl(url) Parameters Type Name Description string url The URL to parse. Returns Type Description"
  },
  "reference/javascript/WorkingHours.html": {
    "href": "reference/javascript/WorkingHours.html",
    "title": "Class WorkingHours | Abbot Docs",
    "keywords": "Class WorkingHours Represents a range of time during which a user is working. Constructors WorkingHours() Declaration new WorkingHours() Functions contains() Returns true if the time is within the working hours. Declaration function contains() humanize() Returns a human friendly working hours. Declaration function humanize() Returns Type Description a string representation of the working hours in the format HH:MM:SS-HH:MM:SS"
  },
  "reference/python/bot.bot.Bot.html": {
    "href": "reference/python/bot.bot.Bot.html",
    "title": "Class Bot | Abbot Docs",
    "keywords": "Class Bot Most interactions with the outside world occur from the Bot object. Abbot injects this object into your script as bot . Inheritance builtins.object Bot Properties Name Description id The Bot's Id. name The Bot's user name. skill_id The ID of the skill being invoked. user_id The ID of the user invoking the skill. timestamp The timestamp of the invocation. code The code submitted by the user. room The room the user invoked the skill in. message_id The platform-specific ID of the message that triggered the invocation, if any thread The thread the user invoked the skill in. brain A client to access skill data in Abbot's Brain. secrets A client to access skill secrets. rooms A client to manage Rooms. users A client to manage Users. utils Some utilities for skill authors. raw The raw skillInfo object. user_name The user name of the user invoking the skill. args The arguments passed to the skill (alias for arguments). arguments The arguments passed to the skill. pattern The pattern that was matched, if any. is_pattern_match Whether or not the skill was invoked by a pattern. platform_id The ID of the team the skill was invoked by. skill_name The name of the skill being invoked. skill_url The URL of the skill being invoked. from_user The user invoking the skill. mentions The users mentioned in the message that triggered the skill. tokenized_arguments The arguments passed to the skill, tokenized. is_interaction Whether or not the skill was invoked as an interaction. is_request Whether or not the skill was invoked from an HTTP request. is_chat Whether or not the skill was invoked as a chat message. request The request that triggered the skill, if any. response The response that will be sent to the sender of the HTTP request, if any. Methods reply(response, direct_message=False, **kwargs) Send a reply. If direct_message is True, then the reply is sent as a direct message to the caller. Declaration reply(response, direct_message=False, **kwargs) Parameters Type Name Description str response The response to send back to chat. Union [ RoomMessageTarget,UserMessageTarget,ChatAddress ] to The recipient of the reply. reply_later(response, delay_in_seconds, **kwargs) Reply after a delay. Declaration reply_later(response, delay_in_seconds, **kwargs) Parameters Type Name Description str response The response to send back to chat. int delay_in_seconds The number of seconds to delay before sending the response. Union [ RoomMessageTarget,UserMessageTarget,ChatAddress ] to The recipient of the reply. reply_with_buttons(response, buttons, buttons_label=None, image_url=None, title=None, color=None, **kwargs) Sends a reply with a set of buttons. Clicking a button will call back into this skill. Declaration reply_with_buttons(response, buttons, buttons_label=None, image_url=None, title=None, color=None, **kwargs) Parameters Type Name Description str response The message to send as a response. list [ Button ] buttons The set of buttons to display (Maximum 6). str buttons_label The text that serves as a label for the set of buttons (optional). str image_url An image to render before the set of buttons (optional). str title A title to render (optional). str color The color to use for the sidebar (Slack Only) in hex (ex. #3AA3E3) (optional). Union [ RoomMessageTarget,UserMessageTarget,ChatAddress ] to The recipient of the reply. reply_with_image(image, response=None, title=None, title_url=None, color=None, **kwargs) Sends a reply along with an image attachment. The image can be a URL to an image or a base64 encoded image. Declaration reply_with_image(image, response=None, title=None, title_url=None, color=None, **kwargs) Parameters Type Name Description str image Either the URL to an image or the base64 encoded image. str response The message to send as a response (optional). str title An image title to render (optional). str title_url If specified, makes the title a link to this URL. Ignored if title is not set. (optional). str color The color to use for the sidebar (Slack Only) in hex (ex. #3AA3E3) (optional). Union [ RoomMessageTarget,UserMessageTarget,ChatAddress ] to The recipient of the reply. signal(name, args) Raises a signal from the skill with the specified name and arguments. :param name: The name of the signal to raise. :type name: str :param args: The arguments to pass to the skills that are subscribed to this signal. :type args: str Declaration signal(name, args) Parameters Type Name Description name args"
  },
  "reference/python/bot.bot.html": {
    "href": "reference/python/bot.bot.html",
    "title": "| Abbot Docs",
    "keywords": ""
  },
  "reference/python/bot.mention.Coordinate.html": {
    "href": "reference/python/bot.mention.Coordinate.html",
    "title": "Class Coordinate | Abbot Docs",
    "keywords": "Class Coordinate Represents a geographic coordinate. Inheritance builtins.object Coordinate"
  },
  "reference/python/bot.mention.html": {
    "href": "reference/python/bot.mention.html",
    "title": "| Abbot Docs",
    "keywords": ""
  },
  "reference/python/bot.mention.Location.html": {
    "href": "reference/python/bot.mention.Location.html",
    "title": "Class Location | Abbot Docs",
    "keywords": "Class Location A geo-coded location Inheritance builtins.object Location"
  },
  "reference/python/bot.mention.Mention.html": {
    "href": "reference/python/bot.mention.Mention.html",
    "title": "Class Mention | Abbot Docs",
    "keywords": "Class Mention A user mention. Inheritance builtins.object UserMessageTarget Mention"
  },
  "reference/python/bot.mention.TimeZone.html": {
    "href": "reference/python/bot.mention.TimeZone.html",
    "title": "Class TimeZone | Abbot Docs",
    "keywords": "Class TimeZone Information about a user's timezone Inheritance builtins.object TimeZone"
  },
  "reference/python/bot.mention.UserMessageTarget.html": {
    "href": "reference/python/bot.mention.UserMessageTarget.html",
    "title": "Class UserMessageTarget | Abbot Docs",
    "keywords": "Class UserMessageTarget A user message target is a handle that can be used to send messages to that user. Inheritance builtins.object UserMessageTarget Properties Name Description id The user ID. Methods get_thread(thread_id: str) Gets a handle to the specified thread in this user's DMs with Abbot. Declaration get_thread(thread_id: str) Parameters Type Name Description str thread_id The platform-specific thread ID."
  },
  "reference/python/bot.room.html": {
    "href": "reference/python/bot.room.html",
    "title": "| Abbot Docs",
    "keywords": ""
  },
  "reference/python/bot.room.Room.html": {
    "href": "reference/python/bot.room.Room.html",
    "title": "Class Room | Abbot Docs",
    "keywords": "Class Room A room is a place where people can chat. Inheritance builtins.object RoomMessageTarget Room"
  },
  "reference/python/bot.room.RoomMessageTarget.html": {
    "href": "reference/python/bot.room.RoomMessageTarget.html",
    "title": "Class RoomMessageTarget | Abbot Docs",
    "keywords": "Class RoomMessageTarget A room message target is a handle that can be used to send messages to that room. Inheritance builtins.object RoomMessageTarget Properties Name Description id The room ID. Methods get_thread(thread_id: str) Gets a handle to the specified thread in this room. Declaration get_thread(thread_id: str) Parameters Type Name Description str thread_id The platform-specific thread ID."
  },
  "reference/python/bot.rooms.html": {
    "href": "reference/python/bot.rooms.html",
    "title": "| Abbot Docs",
    "keywords": ""
  },
  "reference/python/bot.rooms.Result.html": {
    "href": "reference/python/bot.rooms.Result.html",
    "title": "Class Result | Abbot Docs",
    "keywords": "Class Result Represents a result from calling the rooms API. Inheritance builtins.object Result"
  },
  "reference/python/bot.rooms.Rooms.html": {
    "href": "reference/python/bot.rooms.Rooms.html",
    "title": "Class Rooms | Abbot Docs",
    "keywords": "Class Rooms Abbot's rooms client. Used to manage Slack conversations. This is automatically instantiated for you as bot.rooms . Inheritance builtins.object Rooms Methods archive(room) Archives a Room and returns a result if it succeeded. Declaration archive(room) Parameters Type Name Description Room room The room to archive. Returns Type Description result ( Result ) indicates whether the operation succeeded or not and contains information about the created room. create(name, is_private=False) Creates a Room and returns a Result that indicates whether the operation succeeded or not, and contains information about the created room if it was success. Declaration create(name, is_private=False) Parameters Type Name Description str name The name of the room. bool is_private Whether the room is private or not. Returns Type Description result ( Result ) indicates whether the operation succeeded or not and contains information about the created room. get_target(room_id: str) -> bot.room.RoomMessageTarget Gets a chat address, suitable for sending to with to , for a room, given it's platform-specific ID (for example, the Channel ID 'Cnnnnnnn' in Slack). This method does not confirm that the room exists. If the room does not exist, sending a message to it will fail silently. Declaration get_target(room_id: str) -> bot.room.RoomMessageTarget Parameters Type Name Description str id The platform-specific ID of the conversation. Returns Type Description RoomMessageTarget The room conversation. invite_users(room, users) Invites users to a Room and returns a result if it succeeded. Declaration invite_users(room, users) Parameters Type Name Description Room room The room to invite the users to. list users The users to invite. Returns Type Description result ( Result ) indicates whether the operation succeeded or not and contains information about the created room. set_purpose(room, purpose) Sets the purpose for a Room and returns a result if it succeeded. Declaration set_purpose(room, purpose) Parameters Type Name Description Room room The room to set the purpose for. str topic The purpose to set for the room. Returns Type Description result ( Result ) indicates whether the operation succeeded or not and contains information about the created room. set_topic(room, topic) Sets the topic for a Room and returns a result if it succeeded. Declaration set_topic(room, topic) Parameters Type Name Description Room room The room to set the topic for. str topic The topic to set for the room. Returns Type Description result ( Result ) indicates whether the operation succeeded or not and contains information about the created room."
  },
  "reference/python/bot.secrets.html": {
    "href": "reference/python/bot.secrets.html",
    "title": "| Abbot Docs",
    "keywords": ""
  },
  "reference/python/bot.secrets.Secrets.html": {
    "href": "reference/python/bot.secrets.Secrets.html",
    "title": "Class Secrets | Abbot Docs",
    "keywords": "Class Secrets Abbot's secrets manager. This is automatically instantiated for you as bot.secrets . Inheritance builtins.object Secrets Methods read(key) Read a secret from the vault. Declaration read(key) Parameters Type Name Description str key The key of the secret to retrieve. Returns Type Description secret ( str ) The secret from the vault."
  },
  "reference/python/bot.storage.Brain.html": {
    "href": "reference/python/bot.storage.Brain.html",
    "title": "Class Brain | Abbot Docs",
    "keywords": "Class Brain Abbot's brain. This has already been instantiated for you in bot.brain . Inheritance builtins.object Brain Methods delete(key) Delete an item from Abbot's brain. Declaration delete(key) Parameters Type Name Description str key The lookup key for the object to delete. get(key) Get an item from Abbot's brain. Declaration get(key) Parameters Type Name Description str key The item's key. Returns Type Description The string or object stored in Value. This data is JSON serialized. read(key) See get . Declaration read(key) Parameters Type Name Description key write(key, value) Write to Abbot's brain. This will overwrite any existing items with the same key . Declaration write(key, value) Parameters Type Name Description str key The lookup key for the object. object value The string or object to store in Abbot's brain. This data is JSON serialized."
  },
  "reference/python/bot.storage.html": {
    "href": "reference/python/bot.storage.html",
    "title": "| Abbot Docs",
    "keywords": ""
  },
  "reference/python/bot.users.html": {
    "href": "reference/python/bot.users.html",
    "title": "| Abbot Docs",
    "keywords": ""
  },
  "reference/python/bot.utils.Geocode.html": {
    "href": "reference/python/bot.utils.Geocode.html",
    "title": "Class Geocode | Abbot Docs",
    "keywords": "Class Geocode A Geocoded address. Inheritance builtins.object Geocode"
  },
  "reference/python/bot.utils.html": {
    "href": "reference/python/bot.utils.html",
    "title": "| Abbot Docs",
    "keywords": ""
  },
  "reference/python/index.html": {
    "href": "reference/python/index.html",
    "title": "Package Python Bot Reference | Abbot Docs",
    "keywords": "Package Python Bot Reference"
  }
}